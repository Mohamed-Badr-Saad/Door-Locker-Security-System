
Final_Project_CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003118  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00003118  000031ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800168  00800168  000032b4  2**0
                  ALLOC
  3 .stab         00003564  00000000  00000000  000032b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bf4  00000000  00000000  00006818  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000840c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000085ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000879e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000aba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000bf2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d108  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d5be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 38       	cpi	r26, 0x82	; 130
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e1       	ldi	r30, 0x18	; 24
      78:	f1 e3       	ldi	r31, 0x31	; 49
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 b6 09 	call	0x136c	; 0x136c <main>
      8a:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 46 18 	jmp	0x308c	; 0x308c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 46 18 	jmp	0x308c	; 0x308c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_setDynamicConfig>:

/*
 * Description : Function to set UART dynamic configurations
 */
void UART_setDynamicConfig (UART_config *UART_configurations)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_setDynamicConfig+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	/********UART dynamic configurations**********/
	UART_configurations->UART_baudRate = 9600;
     e3c:	e9 81       	ldd	r30, Y+1	; 0x01
     e3e:	fa 81       	ldd	r31, Y+2	; 0x02
     e40:	80 e8       	ldi	r24, 0x80	; 128
     e42:	95 e2       	ldi	r25, 0x25	; 37
     e44:	a0 e0       	ldi	r26, 0x00	; 0
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	84 83       	std	Z+4, r24	; 0x04
     e4a:	95 83       	std	Z+5, r25	; 0x05
     e4c:	a6 83       	std	Z+6, r26	; 0x06
     e4e:	b7 83       	std	Z+7, r27	; 0x07
	UART_configurations->UART_nBitsDataMode = UART_8_BIT_DATA_MODE;
     e50:	e9 81       	ldd	r30, Y+1	; 0x01
     e52:	fa 81       	ldd	r31, Y+2	; 0x02
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	82 83       	std	Z+2, r24	; 0x02
	UART_configurations->UART_parity = UART_PARITY_OFF;
     e58:	e9 81       	ldd	r30, Y+1	; 0x01
     e5a:	fa 81       	ldd	r31, Y+2	; 0x02
     e5c:	10 82       	st	Z, r1
	UART_configurations->UART_stopBits = UART_1_STOP_BIT;
     e5e:	e9 81       	ldd	r30, Y+1	; 0x01
     e60:	fa 81       	ldd	r31, Y+2	; 0x02
     e62:	11 82       	std	Z+1, r1	; 0x01
	UART_configurations->UART_transmissionSpeed = UART_doubleSpeed;
     e64:	e9 81       	ldd	r30, Y+1	; 0x01
     e66:	fa 81       	ldd	r31, Y+2	; 0x02
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	83 83       	std	Z+3, r24	; 0x03
	/**********************************************/
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <TWI_setDynamicConfig>:

/*
 * Description : Function to set TWI dynamic configurations
 */
void TWI_setDynamicConfig (TWI_config *TWI_configurations)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <TWI_setDynamicConfig+0x6>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
	TWI_configurations->TWI_bitRateValue = TWI_NORMAL_MODE_100K;
     e84:	e9 81       	ldd	r30, Y+1	; 0x01
     e86:	fa 81       	ldd	r31, Y+2	; 0x02
     e88:	80 ea       	ldi	r24, 0xA0	; 160
     e8a:	96 e8       	ldi	r25, 0x86	; 134
     e8c:	a1 e0       	ldi	r26, 0x01	; 1
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	81 83       	std	Z+1, r24	; 0x01
     e92:	92 83       	std	Z+2, r25	; 0x02
     e94:	a3 83       	std	Z+3, r26	; 0x03
     e96:	b4 83       	std	Z+4, r27	; 0x04
	TWI_configurations->TWI_prescalerValue = TWI_F_CPU_1;
     e98:	e9 81       	ldd	r30, Y+1	; 0x01
     e9a:	fa 81       	ldd	r31, Y+2	; 0x02
     e9c:	10 82       	st	Z, r1
	TWI_configurations->TWI_deviceAddress = 1;/*this MCU will have an address 0x01*/
     e9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ea0:	fa 81       	ldd	r31, Y+2	; 0x02
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	85 83       	std	Z+5, r24	; 0x05
	TWI_configurations->TWI_generalCallRecognitionStateValue = TWI_OFF;
     ea6:	e9 81       	ldd	r30, Y+1	; 0x01
     ea8:	fa 81       	ldd	r31, Y+2	; 0x02
     eaa:	16 82       	std	Z+6, r1	; 0x06
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <TIMER1_setDynamicConfig>:

/*
 * Description : Function to set TIMER1 dynamic configurations
 */
void TIMER1_setDynamicConfig (TIMER1_ConfigType *TIMER1_configurations)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	00 d0       	rcall	.+0      	; 0xebc <TIMER1_setDynamicConfig+0x6>
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_configurations->mode = TIMER1_CTC_MODE;
     ec4:	e9 81       	ldd	r30, Y+1	; 0x01
     ec6:	fa 81       	ldd	r31, Y+2	; 0x02
     ec8:	84 e0       	ldi	r24, 0x04	; 4
     eca:	85 83       	std	Z+5, r24	; 0x05
	TIMER1_configurations->initial_value = 0;
     ecc:	e9 81       	ldd	r30, Y+1	; 0x01
     ece:	fa 81       	ldd	r31, Y+2	; 0x02
     ed0:	11 82       	std	Z+1, r1	; 0x01
     ed2:	10 82       	st	Z, r1
	TIMER1_configurations->compare_value = 7812;
     ed4:	e9 81       	ldd	r30, Y+1	; 0x01
     ed6:	fa 81       	ldd	r31, Y+2	; 0x02
     ed8:	84 e8       	ldi	r24, 0x84	; 132
     eda:	9e e1       	ldi	r25, 0x1E	; 30
     edc:	93 83       	std	Z+3, r25	; 0x03
     ede:	82 83       	std	Z+2, r24	; 0x02
	TIMER1_configurations->prescaler = TIMER1_F_CPU_1024;
     ee0:	e9 81       	ldd	r30, Y+1	; 0x01
     ee2:	fa 81       	ldd	r31, Y+2	; 0x02
     ee4:	85 e0       	ldi	r24, 0x05	; 5
     ee6:	84 83       	std	Z+4, r24	; 0x04
	TIMER1_configurations->TIMER1_OutputPinsNumberValue = 0;
     ee8:	e9 81       	ldd	r30, Y+1	; 0x01
     eea:	fa 81       	ldd	r31, Y+2	; 0x02
     eec:	16 82       	std	Z+6, r1	; 0x06
	TIMER1_configurations->TIMER1_ctcModeOutputValueOnOC1A =
     eee:	e9 81       	ldd	r30, Y+1	; 0x01
     ef0:	fa 81       	ldd	r31, Y+2	; 0x02
     ef2:	17 82       	std	Z+7, r1	; 0x07
			TIMER1_CTC_MODE_NO_OUTPUT;
	TIMER1_configurations->TIMER1_ctcModeOutputValueOnOC1B =
     ef4:	e9 81       	ldd	r30, Y+1	; 0x01
     ef6:	fa 81       	ldd	r31, Y+2	; 0x02
     ef8:	10 86       	std	Z+8, r1	; 0x08
			TIMER1_CTC_MODE_NO_OUTPUT;
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <doorLock_receivePassword>:

/*
 * Description : Function to receive the password from CONTROL_ECU
 */
void doorLock_receivePassword (uint8 *receivedPass)
{
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <doorLock_receivePassword+0xa>
     f0e:	0f 92       	push	r0
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	9b 83       	std	Y+3, r25	; 0x03
     f16:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count;
	/* we loop until password size +1
	 * to receive enter button to make CONTROL_ECU know that the user finished entering the password*/
	for (count = 0 ; count < PASSWORD_SIZE_PLUS_ENTER ; count++)
     f18:	19 82       	std	Y+1, r1	; 0x01
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <doorLock_receivePassword+0x36>
	{
		receivedPass[count] = UART_receiveByte();/*receive the password from HMI_ECU byte by byte*/
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	9b 81       	ldd	r25, Y+3	; 0x03
     f26:	8c 01       	movw	r16, r24
     f28:	02 0f       	add	r16, r18
     f2a:	13 1f       	adc	r17, r19
     f2c:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <UART_receiveByte>
     f30:	f8 01       	movw	r30, r16
     f32:	80 83       	st	Z, r24
void doorLock_receivePassword (uint8 *receivedPass)
{
	uint8 count;
	/* we loop until password size +1
	 * to receive enter button to make CONTROL_ECU know that the user finished entering the password*/
	for (count = 0 ; count < PASSWORD_SIZE_PLUS_ENTER ; count++)
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	86 30       	cpi	r24, 0x06	; 6
     f3e:	70 f3       	brcs	.-36     	; 0xf1c <doorLock_receivePassword+0x18>
	{
		receivedPass[count] = UART_receiveByte();/*receive the password from HMI_ECU byte by byte*/
	}
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	08 95       	ret

00000f50 <doorLock_passwordFirstCheck>:

/*
 * Description : Function to check whether the 2 passwords are identical or not in case of creating a new password
 */
uint8 doorLock_passwordFirstCheck (void)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <doorLock_passwordFirstCheck+0x6>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	uint8 count, passwordState = PASSWORDS_IDENTICAL;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	89 83       	std	Y+1, r24	; 0x01
	for (count = 0 ; count < PASSWORD_SIZE ; count++)
     f5e:	1a 82       	std	Y+2, r1	; 0x02
     f60:	15 c0       	rjmp	.+42     	; 0xf8c <doorLock_passwordFirstCheck+0x3c>
	{
		if (g_passwordArray[count] != g_repeatedPassword[count])/*in case the 2 passwords are not identical*/
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	fc 01       	movw	r30, r24
     f6a:	e8 59       	subi	r30, 0x98	; 152
     f6c:	fe 4f       	sbci	r31, 0xFE	; 254
     f6e:	20 81       	ld	r18, Z
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	fc 01       	movw	r30, r24
     f78:	e2 59       	subi	r30, 0x92	; 146
     f7a:	fe 4f       	sbci	r31, 0xFE	; 254
     f7c:	80 81       	ld	r24, Z
     f7e:	28 17       	cp	r18, r24
     f80:	11 f0       	breq	.+4      	; 0xf86 <doorLock_passwordFirstCheck+0x36>
		{
			passwordState = PASSWORDS_NOT_IDENTICAL;
     f82:	19 82       	std	Y+1, r1	; 0x01
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <doorLock_passwordFirstCheck+0x42>
 * Description : Function to check whether the 2 passwords are identical or not in case of creating a new password
 */
uint8 doorLock_passwordFirstCheck (void)
{
	uint8 count, passwordState = PASSWORDS_IDENTICAL;
	for (count = 0 ; count < PASSWORD_SIZE ; count++)
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	8a 83       	std	Y+2, r24	; 0x02
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	85 30       	cpi	r24, 0x05	; 5
     f90:	40 f3       	brcs	.-48     	; 0xf62 <doorLock_passwordFirstCheck+0x12>
			passwordState = PASSWORDS_NOT_IDENTICAL;
			break;
		}
	}

	UART_sendByte(passwordState);/*send the state of comparing 2 passwords to HMI_ECU*/
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	0e 94 28 17 	call	0x2e50	; 0x2e50 <UART_sendByte>
	return passwordState;
     f98:	89 81       	ldd	r24, Y+1	; 0x01

}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <doorLock_savePassword>:
/*
 * Description : Function to save the password in EEPROM
 */
void doorLock_savePassword (void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	60 97       	sbiw	r28, 0x10	; 16
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
	uint8 count, eepromAdress = 0;
     fb8:	1f 86       	std	Y+15, r1	; 0x0f

	for (count = 0 ; count < PASSWORD_SIZE ; count++)
     fba:	18 8a       	std	Y+16, r1	; 0x10
     fbc:	86 c0       	rjmp	.+268    	; 0x10ca <doorLock_savePassword+0x126>
	{
		EEPROM_writeByte(g_passwordArray[count], eepromAdress);/*save the password to EEPROM*/
     fbe:	88 89       	ldd	r24, Y+16	; 0x10
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	fc 01       	movw	r30, r24
     fc6:	e8 59       	subi	r30, 0x98	; 152
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	90 81       	ld	r25, Z
     fcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	89 2f       	mov	r24, r25
     fd4:	b9 01       	movw	r22, r18
     fd6:	0e 94 9e 0a 	call	0x153c	; 0x153c <EEPROM_writeByte>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e2       	ldi	r26, 0x20	; 32
     fe0:	b1 e4       	ldi	r27, 0x41	; 65
     fe2:	8b 87       	std	Y+11, r24	; 0x0b
     fe4:	9c 87       	std	Y+12, r25	; 0x0c
     fe6:	ad 87       	std	Y+13, r26	; 0x0d
     fe8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fea:	6b 85       	ldd	r22, Y+11	; 0x0b
     fec:	7c 85       	ldd	r23, Y+12	; 0x0c
     fee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a ef       	ldi	r20, 0xFA	; 250
     ff8:	54 e4       	ldi	r21, 0x44	; 68
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	8f 83       	std	Y+7, r24	; 0x07
    1004:	98 87       	std	Y+8, r25	; 0x08
    1006:	a9 87       	std	Y+9, r26	; 0x09
    1008:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    100a:	6f 81       	ldd	r22, Y+7	; 0x07
    100c:	78 85       	ldd	r23, Y+8	; 0x08
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e8       	ldi	r20, 0x80	; 128
    1018:	5f e3       	ldi	r21, 0x3F	; 63
    101a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    101e:	88 23       	and	r24, r24
    1020:	2c f4       	brge	.+10     	; 0x102c <doorLock_savePassword+0x88>
		__ticks = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9e 83       	std	Y+6, r25	; 0x06
    1028:	8d 83       	std	Y+5, r24	; 0x05
    102a:	3f c0       	rjmp	.+126    	; 0x10aa <doorLock_savePassword+0x106>
	else if (__tmp > 65535)
    102c:	6f 81       	ldd	r22, Y+7	; 0x07
    102e:	78 85       	ldd	r23, Y+8	; 0x08
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	4f e7       	ldi	r20, 0x7F	; 127
    103a:	57 e4       	ldi	r21, 0x47	; 71
    103c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1040:	18 16       	cp	r1, r24
    1042:	4c f5       	brge	.+82     	; 0x1096 <doorLock_savePassword+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	6b 85       	ldd	r22, Y+11	; 0x0b
    1046:	7c 85       	ldd	r23, Y+12	; 0x0c
    1048:	8d 85       	ldd	r24, Y+13	; 0x0d
    104a:	9e 85       	ldd	r25, Y+14	; 0x0e
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	0f c0       	rjmp	.+30     	; 0x108c <doorLock_savePassword+0xe8>
    106e:	88 ec       	ldi	r24, 0xC8	; 200
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <doorLock_savePassword+0xd6>
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	69 f7       	brne	.-38     	; 0x106e <doorLock_savePassword+0xca>
    1094:	14 c0       	rjmp	.+40     	; 0x10be <doorLock_savePassword+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1096:	6f 81       	ldd	r22, Y+7	; 0x07
    1098:	78 85       	ldd	r23, Y+8	; 0x08
    109a:	89 85       	ldd	r24, Y+9	; 0x09
    109c:	9a 85       	ldd	r25, Y+10	; 0x0a
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	9e 83       	std	Y+6, r25	; 0x06
    10a8:	8d 83       	std	Y+5, r24	; 0x05
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <doorLock_savePassword+0x112>
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);/*between every frame on TWI bus we have to wait 10ms*/
		eepromAdress++;
    10be:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	8f 87       	std	Y+15, r24	; 0x0f
 */
void doorLock_savePassword (void)
{
	uint8 count, eepromAdress = 0;

	for (count = 0 ; count < PASSWORD_SIZE ; count++)
    10c4:	88 89       	ldd	r24, Y+16	; 0x10
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	88 8b       	std	Y+16, r24	; 0x10
    10ca:	88 89       	ldd	r24, Y+16	; 0x10
    10cc:	85 30       	cpi	r24, 0x05	; 5
    10ce:	08 f4       	brcc	.+2      	; 0x10d2 <doorLock_savePassword+0x12e>
    10d0:	76 cf       	rjmp	.-276    	; 0xfbe <doorLock_savePassword+0x1a>
	{
		EEPROM_writeByte(g_passwordArray[count], eepromAdress);/*save the password to EEPROM*/
		_delay_ms(10);/*between every frame on TWI bus we have to wait 10ms*/
		eepromAdress++;
	}
}
    10d2:	60 96       	adiw	r28, 0x10	; 16
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <doorLock_receiveOption>:

/*
 * Description : Function to receive the required option from HMI_ECU
 */
uint8 doorLock_receiveOption (void)
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	0f 92       	push	r0
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	uint8 option;
	option = UART_receiveByte();
    10ee:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <UART_receiveByte>
    10f2:	89 83       	std	Y+1, r24	; 0x01
	return option;
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <doorLock_passwordSecondCheck>:
/*
 * Description : Function to check whether the saved password in EEPROM is identical to the received password or not
 */
uint8 doorLock_passwordSecondCheck (void)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	62 97       	sbiw	r28, 0x12	; 18
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
	uint8 count, eepromAdress = 0, eepromData, passwordState =
    1112:	18 8a       	std	Y+16, r1	; 0x10
	PASSWORDS_IDENTICAL;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	8f 87       	std	Y+15, r24	; 0x0f
	for (count = 0 ; count < PASSWORD_SIZE ; count++)
    1118:	19 8a       	std	Y+17, r1	; 0x11
    111a:	8c c0       	rjmp	.+280    	; 0x1234 <doorLock_passwordSecondCheck+0x136>
	{
		EEPROM_readByte(&eepromData, eepromAdress);
    111c:	88 89       	ldd	r24, Y+16	; 0x10
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	ce 01       	movw	r24, r28
    1124:	42 96       	adiw	r24, 0x12	; 18
    1126:	b9 01       	movw	r22, r18
    1128:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <EEPROM_readByte>
		if (g_passwordArray[count] != eepromData)
    112c:	89 89       	ldd	r24, Y+17	; 0x11
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	fc 01       	movw	r30, r24
    1134:	e8 59       	subi	r30, 0x98	; 152
    1136:	fe 4f       	sbci	r31, 0xFE	; 254
    1138:	90 81       	ld	r25, Z
    113a:	8a 89       	ldd	r24, Y+18	; 0x12
    113c:	98 17       	cp	r25, r24
    113e:	11 f0       	breq	.+4      	; 0x1144 <doorLock_passwordSecondCheck+0x46>
		{
			passwordState = PASSWORDS_NOT_IDENTICAL;
    1140:	1f 86       	std	Y+15, r1	; 0x0f
    1142:	7c c0       	rjmp	.+248    	; 0x123c <doorLock_passwordSecondCheck+0x13e>
			break;
		}
		eepromAdress++;
    1144:	88 89       	ldd	r24, Y+16	; 0x10
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	88 8b       	std	Y+16, r24	; 0x10
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a0 e2       	ldi	r26, 0x20	; 32
    1150:	b1 e4       	ldi	r27, 0x41	; 65
    1152:	8b 87       	std	Y+11, r24	; 0x0b
    1154:	9c 87       	std	Y+12, r25	; 0x0c
    1156:	ad 87       	std	Y+13, r26	; 0x0d
    1158:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115a:	6b 85       	ldd	r22, Y+11	; 0x0b
    115c:	7c 85       	ldd	r23, Y+12	; 0x0c
    115e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1160:	9e 85       	ldd	r25, Y+14	; 0x0e
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	4a ef       	ldi	r20, 0xFA	; 250
    1168:	54 e4       	ldi	r21, 0x44	; 68
    116a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8f 83       	std	Y+7, r24	; 0x07
    1174:	98 87       	std	Y+8, r25	; 0x08
    1176:	a9 87       	std	Y+9, r26	; 0x09
    1178:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    117a:	6f 81       	ldd	r22, Y+7	; 0x07
    117c:	78 85       	ldd	r23, Y+8	; 0x08
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	9a 85       	ldd	r25, Y+10	; 0x0a
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    118e:	88 23       	and	r24, r24
    1190:	2c f4       	brge	.+10     	; 0x119c <doorLock_passwordSecondCheck+0x9e>
		__ticks = 1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
    119a:	3f c0       	rjmp	.+126    	; 0x121a <doorLock_passwordSecondCheck+0x11c>
	else if (__tmp > 65535)
    119c:	6f 81       	ldd	r22, Y+7	; 0x07
    119e:	78 85       	ldd	r23, Y+8	; 0x08
    11a0:	89 85       	ldd	r24, Y+9	; 0x09
    11a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	3f ef       	ldi	r19, 0xFF	; 255
    11a8:	4f e7       	ldi	r20, 0x7F	; 127
    11aa:	57 e4       	ldi	r21, 0x47	; 71
    11ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11b0:	18 16       	cp	r1, r24
    11b2:	4c f5       	brge	.+82     	; 0x1206 <doorLock_passwordSecondCheck+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e2       	ldi	r20, 0x20	; 32
    11c2:	51 e4       	ldi	r21, 0x41	; 65
    11c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9e 83       	std	Y+6, r25	; 0x06
    11da:	8d 83       	std	Y+5, r24	; 0x05
    11dc:	0f c0       	rjmp	.+30     	; 0x11fc <doorLock_passwordSecondCheck+0xfe>
    11de:	88 ec       	ldi	r24, 0xC8	; 200
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	9c 83       	std	Y+4, r25	; 0x04
    11e4:	8b 83       	std	Y+3, r24	; 0x03
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <doorLock_passwordSecondCheck+0xec>
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	9e 83       	std	Y+6, r25	; 0x06
    11fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	69 f7       	brne	.-38     	; 0x11de <doorLock_passwordSecondCheck+0xe0>
    1204:	14 c0       	rjmp	.+40     	; 0x122e <doorLock_passwordSecondCheck+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1206:	6f 81       	ldd	r22, Y+7	; 0x07
    1208:	78 85       	ldd	r23, Y+8	; 0x08
    120a:	89 85       	ldd	r24, Y+9	; 0x09
    120c:	9a 85       	ldd	r25, Y+10	; 0x0a
    120e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	9e 83       	std	Y+6, r25	; 0x06
    1218:	8d 83       	std	Y+5, r24	; 0x05
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
    121c:	9e 81       	ldd	r25, Y+6	; 0x06
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <doorLock_passwordSecondCheck+0x128>
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
 */
uint8 doorLock_passwordSecondCheck (void)
{
	uint8 count, eepromAdress = 0, eepromData, passwordState =
	PASSWORDS_IDENTICAL;
	for (count = 0 ; count < PASSWORD_SIZE ; count++)
    122e:	89 89       	ldd	r24, Y+17	; 0x11
    1230:	8f 5f       	subi	r24, 0xFF	; 255
    1232:	89 8b       	std	Y+17, r24	; 0x11
    1234:	89 89       	ldd	r24, Y+17	; 0x11
    1236:	85 30       	cpi	r24, 0x05	; 5
    1238:	08 f4       	brcc	.+2      	; 0x123c <doorLock_passwordSecondCheck+0x13e>
    123a:	70 cf       	rjmp	.-288    	; 0x111c <doorLock_passwordSecondCheck+0x1e>
			break;
		}
		eepromAdress++;
		_delay_ms(10);
	}
	UART_sendByte(passwordState);/*sends the state of the password to HMI_ECU*/
    123c:	8f 85       	ldd	r24, Y+15	; 0x0f
    123e:	0e 94 28 17 	call	0x2e50	; 0x2e50 <UART_sendByte>
	return passwordState;
    1242:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1244:	62 96       	adiw	r28, 0x12	; 18
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <tickIncrement>:

/*
 * Description : Function to increment g_tick every compare match [callback function]
 */
void tickIncrement (void)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    125e:	80 91 74 01 	lds	r24, 0x0174
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	80 93 74 01 	sts	0x0174, r24
}
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <delayInSec>:

/*
 * Description : Function to make a delay for specific time in seconds
 */
void delayInSec (uint16 timeInSec)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <delayInSec+0x6>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
	/*************wait for timeInSec***********/
	while (g_tick < timeInSec)
    127c:	80 91 74 01 	lds	r24, 0x0174
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	28 17       	cp	r18, r24
    128a:	39 07       	cpc	r19, r25
    128c:	b8 f3       	brcs	.-18     	; 0x127c <delayInSec+0xe>
	{
	}
	g_tick = 0;
    128e:	10 92 74 01 	sts	0x0174, r1
	/*****************************************/
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <doorLock_openDoor>:

/*
 * Description : Function to open the door
 */
void doorLock_openDoor (void)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
	TIMER1_init(&g_TIMER1_configurations);/*it will call the callback function every 1sec*/
    12a4:	89 e7       	ldi	r24, 0x79	; 121
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	0e 94 49 14 	call	0x2892	; 0x2892 <TIMER1_init>
	DcMotor_Rotate(DC_MOTOR_CLOCKWISE, DC_MOTOR_FULL_SPEED);
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	64 e6       	ldi	r22, 0x64	; 100
    12b0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DcMotor_Rotate>
	delayInSec(15);/*wait for 15sec*/
    12b4:	8f e0       	ldi	r24, 0x0F	; 15
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 37 09 	call	0x126e	; 0x126e <delayInSec>
	DcMotor_Rotate(DC_MOTOR_STOP, DC_MOTOR_STOP);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DcMotor_Rotate>
	delayInSec(3);/*hold for 3sec*/
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 37 09 	call	0x126e	; 0x126e <delayInSec>
	DcMotor_Rotate(DC_MOTOR_ANTI_CLOCKWISE, DC_MOTOR_FULL_SPEED);
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	64 e6       	ldi	r22, 0x64	; 100
    12d0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DcMotor_Rotate>
	delayInSec(15);/*wait for 15sec*/
    12d4:	8f e0       	ldi	r24, 0x0F	; 15
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 37 09 	call	0x126e	; 0x126e <delayInSec>
	DcMotor_Rotate(DC_MOTOR_STOP, DC_MOTOR_STOP);
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DcMotor_Rotate>

	TIMER1_deInit();
    12e4:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <TIMER1_deInit>
}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <doorLock_receiveAndStoreNewPassword>:

/*
 * Description : Function to receive newly created password and store it in EEPROM
 */
void doorLock_receiveAndStoreNewPassword (void)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
	/****************************repeat this loop in case the entered 2 passwords are not identical****************************/
	do
	{
		doorLock_receivePassword(g_passwordArray);/*receive the password from HMI_ECU for the first time*/
    12f6:	88 e6       	ldi	r24, 0x68	; 104
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	0e 94 82 07 	call	0xf04	; 0xf04 <doorLock_receivePassword>
		doorLock_receivePassword(g_repeatedPassword);/*receive the password from HMI_ECU for the second time*/
    12fe:	8e e6       	ldi	r24, 0x6E	; 110
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	0e 94 82 07 	call	0xf04	; 0xf04 <doorLock_receivePassword>
	} while (doorLock_passwordFirstCheck() == PASSWORDS_NOT_IDENTICAL);
    1306:	0e 94 a8 07 	call	0xf50	; 0xf50 <doorLock_passwordFirstCheck>
    130a:	88 23       	and	r24, r24
    130c:	a1 f3       	breq	.-24     	; 0x12f6 <doorLock_receiveAndStoreNewPassword+0x8>
	/************************************************************************************************************************/
	/******In case the 2 passwords are identical CONTROL_ECU will save the password in EEPROM******/
	doorLock_savePassword();
    130e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <doorLock_savePassword>
	/*************************************************/
	UART_sendByte(CONTROL_ECU_READY);/*to inform HMI_ECU that CONTROL_ECU is ready to receive data*/
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	0e 94 28 17 	call	0x2e50	; 0x2e50 <UART_sendByte>
}
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <doorLock_3trialsPasswordCheck>:
/*
 * Description : Function to check the entered password(for the third time) in order to do specific option
 * in case the user failed to enter the password correctly in the 3 trials then we have to return to the main options
 */
uint8 doorLock_3trialsPasswordCheck (void)
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	00 d0       	rcall	.+0      	; 0x1324 <doorLock_3trialsPasswordCheck+0x6>
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
	uint8 count, passwordState = DUMMY_VALUE;
    1328:	80 ef       	ldi	r24, 0xF0	; 240
    132a:	89 83       	std	Y+1, r24	; 0x01

	/* we make the fourth loop
	 * in order to check the password that it is entered for the third time*/
	for (count = 0 ; count <= NUMBER_OF_PASSWORD_TRIALS ; count++)
    132c:	1a 82       	std	Y+2, r1	; 0x02
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <doorLock_3trialsPasswordCheck+0x3a>
	{
		if (passwordState == PASSWORDS_IDENTICAL)
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	21 f4       	brne	.+8      	; 0x133e <doorLock_3trialsPasswordCheck+0x20>
		{
			g_3trialsPasswordFlag = PASSWORDS_IDENTICAL;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	80 93 75 01 	sts	0x0175, r24
    133c:	10 c0       	rjmp	.+32     	; 0x135e <doorLock_3trialsPasswordCheck+0x40>
			break;
		}
		else if (count < 3)/*in case the 2 passwords are not identical and count<3*/
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	38 f4       	brcc	.+14     	; 0x1352 <doorLock_3trialsPasswordCheck+0x34>
		{
			doorLock_receivePassword(g_passwordArray);/*receive the password from HMI_ECU*/
    1344:	88 e6       	ldi	r24, 0x68	; 104
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	0e 94 82 07 	call	0xf04	; 0xf04 <doorLock_receivePassword>
			passwordState = doorLock_passwordSecondCheck();/*check if the saved password in EEPROM is identical to received password*/
    134c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <doorLock_passwordSecondCheck>
    1350:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 count, passwordState = DUMMY_VALUE;

	/* we make the fourth loop
	 * in order to check the password that it is entered for the third time*/
	for (count = 0 ; count <= NUMBER_OF_PASSWORD_TRIALS ; count++)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	8f 5f       	subi	r24, 0xFF	; 255
    1356:	8a 83       	std	Y+2, r24	; 0x02
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	48 f3       	brcs	.-46     	; 0x1330 <doorLock_3trialsPasswordCheck+0x12>
		{
			doorLock_receivePassword(g_passwordArray);/*receive the password from HMI_ECU*/
			passwordState = doorLock_passwordSecondCheck();/*check if the saved password in EEPROM is identical to received password*/
		}
	}
	return g_3trialsPasswordFlag;
    135e:	80 91 75 01 	lds	r24, 0x0175
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <main>:
/**********Other header files used by this module*************/
#include<avr/io.h>
/*****************************************************************/

int main (void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	63 97       	sbiw	r28, 0x13	; 19
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
	uint8 option, count;
	SREG |= (1 << 7);/*enable global interrupt*/
    1380:	af e5       	ldi	r26, 0x5F	; 95
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ef e5       	ldi	r30, 0x5F	; 95
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	80 68       	ori	r24, 0x80	; 128
    138c:	8c 93       	st	X, r24
	/********UART dynamic configurations**********/
	UART_config UART_configurations;
	UART_setDynamicConfig(&UART_configurations);/*Set UART dynamic configurations*/
    138e:	ce 01       	movw	r24, r28
    1390:	03 96       	adiw	r24, 0x03	; 3
    1392:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_setDynamicConfig>
	UART_init(&UART_configurations);/*initialize UART*/
    1396:	ce 01       	movw	r24, r28
    1398:	03 96       	adiw	r24, 0x03	; 3
    139a:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <UART_init>
	/**********************************************/

	/**************TWI dynamic configurations************************/
	TWI_config TWI_configurations;
	TWI_setDynamicConfig(&TWI_configurations);
    139e:	ce 01       	movw	r24, r28
    13a0:	0b 96       	adiw	r24, 0x0b	; 11
    13a2:	0e 94 3b 07 	call	0xe76	; 0xe76 <TWI_setDynamicConfig>
	TWI_init(&TWI_configurations);
    13a6:	ce 01       	movw	r24, r28
    13a8:	0b 96       	adiw	r24, 0x0b	; 11
    13aa:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <TWI_init>
	/****************************************************************/

	/*********TIMER1 dynamic configurations****************//*it will call the callback function every 1sec*/
	TIMER1_setDynamicConfig(&g_TIMER1_configurations);
    13ae:	89 e7       	ldi	r24, 0x79	; 121
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TIMER1_setDynamicConfig>
	TIMER1_setCallBackFunction(tickIncrement);
    13b6:	8b e2       	ldi	r24, 0x2B	; 43
    13b8:	99 e0       	ldi	r25, 0x09	; 9
    13ba:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <TIMER1_setCallBackFunction>
	/*******************************************************/

	/*****initialize pins direction in the micro-controller to make the motor operate in the required state*****/
	DcMotor_init();
    13be:	0e 94 42 0a 	call	0x1484	; 0x1484 <DcMotor_init>
	/***********************************************************************************************************/

	/******initialize BUZZER pin direction******/
	BUZZER_init();
    13c2:	0e 94 19 0a 	call	0x1432	; 0x1432 <BUZZER_init>
	/******************************************/

	UART_sendByte(CONTROL_ECU_READY);/*to inform HMI_ECU that CONTROL_ECU is ready to receive data*/
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	0e 94 28 17 	call	0x2e50	; 0x2e50 <UART_sendByte>

	doorLock_receiveAndStoreNewPassword();/*receive newly created password and store it in EEPROM*/
    13cc:	0e 94 77 09 	call	0x12ee	; 0x12ee <doorLock_receiveAndStoreNewPassword>

	while (1)
	{
		option = doorLock_receiveOption();/*receive the required option from HMI_ECU*/
    13d0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <doorLock_receiveOption>
    13d4:	8a 83       	std	Y+2, r24	; 0x02
		count = doorLock_3trialsPasswordCheck();/*give the user 3 trials only to enter the password correctly*/
    13d6:	0e 94 8f 09 	call	0x131e	; 0x131e <doorLock_3trialsPasswordCheck>
    13da:	89 83       	std	Y+1, r24	; 0x01

		/***************in case the user entered the correct password in any of the 3 trials*****************/
		if (g_3trialsPasswordFlag)
    13dc:	80 91 75 01 	lds	r24, 0x0175
    13e0:	88 23       	and	r24, r24
    13e2:	c1 f0       	breq	.+48     	; 0x1414 <main+0xa8>
		{
			g_3trialsPasswordFlag = PASSWORDS_NOT_IDENTICAL;
    13e4:	10 92 75 01 	sts	0x0175, r1
			switch (option)
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3b 8b       	std	Y+19, r19	; 0x13
    13f0:	2a 8b       	std	Y+18, r18	; 0x12
    13f2:	8a 89       	ldd	r24, Y+18	; 0x12
    13f4:	9b 89       	ldd	r25, Y+19	; 0x13
    13f6:	8b 32       	cpi	r24, 0x2B	; 43
    13f8:	91 05       	cpc	r25, r1
    13fa:	31 f0       	breq	.+12     	; 0x1408 <main+0x9c>
    13fc:	2a 89       	ldd	r18, Y+18	; 0x12
    13fe:	3b 89       	ldd	r19, Y+19	; 0x13
    1400:	2d 32       	cpi	r18, 0x2D	; 45
    1402:	31 05       	cpc	r19, r1
    1404:	21 f0       	breq	.+8      	; 0x140e <main+0xa2>
    1406:	e4 cf       	rjmp	.-56     	; 0x13d0 <main+0x64>
			{
			case OPEN_DOOR :
				doorLock_openDoor();
    1408:	0e 94 4e 09 	call	0x129c	; 0x129c <doorLock_openDoor>
    140c:	e1 cf       	rjmp	.-62     	; 0x13d0 <main+0x64>

				break;

			case CHANGE_PASSWORD :
				doorLock_receiveAndStoreNewPassword();/*receive newly created password and store it in EEPROM*/
    140e:	0e 94 77 09 	call	0x12ee	; 0x12ee <doorLock_receiveAndStoreNewPassword>
    1412:	de cf       	rjmp	.-68     	; 0x13d0 <main+0x64>
		}
		/**********************************************************************************************************/
		/********************in case the user entered a wrong password for more than 3 trials*******************/
		else
		{
			TIMER1_init(&g_TIMER1_configurations);
    1414:	89 e7       	ldi	r24, 0x79	; 121
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	0e 94 49 14 	call	0x2892	; 0x2892 <TIMER1_init>
			BUZZER_on();
    141c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <BUZZER_on>
			delayInSec(60);/*delay for 1min*/
    1420:	8c e3       	ldi	r24, 0x3C	; 60
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 37 09 	call	0x126e	; 0x126e <delayInSec>
			TIMER1_deInit();
    1428:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <TIMER1_deInit>
			BUZZER_off();
    142c:	0e 94 36 0a 	call	0x146c	; 0x146c <BUZZER_off>
    1430:	cf cf       	rjmp	.-98     	; 0x13d0 <main+0x64>

00001432 <BUZZER_init>:
/*************************Functions definitions**************************/
/*
 * Description : Function to set the pin direction that is connected to the BUZZER
 */
void BUZZER_init (void)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
	/*****Setup the direction for the buzzer pin as output pin through the GPIO driver******/
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    143a:	83 e0       	ldi	r24, 0x03	; 3
    143c:	67 e0       	ldi	r22, 0x07	; 7
    143e:	41 e0       	ldi	r20, 0x01	; 1
    1440:	0e 94 48 0b 	call	0x1690	; 0x1690 <GPIO_setupPinDirection>
	/**************************************************************************************/
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);/*Turn off the buzzer through the GPIO*/
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	67 e0       	ldi	r22, 0x07	; 7
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>

}
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <BUZZER_on>:

/*
 * Description : Function to turn on the BUZZER
 */
void BUZZER_on(void)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_ON);/*Write 1 on the BUZZER pin to make it ON*/
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	67 e0       	ldi	r22, 0x07	; 7
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>
}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <BUZZER_off>:

/*
 * Description : Function to turn off the BUZZER
 */
void BUZZER_off(void)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);/*Write 0 on the BUZZER pin to make it OFF*/
    1474:	83 e0       	ldi	r24, 0x03	; 3
    1476:	67 e0       	ldi	r22, 0x07	; 7
    1478:	41 e0       	ldi	r20, 0x01	; 1
    147a:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>

}
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <DcMotor_init>:
/*************************Functions definitions**************************/
/*
 * Description : Function to initialize pins direction and value of the DC-Motor
 */
void DcMotor_init (void)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
	/*make PB1,PB2 output pins to determine the state of the motor*/
	GPIO_setupPinDirection(DC_MOTOR_INPUT1_PORT_ID, DC_MOTOR_INPUT1_PIN_ID,
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	64 e0       	ldi	r22, 0x04	; 4
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	0e 94 48 0b 	call	0x1690	; 0x1690 <GPIO_setupPinDirection>
			PIN_OUTPUT);
	GPIO_setupPinDirection(DC_MOTOR_INPUT2_PORT_ID, DC_MOTOR_INPUT2_PIN_ID,
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	65 e0       	ldi	r22, 0x05	; 5
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	0e 94 48 0b 	call	0x1690	; 0x1690 <GPIO_setupPinDirection>
			PIN_OUTPUT);
	/*********************************************************************/

	/*make the motor stops at the start*/
	GPIO_writePin(DC_MOTOR_INPUT1_PORT_ID, DC_MOTOR_INPUT1_PIN_ID, LOGIC_LOW);
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	64 e0       	ldi	r22, 0x04	; 4
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_INPUT2_PORT_ID, DC_MOTOR_INPUT2_PIN_ID, LOGIC_LOW);
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	65 e0       	ldi	r22, 0x05	; 5
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>
	/*********************************/
}
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <DcMotor_Rotate>:

/*
 * Description : Function to set the motor rotation state and the to set the speed of the motor
 */
void DcMotor_Rotate (DcMotor_state state , uint8 speed)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DcMotor_Rotate+0x6>
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	6a 83       	std	Y+2, r22	; 0x02

	/***********************to set the rotation state of the motor*********************************/
	if (state == DC_MOTOR_STOP)
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	88 23       	and	r24, r24
    14cc:	79 f4       	brne	.+30     	; 0x14ec <DcMotor_Rotate+0x32>
	{
		DC_MOTOR_INPUT1_PORT = (DC_MOTOR_INPUT1_PORT
    14ce:	a8 e3       	ldi	r26, 0x38	; 56
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e8 e3       	ldi	r30, 0x38	; 56
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8f 7e       	andi	r24, 0xEF	; 239
    14da:	8c 93       	st	X, r24
				& ~ (1 << DC_MOTOR_INPUT1_PIN_ID));/*set input1 = 0*/
		DC_MOTOR_INPUT2_PORT = (DC_MOTOR_INPUT2_PORT
    14dc:	a8 e3       	ldi	r26, 0x38	; 56
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e8 e3       	ldi	r30, 0x38	; 56
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 7d       	andi	r24, 0xDF	; 223
    14e8:	8c 93       	st	X, r24
    14ea:	20 c0       	rjmp	.+64     	; 0x152c <DcMotor_Rotate+0x72>
				& ~ (1 << DC_MOTOR_INPUT2_PIN_ID));/*set input2 = 0*/
	}
	else if (state == DC_MOTOR_CLOCKWISE)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	79 f4       	brne	.+30     	; 0x1510 <DcMotor_Rotate+0x56>
	{
		DC_MOTOR_INPUT1_PORT = (DC_MOTOR_INPUT1_PORT
    14f2:	a8 e3       	ldi	r26, 0x38	; 56
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e8 e3       	ldi	r30, 0x38	; 56
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8f 7e       	andi	r24, 0xEF	; 239
    14fe:	8c 93       	st	X, r24
				& ~ (1 << DC_MOTOR_INPUT1_PIN_ID));/*set input1 = 0 */
		DC_MOTOR_INPUT2_PORT = (DC_MOTOR_INPUT2_PORT
    1500:	a8 e3       	ldi	r26, 0x38	; 56
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e8 e3       	ldi	r30, 0x38	; 56
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	80 62       	ori	r24, 0x20	; 32
    150c:	8c 93       	st	X, r24
    150e:	0e c0       	rjmp	.+28     	; 0x152c <DcMotor_Rotate+0x72>
				& ~ (1 << DC_MOTOR_INPUT2_PIN_ID))
				| ( LOGIC_HIGH << DC_MOTOR_INPUT2_PIN_ID);/*set input2 = 1 */
	}
	else
	{
		DC_MOTOR_INPUT1_PORT = (DC_MOTOR_INPUT1_PORT
    1510:	a8 e3       	ldi	r26, 0x38	; 56
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e8 e3       	ldi	r30, 0x38	; 56
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	80 61       	ori	r24, 0x10	; 16
    151c:	8c 93       	st	X, r24
				& ~ (1 << DC_MOTOR_INPUT1_PIN_ID))
				| ( LOGIC_HIGH << DC_MOTOR_INPUT1_PIN_ID);/*set input1 = 1 */
		DC_MOTOR_INPUT2_PORT = (DC_MOTOR_INPUT2_PORT
    151e:	a8 e3       	ldi	r26, 0x38	; 56
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e8 e3       	ldi	r30, 0x38	; 56
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8f 7d       	andi	r24, 0xDF	; 223
    152a:	8c 93       	st	X, r24
				& ~ (1 << DC_MOTOR_INPUT2_PIN_ID));/*set input2 = 0 */
	}
	/****************************************************************************************************/
	PWM_Timer0_Start(speed);/*to set the speed of the motor*/
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	0e 94 bb 13 	call	0x2776	; 0x2776 <PWM_Timer0_Start>
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <EEPROM_writeByte>:
 * Description : Function to write a byte in specific location in the external EEPROM
 * it takes a byte(the required data to be written in EEPROM) and the byte location(11-bits) in the EEPROM
 * it return the state of operation whether it is succeeded or failed
 */
uint8 EEPROM_writeByte (uint8 data , uint16 address)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <EEPROM_writeByte+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <EEPROM_writeByte+0x8>
    1544:	0f 92       	push	r0
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	8a 83       	std	Y+2, r24	; 0x02
    154c:	7c 83       	std	Y+4, r23	; 0x04
    154e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 eepromDeviceAddress;

	/*****************************************************************************************************/
	TWI_start();/*send the start bit on TWI bus*/
    1550:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <TWI_start>
	if (TWI_getStatus() != TWI_START)/*In case the start bit is not sent we return an error*/
    1554:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <TWI_getStatus>
    1558:	88 30       	cpi	r24, 0x08	; 8
    155a:	11 f0       	breq	.+4      	; 0x1560 <EEPROM_writeByte+0x24>
		return ERROR;
    155c:	1d 82       	std	Y+5, r1	; 0x05
    155e:	2a c0       	rjmp	.+84     	; 0x15b4 <EEPROM_writeByte+0x78>
	/*****************************************************************************************************/
	/* Set the EEPROM device address fixed ID 0b1010
	 * Insert the highest 3 bits of EEPROM byte address in EEPROM device address
	 * Set the lowest bit = 0 in EEPROM device address to make the TWI activates write operation
	 * */
	eepromDeviceAddress = EEPROM_FIXED_HIGH_BITS_ID
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	9c 81       	ldd	r25, Y+4	; 0x04
    1564:	80 70       	andi	r24, 0x00	; 0
    1566:	97 70       	andi	r25, 0x07	; 7
    1568:	88 0f       	add	r24, r24
    156a:	89 2f       	mov	r24, r25
    156c:	88 1f       	adc	r24, r24
    156e:	99 0b       	sbc	r25, r25
    1570:	91 95       	neg	r25
    1572:	80 6a       	ori	r24, 0xA0	; 160
    1574:	89 83       	std	Y+1, r24	; 0x01
			| (uint8) ( (address & 0x0700) >> 7);
	TWI_writeByte(eepromDeviceAddress);/*Send EEPROM device address on TWI bus*/
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <TWI_writeByte>

	/*in case master did not send the slave address or write bit or did not receive the ACK from the slave we return an error  */
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    157c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <TWI_getStatus>
    1580:	88 31       	cpi	r24, 0x18	; 24
    1582:	11 f0       	breq	.+4      	; 0x1588 <EEPROM_writeByte+0x4c>
		return ERROR;
    1584:	1d 82       	std	Y+5, r1	; 0x05
    1586:	16 c0       	rjmp	.+44     	; 0x15b4 <EEPROM_writeByte+0x78>
	/*****************************************************************************************************/

	/*****************************************************************************************************/
	TWI_writeByte((uint8) address);/*send the lowest 8-bits of EEPROM byte address*/
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)/*In case master did not send the byte or receive the ACK we return an error*/
    158e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <TWI_getStatus>
    1592:	88 32       	cpi	r24, 0x28	; 40
    1594:	11 f0       	breq	.+4      	; 0x159a <EEPROM_writeByte+0x5e>
		return ERROR;
    1596:	1d 82       	std	Y+5, r1	; 0x05
    1598:	0d c0       	rjmp	.+26     	; 0x15b4 <EEPROM_writeByte+0x78>
	/*****************************************************************************************************/

	/*****************************************************************************************************/
	TWI_writeByte(data);/*sends the required byte (to be written in EEPROM) on TWI bus */
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)/*In case master did not send the byte or receive the ACK we return an error*/
    15a0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <TWI_getStatus>
    15a4:	88 32       	cpi	r24, 0x28	; 40
    15a6:	11 f0       	breq	.+4      	; 0x15ac <EEPROM_writeByte+0x70>
		return ERROR;
    15a8:	1d 82       	std	Y+5, r1	; 0x05
    15aa:	04 c0       	rjmp	.+8      	; 0x15b4 <EEPROM_writeByte+0x78>
	/*****************************************************************************************************/

	/*****************************************************************************************************/
	TWI_stop();/*send the stop bit on TWI bus*/
    15ac:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <TWI_stop>
	/*****************************************************************************************************/

	return SUCCESS;/*Return SUCCESS in case every bit is sent correctly*/
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	8d 83       	std	Y+5, r24	; 0x05
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <EEPROM_readByte>:
 * Description : Function to read a byte from specific location in the external EEPROM
 * it takes a variable address where the received data will be stored and the byte location(11-bits) in the EEPROM
 * it return the state of operation whether it is succeeded or failed
 */
uint8 EEPROM_readByte (uint8 *data , uint16 address)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <EEPROM_readByte+0x6>
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <EEPROM_readByte+0x8>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <EEPROM_readByte+0xa>
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	9b 83       	std	Y+3, r25	; 0x03
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	7d 83       	std	Y+5, r23	; 0x05
    15da:	6c 83       	std	Y+4, r22	; 0x04
	uint8 eepromDeviceAddress;

	/*****************************************************************************************************/
	TWI_start();/*send the start bit on TWI bus*/
    15dc:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <TWI_start>
	if (TWI_getStatus() != TWI_START)/*In case the start bit is not sent we return an error*/
    15e0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <TWI_getStatus>
    15e4:	88 30       	cpi	r24, 0x08	; 8
    15e6:	11 f0       	breq	.+4      	; 0x15ec <EEPROM_readByte+0x26>
		return ERROR;
    15e8:	1e 82       	std	Y+6, r1	; 0x06
    15ea:	48 c0       	rjmp	.+144    	; 0x167c <EEPROM_readByte+0xb6>
	/*****************************************************************************************************/
	/* Set the EEPROM device address fixed ID 0b1010
	 * Insert the highest 3 bits of EEPROM byte address in EEPROM device address
	 * Set the lowest bit = 0 in EEPROM device address to make the TWI activates write operation
	 * */
	eepromDeviceAddress = EEPROM_FIXED_HIGH_BITS_ID
    15ec:	8c 81       	ldd	r24, Y+4	; 0x04
    15ee:	9d 81       	ldd	r25, Y+5	; 0x05
    15f0:	80 70       	andi	r24, 0x00	; 0
    15f2:	97 70       	andi	r25, 0x07	; 7
    15f4:	88 0f       	add	r24, r24
    15f6:	89 2f       	mov	r24, r25
    15f8:	88 1f       	adc	r24, r24
    15fa:	99 0b       	sbc	r25, r25
    15fc:	91 95       	neg	r25
    15fe:	80 6a       	ori	r24, 0xA0	; 160
    1600:	89 83       	std	Y+1, r24	; 0x01
			| (uint8) ( (address & 0x0700) >> 7);
	TWI_writeByte(eepromDeviceAddress);/*Send EEPROM device address on TWI bus*/
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <TWI_writeByte>

	/*in case master did not send the slave address or write bit or did not receive the ACK from the slave we return an error  */
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1608:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <TWI_getStatus>
    160c:	88 31       	cpi	r24, 0x18	; 24
    160e:	11 f0       	breq	.+4      	; 0x1614 <EEPROM_readByte+0x4e>
		return ERROR;
    1610:	1e 82       	std	Y+6, r1	; 0x06
    1612:	34 c0       	rjmp	.+104    	; 0x167c <EEPROM_readByte+0xb6>
	/*****************************************************************************************************/

	/*****************************************************************************************************/
	TWI_writeByte((uint8) address);/*send the lowest 8-bits of EEPROM byte address*/
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)/*In case master did not send the byte or receive the ACK we return an error*/
    161a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <TWI_getStatus>
    161e:	88 32       	cpi	r24, 0x28	; 40
    1620:	11 f0       	breq	.+4      	; 0x1626 <EEPROM_readByte+0x60>
		return ERROR;
    1622:	1e 82       	std	Y+6, r1	; 0x06
    1624:	2b c0       	rjmp	.+86     	; 0x167c <EEPROM_readByte+0xb6>
	/*****************************************************************************************************/

	/*****************************************************************************************************/
	TWI_start();/*send a repeated start bit on TWI bus*/
    1626:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)/*In case the repeated start bit is not sent we return an error*/
    162a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <TWI_getStatus>
    162e:	80 31       	cpi	r24, 0x10	; 16
    1630:	11 f0       	breq	.+4      	; 0x1636 <EEPROM_readByte+0x70>
		return ERROR;
    1632:	1e 82       	std	Y+6, r1	; 0x06
    1634:	23 c0       	rjmp	.+70     	; 0x167c <EEPROM_readByte+0xb6>
	/*****************************************************************************************************/
	/* Set the EEPROM device address fixed ID 0b1010
	 * Insert the highest 3 bits of EEPROM byte address in EEPROM device address
	 * Set the lowest bit = 1 in EEPROM device address to make the TWI activates read operation
	 * */
	eepromDeviceAddress = EEPROM_FIXED_HIGH_BITS_ID
    1636:	8c 81       	ldd	r24, Y+4	; 0x04
    1638:	9d 81       	ldd	r25, Y+5	; 0x05
    163a:	80 70       	andi	r24, 0x00	; 0
    163c:	97 70       	andi	r25, 0x07	; 7
    163e:	88 0f       	add	r24, r24
    1640:	89 2f       	mov	r24, r25
    1642:	88 1f       	adc	r24, r24
    1644:	99 0b       	sbc	r25, r25
    1646:	91 95       	neg	r25
    1648:	81 6a       	ori	r24, 0xA1	; 161
    164a:	89 83       	std	Y+1, r24	; 0x01
			| (uint8) ( (address & 0x0700) >> 7) | EEPROM_READ_BIT;
	TWI_writeByte(eepromDeviceAddress);/*Send EEPROM device address on TWI bus*/
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <TWI_writeByte>

	/*in case master did not send the slave address or read bit or did not receive the ACK from the slave we return an error  */
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1652:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <TWI_getStatus>
    1656:	80 34       	cpi	r24, 0x40	; 64
    1658:	11 f0       	breq	.+4      	; 0x165e <EEPROM_readByte+0x98>
		return ERROR;
    165a:	1e 82       	std	Y+6, r1	; 0x06
    165c:	0f c0       	rjmp	.+30     	; 0x167c <EEPROM_readByte+0xb6>
	/*****************************************************************************************************/

	/*****************************************************************************************************/
	/* to receive only one byte from EEPROM
	 * we used NACK to prevent EEPROM(slave) from sending any more bytes */
	*data = TWI_readByteWithNACK();
    165e:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <TWI_readByteWithNACK>
    1662:	ea 81       	ldd	r30, Y+2	; 0x02
    1664:	fb 81       	ldd	r31, Y+3	; 0x03
    1666:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)/*In case master did not receive the byte or send the NACK to the slave we return an error*/
    1668:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <TWI_getStatus>
    166c:	88 35       	cpi	r24, 0x58	; 88
    166e:	11 f0       	breq	.+4      	; 0x1674 <EEPROM_readByte+0xae>
		return ERROR;
    1670:	1e 82       	std	Y+6, r1	; 0x06
    1672:	04 c0       	rjmp	.+8      	; 0x167c <EEPROM_readByte+0xb6>
	/*****************************************************************************************************/

	/*****************************************************************************************************/
	TWI_stop();/*send the stop bit on TWI bus*/
    1674:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <TWI_stop>
	/*****************************************************************************************************/

	return SUCCESS;
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	8e 83       	std	Y+6, r24	; 0x06
    167c:	8e 81       	ldd	r24, Y+6	; 0x06

}
    167e:	26 96       	adiw	r28, 0x06	; 6
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	00 d0       	rcall	.+0      	; 0x1696 <GPIO_setupPinDirection+0x6>
    1696:	00 d0       	rcall	.+0      	; 0x1698 <GPIO_setupPinDirection+0x8>
    1698:	0f 92       	push	r0
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	6a 83       	std	Y+2, r22	; 0x02
    16a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	88 30       	cpi	r24, 0x08	; 8
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <GPIO_setupPinDirection+0x1c>
    16aa:	d5 c0       	rjmp	.+426    	; 0x1856 <GPIO_setupPinDirection+0x1c6>
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	84 30       	cpi	r24, 0x04	; 4
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <GPIO_setupPinDirection+0x24>
    16b2:	d1 c0       	rjmp	.+418    	; 0x1856 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	3d 83       	std	Y+5, r19	; 0x05
    16bc:	2c 83       	std	Y+4, r18	; 0x04
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	9d 81       	ldd	r25, Y+5	; 0x05
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	91 05       	cpc	r25, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <GPIO_setupPinDirection+0x3a>
    16c8:	43 c0       	rjmp	.+134    	; 0x1750 <GPIO_setupPinDirection+0xc0>
    16ca:	2c 81       	ldd	r18, Y+4	; 0x04
    16cc:	3d 81       	ldd	r19, Y+5	; 0x05
    16ce:	22 30       	cpi	r18, 0x02	; 2
    16d0:	31 05       	cpc	r19, r1
    16d2:	2c f4       	brge	.+10     	; 0x16de <GPIO_setupPinDirection+0x4e>
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	9d 81       	ldd	r25, Y+5	; 0x05
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	71 f0       	breq	.+28     	; 0x16f8 <GPIO_setupPinDirection+0x68>
    16dc:	bc c0       	rjmp	.+376    	; 0x1856 <GPIO_setupPinDirection+0x1c6>
    16de:	2c 81       	ldd	r18, Y+4	; 0x04
    16e0:	3d 81       	ldd	r19, Y+5	; 0x05
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <GPIO_setupPinDirection+0x5a>
    16e8:	5f c0       	rjmp	.+190    	; 0x17a8 <GPIO_setupPinDirection+0x118>
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	9d 81       	ldd	r25, Y+5	; 0x05
    16ee:	83 30       	cpi	r24, 0x03	; 3
    16f0:	91 05       	cpc	r25, r1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <GPIO_setupPinDirection+0x66>
    16f4:	85 c0       	rjmp	.+266    	; 0x1800 <GPIO_setupPinDirection+0x170>
    16f6:	af c0       	rjmp	.+350    	; 0x1856 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	a1 f4       	brne	.+40     	; 0x1726 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16fe:	aa e3       	ldi	r26, 0x3A	; 58
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ea e3       	ldi	r30, 0x3A	; 58
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GPIO_setupPinDirection+0x8c>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <GPIO_setupPinDirection+0x88>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	98 c0       	rjmp	.+304    	; 0x1856 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1726:	aa e3       	ldi	r26, 0x3A	; 58
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ea e3       	ldi	r30, 0x3A	; 58
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_setupPinDirection+0xb4>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_setupPinDirection+0xb0>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	83 c0       	rjmp	.+262    	; 0x1856 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	a1 f4       	brne	.+40     	; 0x177e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1756:	a7 e3       	ldi	r26, 0x37	; 55
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e7 e3       	ldi	r30, 0x37	; 55
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <GPIO_setupPinDirection+0xe4>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <GPIO_setupPinDirection+0xe0>
    1778:	84 2b       	or	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	6c c0       	rjmp	.+216    	; 0x1856 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    177e:	a7 e3       	ldi	r26, 0x37	; 55
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e7 e3       	ldi	r30, 0x37	; 55
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <GPIO_setupPinDirection+0x10c>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <GPIO_setupPinDirection+0x108>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	57 c0       	rjmp	.+174    	; 0x1856 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	a1 f4       	brne	.+40     	; 0x17d6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    17ae:	a4 e3       	ldi	r26, 0x34	; 52
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e4 e3       	ldi	r30, 0x34	; 52
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_setupPinDirection+0x13c>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_setupPinDirection+0x138>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	40 c0       	rjmp	.+128    	; 0x1856 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17d6:	a4 e3       	ldi	r26, 0x34	; 52
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e4 e3       	ldi	r30, 0x34	; 52
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <GPIO_setupPinDirection+0x164>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <GPIO_setupPinDirection+0x160>
    17f8:	80 95       	com	r24
    17fa:	84 23       	and	r24, r20
    17fc:	8c 93       	st	X, r24
    17fe:	2b c0       	rjmp	.+86     	; 0x1856 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	a1 f4       	brne	.+40     	; 0x182e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1806:	a1 e3       	ldi	r26, 0x31	; 49
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e1 e3       	ldi	r30, 0x31	; 49
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <GPIO_setupPinDirection+0x194>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <GPIO_setupPinDirection+0x190>
    1828:	84 2b       	or	r24, r20
    182a:	8c 93       	st	X, r24
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    182e:	a1 e3       	ldi	r26, 0x31	; 49
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e1 e3       	ldi	r30, 0x31	; 49
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <GPIO_setupPinDirection+0x1bc>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <GPIO_setupPinDirection+0x1b8>
    1850:	80 95       	com	r24
    1852:	84 23       	and	r24, r20
    1854:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	00 d0       	rcall	.+0      	; 0x186c <GPIO_writePin+0x6>
    186c:	00 d0       	rcall	.+0      	; 0x186e <GPIO_writePin+0x8>
    186e:	0f 92       	push	r0
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	6a 83       	std	Y+2, r22	; 0x02
    1878:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	88 30       	cpi	r24, 0x08	; 8
    187e:	08 f0       	brcs	.+2      	; 0x1882 <GPIO_writePin+0x1c>
    1880:	d5 c0       	rjmp	.+426    	; 0x1a2c <GPIO_writePin+0x1c6>
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	84 30       	cpi	r24, 0x04	; 4
    1886:	08 f0       	brcs	.+2      	; 0x188a <GPIO_writePin+0x24>
    1888:	d1 c0       	rjmp	.+418    	; 0x1a2c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3d 83       	std	Y+5, r19	; 0x05
    1892:	2c 83       	std	Y+4, r18	; 0x04
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <GPIO_writePin+0x3a>
    189e:	43 c0       	rjmp	.+134    	; 0x1926 <GPIO_writePin+0xc0>
    18a0:	2c 81       	ldd	r18, Y+4	; 0x04
    18a2:	3d 81       	ldd	r19, Y+5	; 0x05
    18a4:	22 30       	cpi	r18, 0x02	; 2
    18a6:	31 05       	cpc	r19, r1
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <GPIO_writePin+0x4e>
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	9d 81       	ldd	r25, Y+5	; 0x05
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	71 f0       	breq	.+28     	; 0x18ce <GPIO_writePin+0x68>
    18b2:	bc c0       	rjmp	.+376    	; 0x1a2c <GPIO_writePin+0x1c6>
    18b4:	2c 81       	ldd	r18, Y+4	; 0x04
    18b6:	3d 81       	ldd	r19, Y+5	; 0x05
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <GPIO_writePin+0x5a>
    18be:	5f c0       	rjmp	.+190    	; 0x197e <GPIO_writePin+0x118>
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	9d 81       	ldd	r25, Y+5	; 0x05
    18c4:	83 30       	cpi	r24, 0x03	; 3
    18c6:	91 05       	cpc	r25, r1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <GPIO_writePin+0x66>
    18ca:	85 c0       	rjmp	.+266    	; 0x19d6 <GPIO_writePin+0x170>
    18cc:	af c0       	rjmp	.+350    	; 0x1a2c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	a1 f4       	brne	.+40     	; 0x18fc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18d4:	ab e3       	ldi	r26, 0x3B	; 59
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	eb e3       	ldi	r30, 0x3B	; 59
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	48 2f       	mov	r20, r24
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 2e       	mov	r0, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <GPIO_writePin+0x8c>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <GPIO_writePin+0x88>
    18f6:	84 2b       	or	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	98 c0       	rjmp	.+304    	; 0x1a2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18fc:	ab e3       	ldi	r26, 0x3B	; 59
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	eb e3       	ldi	r30, 0x3B	; 59
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 2e       	mov	r0, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <GPIO_writePin+0xb4>
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <GPIO_writePin+0xb0>
    191e:	80 95       	com	r24
    1920:	84 23       	and	r24, r20
    1922:	8c 93       	st	X, r24
    1924:	83 c0       	rjmp	.+262    	; 0x1a2c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	a1 f4       	brne	.+40     	; 0x1954 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    192c:	a8 e3       	ldi	r26, 0x38	; 56
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e8 e3       	ldi	r30, 0x38	; 56
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <GPIO_writePin+0xe4>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <GPIO_writePin+0xe0>
    194e:	84 2b       	or	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	6c c0       	rjmp	.+216    	; 0x1a2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1954:	a8 e3       	ldi	r26, 0x38	; 56
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e8 e3       	ldi	r30, 0x38	; 56
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 2e       	mov	r0, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <GPIO_writePin+0x10c>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <GPIO_writePin+0x108>
    1976:	80 95       	com	r24
    1978:	84 23       	and	r24, r20
    197a:	8c 93       	st	X, r24
    197c:	57 c0       	rjmp	.+174    	; 0x1a2c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	a1 f4       	brne	.+40     	; 0x19ac <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1984:	a5 e3       	ldi	r26, 0x35	; 53
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e5 e3       	ldi	r30, 0x35	; 53
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	48 2f       	mov	r20, r24
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	02 2e       	mov	r0, r18
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <GPIO_writePin+0x13c>
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	0a 94       	dec	r0
    19a4:	e2 f7       	brpl	.-8      	; 0x199e <GPIO_writePin+0x138>
    19a6:	84 2b       	or	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	40 c0       	rjmp	.+128    	; 0x1a2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    19ac:	a5 e3       	ldi	r26, 0x35	; 53
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e5 e3       	ldi	r30, 0x35	; 53
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	48 2f       	mov	r20, r24
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	02 2e       	mov	r0, r18
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <GPIO_writePin+0x164>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	0a 94       	dec	r0
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <GPIO_writePin+0x160>
    19ce:	80 95       	com	r24
    19d0:	84 23       	and	r24, r20
    19d2:	8c 93       	st	X, r24
    19d4:	2b c0       	rjmp	.+86     	; 0x1a2c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	a1 f4       	brne	.+40     	; 0x1a04 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19dc:	a2 e3       	ldi	r26, 0x32	; 50
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e2 e3       	ldi	r30, 0x32	; 50
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	48 2f       	mov	r20, r24
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	02 2e       	mov	r0, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <GPIO_writePin+0x194>
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	0a 94       	dec	r0
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <GPIO_writePin+0x190>
    19fe:	84 2b       	or	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	14 c0       	rjmp	.+40     	; 0x1a2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1a04:	a2 e3       	ldi	r26, 0x32	; 50
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e2 e3       	ldi	r30, 0x32	; 50
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <GPIO_writePin+0x1bc>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <GPIO_writePin+0x1b8>
    1a26:	80 95       	com	r24
    1a28:	84 23       	and	r24, r20
    1a2a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <GPIO_readPin+0x6>
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <GPIO_readPin+0x8>
    1a44:	0f 92       	push	r0
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
    1a4c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a4e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	88 30       	cpi	r24, 0x08	; 8
    1a54:	08 f0       	brcs	.+2      	; 0x1a58 <GPIO_readPin+0x1c>
    1a56:	84 c0       	rjmp	.+264    	; 0x1b60 <GPIO_readPin+0x124>
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	84 30       	cpi	r24, 0x04	; 4
    1a5c:	08 f0       	brcs	.+2      	; 0x1a60 <GPIO_readPin+0x24>
    1a5e:	80 c0       	rjmp	.+256    	; 0x1b60 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	3d 83       	std	Y+5, r19	; 0x05
    1a68:	2c 83       	std	Y+4, r18	; 0x04
    1a6a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a6c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a6e:	41 30       	cpi	r20, 0x01	; 1
    1a70:	51 05       	cpc	r21, r1
    1a72:	79 f1       	breq	.+94     	; 0x1ad2 <GPIO_readPin+0x96>
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	9d 81       	ldd	r25, Y+5	; 0x05
    1a78:	82 30       	cpi	r24, 0x02	; 2
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	34 f4       	brge	.+12     	; 0x1a8a <GPIO_readPin+0x4e>
    1a7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a80:	3d 81       	ldd	r19, Y+5	; 0x05
    1a82:	21 15       	cp	r18, r1
    1a84:	31 05       	cpc	r19, r1
    1a86:	69 f0       	breq	.+26     	; 0x1aa2 <GPIO_readPin+0x66>
    1a88:	6b c0       	rjmp	.+214    	; 0x1b60 <GPIO_readPin+0x124>
    1a8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a8c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a8e:	42 30       	cpi	r20, 0x02	; 2
    1a90:	51 05       	cpc	r21, r1
    1a92:	b9 f1       	breq	.+110    	; 0x1b02 <GPIO_readPin+0xc6>
    1a94:	8c 81       	ldd	r24, Y+4	; 0x04
    1a96:	9d 81       	ldd	r25, Y+5	; 0x05
    1a98:	83 30       	cpi	r24, 0x03	; 3
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <GPIO_readPin+0x64>
    1a9e:	49 c0       	rjmp	.+146    	; 0x1b32 <GPIO_readPin+0xf6>
    1aa0:	5f c0       	rjmp	.+190    	; 0x1b60 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1aa2:	e9 e3       	ldi	r30, 0x39	; 57
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a9 01       	movw	r20, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <GPIO_readPin+0x7e>
    1ab6:	55 95       	asr	r21
    1ab8:	47 95       	ror	r20
    1aba:	8a 95       	dec	r24
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <GPIO_readPin+0x7a>
    1abe:	ca 01       	movw	r24, r20
    1ac0:	81 70       	andi	r24, 0x01	; 1
    1ac2:	90 70       	andi	r25, 0x00	; 0
    1ac4:	88 23       	and	r24, r24
    1ac6:	19 f0       	breq	.+6      	; 0x1ace <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	49 c0       	rjmp	.+146    	; 0x1b60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ace:	19 82       	std	Y+1, r1	; 0x01
    1ad0:	47 c0       	rjmp	.+142    	; 0x1b60 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ad2:	e6 e3       	ldi	r30, 0x36	; 54
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	88 2f       	mov	r24, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a9 01       	movw	r20, r18
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <GPIO_readPin+0xae>
    1ae6:	55 95       	asr	r21
    1ae8:	47 95       	ror	r20
    1aea:	8a 95       	dec	r24
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <GPIO_readPin+0xaa>
    1aee:	ca 01       	movw	r24, r20
    1af0:	81 70       	andi	r24, 0x01	; 1
    1af2:	90 70       	andi	r25, 0x00	; 0
    1af4:	88 23       	and	r24, r24
    1af6:	19 f0       	breq	.+6      	; 0x1afe <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	31 c0       	rjmp	.+98     	; 0x1b60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1afe:	19 82       	std	Y+1, r1	; 0x01
    1b00:	2f c0       	rjmp	.+94     	; 0x1b60 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b02:	e3 e3       	ldi	r30, 0x33	; 51
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a9 01       	movw	r20, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <GPIO_readPin+0xde>
    1b16:	55 95       	asr	r21
    1b18:	47 95       	ror	r20
    1b1a:	8a 95       	dec	r24
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <GPIO_readPin+0xda>
    1b1e:	ca 01       	movw	r24, r20
    1b20:	81 70       	andi	r24, 0x01	; 1
    1b22:	90 70       	andi	r25, 0x00	; 0
    1b24:	88 23       	and	r24, r24
    1b26:	19 f0       	breq	.+6      	; 0x1b2e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	19 c0       	rjmp	.+50     	; 0x1b60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b2e:	19 82       	std	Y+1, r1	; 0x01
    1b30:	17 c0       	rjmp	.+46     	; 0x1b60 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b32:	e0 e3       	ldi	r30, 0x30	; 48
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a9 01       	movw	r20, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <GPIO_readPin+0x10e>
    1b46:	55 95       	asr	r21
    1b48:	47 95       	ror	r20
    1b4a:	8a 95       	dec	r24
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <GPIO_readPin+0x10a>
    1b4e:	ca 01       	movw	r24, r20
    1b50:	81 70       	andi	r24, 0x01	; 1
    1b52:	90 70       	andi	r25, 0x00	; 0
    1b54:	88 23       	and	r24, r24
    1b56:	19 f0       	breq	.+6      	; 0x1b5e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b5e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <GPIO_setupPortDirection+0x6>
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <GPIO_setupPortDirection+0x8>
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	84 30       	cpi	r24, 0x04	; 4
    1b86:	90 f5       	brcc	.+100    	; 0x1bec <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	3c 83       	std	Y+4, r19	; 0x04
    1b90:	2b 83       	std	Y+3, r18	; 0x03
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	91 05       	cpc	r25, r1
    1b9a:	d1 f0       	breq	.+52     	; 0x1bd0 <GPIO_setupPortDirection+0x5e>
    1b9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <GPIO_setupPortDirection+0x3e>
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	61 f0       	breq	.+24     	; 0x1bc6 <GPIO_setupPortDirection+0x54>
    1bae:	1e c0       	rjmp	.+60     	; 0x1bec <GPIO_setupPortDirection+0x7a>
    1bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb4:	22 30       	cpi	r18, 0x02	; 2
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	81 f0       	breq	.+32     	; 0x1bda <GPIO_setupPortDirection+0x68>
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	83 30       	cpi	r24, 0x03	; 3
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	81 f0       	breq	.+32     	; 0x1be4 <GPIO_setupPortDirection+0x72>
    1bc4:	13 c0       	rjmp	.+38     	; 0x1bec <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1bc6:	ea e3       	ldi	r30, 0x3A	; 58
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	80 83       	st	Z, r24
    1bce:	0e c0       	rjmp	.+28     	; 0x1bec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1bd0:	e7 e3       	ldi	r30, 0x37	; 55
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	80 83       	st	Z, r24
    1bd8:	09 c0       	rjmp	.+18     	; 0x1bec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bda:	e4 e3       	ldi	r30, 0x34	; 52
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	80 83       	st	Z, r24
    1be2:	04 c0       	rjmp	.+8      	; 0x1bec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1be4:	e1 e3       	ldi	r30, 0x31	; 49
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <GPIO_writePort+0x6>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <GPIO_writePort+0x8>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	84 30       	cpi	r24, 0x04	; 4
    1c0e:	90 f5       	brcc	.+100    	; 0x1c74 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	3c 83       	std	Y+4, r19	; 0x04
    1c18:	2b 83       	std	Y+3, r18	; 0x03
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	91 05       	cpc	r25, r1
    1c22:	d1 f0       	breq	.+52     	; 0x1c58 <GPIO_writePort+0x5e>
    1c24:	2b 81       	ldd	r18, Y+3	; 0x03
    1c26:	3c 81       	ldd	r19, Y+4	; 0x04
    1c28:	22 30       	cpi	r18, 0x02	; 2
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	2c f4       	brge	.+10     	; 0x1c38 <GPIO_writePort+0x3e>
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	61 f0       	breq	.+24     	; 0x1c4e <GPIO_writePort+0x54>
    1c36:	1e c0       	rjmp	.+60     	; 0x1c74 <GPIO_writePort+0x7a>
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3c:	22 30       	cpi	r18, 0x02	; 2
    1c3e:	31 05       	cpc	r19, r1
    1c40:	81 f0       	breq	.+32     	; 0x1c62 <GPIO_writePort+0x68>
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	83 30       	cpi	r24, 0x03	; 3
    1c48:	91 05       	cpc	r25, r1
    1c4a:	81 f0       	breq	.+32     	; 0x1c6c <GPIO_writePort+0x72>
    1c4c:	13 c0       	rjmp	.+38     	; 0x1c74 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c4e:	eb e3       	ldi	r30, 0x3B	; 59
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	80 83       	st	Z, r24
    1c56:	0e c0       	rjmp	.+28     	; 0x1c74 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c58:	e8 e3       	ldi	r30, 0x38	; 56
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	80 83       	st	Z, r24
    1c60:	09 c0       	rjmp	.+18     	; 0x1c74 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c62:	e5 e3       	ldi	r30, 0x35	; 53
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	80 83       	st	Z, r24
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c6c:	e2 e3       	ldi	r30, 0x32	; 50
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <GPIO_readPort+0x6>
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <GPIO_readPort+0x8>
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c90:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	84 30       	cpi	r24, 0x04	; 4
    1c96:	90 f5       	brcc	.+100    	; 0x1cfc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	3c 83       	std	Y+4, r19	; 0x04
    1ca0:	2b 83       	std	Y+3, r18	; 0x03
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	91 05       	cpc	r25, r1
    1caa:	d1 f0       	breq	.+52     	; 0x1ce0 <GPIO_readPort+0x5e>
    1cac:	2b 81       	ldd	r18, Y+3	; 0x03
    1cae:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb0:	22 30       	cpi	r18, 0x02	; 2
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <GPIO_readPort+0x3e>
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	61 f0       	breq	.+24     	; 0x1cd6 <GPIO_readPort+0x54>
    1cbe:	1e c0       	rjmp	.+60     	; 0x1cfc <GPIO_readPort+0x7a>
    1cc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc4:	22 30       	cpi	r18, 0x02	; 2
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	81 f0       	breq	.+32     	; 0x1cea <GPIO_readPort+0x68>
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	83 30       	cpi	r24, 0x03	; 3
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	81 f0       	breq	.+32     	; 0x1cf4 <GPIO_readPort+0x72>
    1cd4:	13 c0       	rjmp	.+38     	; 0x1cfc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1cd6:	e9 e3       	ldi	r30, 0x39	; 57
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	0e c0       	rjmp	.+28     	; 0x1cfc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ce0:	e6 e3       	ldi	r30, 0x36	; 54
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	09 c0       	rjmp	.+18     	; 0x1cfc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cea:	e3 e3       	ldi	r30, 0x33	; 51
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	04 c0       	rjmp	.+8      	; 0x1cfc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1cf4:	e0 e3       	ldi	r30, 0x30	; 48
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <LCD_init>:
 * Description : Function to initialize the LCD
 * 1-set the pin direction connected to RS,E and Data pins
 * 2-set the LCD data mode 4bits or 8bits
 */
void LCD_init (void)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	2e 97       	sbiw	r28, 0x0e	; 14
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 48 0b 	call	0x1690	; 0x1690 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIIN_ID, PIN_OUTPUT); /* Enable LCD E=1 */
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	62 e0       	ldi	r22, 0x02	; 2
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 48 0b 	call	0x1690	; 0x1690 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 48 0b 	call	0x1690	; 0x1690 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);/*To make LCD operate in write mode*/
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	61 e0       	ldi	r22, 0x01	; 1
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>
#if LCD_DATA_BITS_MODE==8
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	6f ef       	ldi	r22, 0xFF	; 255
    1d4c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <GPIO_setupPortDirection>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a0 ea       	ldi	r26, 0xA0	; 160
    1d56:	b1 e4       	ldi	r27, 0x41	; 65
    1d58:	8b 87       	std	Y+11, r24	; 0x0b
    1d5a:	9c 87       	std	Y+12, r25	; 0x0c
    1d5c:	ad 87       	std	Y+13, r26	; 0x0d
    1d5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a ef       	ldi	r20, 0xFA	; 250
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8f 83       	std	Y+7, r24	; 0x07
    1d7a:	98 87       	std	Y+8, r25	; 0x08
    1d7c:	a9 87       	std	Y+9, r26	; 0x09
    1d7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d80:	6f 81       	ldd	r22, Y+7	; 0x07
    1d82:	78 85       	ldd	r23, Y+8	; 0x08
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e8       	ldi	r20, 0x80	; 128
    1d8e:	5f e3       	ldi	r21, 0x3F	; 63
    1d90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d94:	88 23       	and	r24, r24
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <LCD_init+0x96>
		__ticks = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	3f c0       	rjmp	.+126    	; 0x1e20 <LCD_init+0x114>
	else if (__tmp > 65535)
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	57 e4       	ldi	r21, 0x47	; 71
    1db2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	4c f5       	brge	.+82     	; 0x1e0c <LCD_init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e2       	ldi	r20, 0x20	; 32
    1dc8:	51 e4       	ldi	r21, 0x41	; 65
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	8d 83       	std	Y+5, r24	; 0x05
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <LCD_init+0xf6>
    1de4:	88 ec       	ldi	r24, 0xC8	; 200
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9c 83       	std	Y+4, r25	; 0x04
    1dea:	8b 83       	std	Y+3, r24	; 0x03
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <LCD_init+0xe4>
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	9e 81       	ldd	r25, Y+6	; 0x06
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	69 f7       	brne	.-38     	; 0x1de4 <LCD_init+0xd8>
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <LCD_init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0e:	78 85       	ldd	r23, Y+8	; 0x08
    1e10:	89 85       	ldd	r24, Y+9	; 0x09
    1e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	9e 81       	ldd	r25, Y+6	; 0x06
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_init+0x120>
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_sendCommand(LCD_2LINES_8_BITS_MODE); //to operate in 2 lines 8-bits mode
    1e34:	88 e3       	ldi	r24, 0x38	; 56
    1e36:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_sendCommand>
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT1);
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT2);
	/***********************************************/
	LCD_sendCommand(LCD_2LINES_4_BITS_MODE); //to operate in 2 lines 4-bits mode
#endif
	LCD_sendCommand(LCD_TURN_CURSOR_OFF); //to turn off the cursor
    1e3a:	8c e0       	ldi	r24, 0x0C	; 12
    1e3c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN); //to clear the screen
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_sendCommand>
}
    1e46:	2e 96       	adiw	r28, 0x0e	; 14
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <LCD_sendCommand>:

/*
 * Description : Function to send a command to the LCD
 */
void LCD_sendCommand (uint8 command)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	e9 97       	sbiw	r28, 0x39	; 57
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); //RS=0 to send command(ex:clear the screen,shift the screen)
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a0 e8       	ldi	r26, 0x80	; 128
    1e7e:	bf e3       	ldi	r27, 0x3F	; 63
    1e80:	8d ab       	std	Y+53, r24	; 0x35
    1e82:	9e ab       	std	Y+54, r25	; 0x36
    1e84:	af ab       	std	Y+55, r26	; 0x37
    1e86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e88:	6d a9       	ldd	r22, Y+53	; 0x35
    1e8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a ef       	ldi	r20, 0xFA	; 250
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	89 ab       	std	Y+49, r24	; 0x31
    1ea2:	9a ab       	std	Y+50, r25	; 0x32
    1ea4:	ab ab       	std	Y+51, r26	; 0x33
    1ea6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1eac:	8b a9       	ldd	r24, Y+51	; 0x33
    1eae:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <LCD_sendCommand+0x72>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	98 ab       	std	Y+48, r25	; 0x30
    1ec6:	8f a7       	std	Y+47, r24	; 0x2f
    1ec8:	3f c0       	rjmp	.+126    	; 0x1f48 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1eca:	69 a9       	ldd	r22, Y+49	; 0x31
    1ecc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ece:	8b a9       	ldd	r24, Y+51	; 0x33
    1ed0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	98 ab       	std	Y+48, r25	; 0x30
    1f08:	8f a7       	std	Y+47, r24	; 0x2f
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <LCD_sendCommand+0xd2>
    1f0c:	88 ec       	ldi	r24, 0xC8	; 200
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9e a7       	std	Y+46, r25	; 0x2e
    1f12:	8d a7       	std	Y+45, r24	; 0x2d
    1f14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_sendCommand+0xc0>
    1f1c:	9e a7       	std	Y+46, r25	; 0x2e
    1f1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f22:	98 a9       	ldd	r25, Y+48	; 0x30
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	98 ab       	std	Y+48, r25	; 0x30
    1f28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <LCD_sendCommand+0xb4>
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	69 a9       	ldd	r22, Y+49	; 0x31
    1f36:	7a a9       	ldd	r23, Y+50	; 0x32
    1f38:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	98 ab       	std	Y+48, r25	; 0x30
    1f46:	8f a7       	std	Y+47, r24	; 0x2f
    1f48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f4c:	9c a7       	std	Y+44, r25	; 0x2c
    1f4e:	8b a7       	std	Y+43, r24	; 0x2b
    1f50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <LCD_sendCommand+0xfc>
    1f58:	9c a7       	std	Y+44, r25	; 0x2c
    1f5a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	62 e0       	ldi	r22, 0x02	; 2
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a0 e8       	ldi	r26, 0x80	; 128
    1f6c:	bf e3       	ldi	r27, 0x3F	; 63
    1f6e:	8f a3       	std	Y+39, r24	; 0x27
    1f70:	98 a7       	std	Y+40, r25	; 0x28
    1f72:	a9 a7       	std	Y+41, r26	; 0x29
    1f74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f76:	6f a1       	ldd	r22, Y+39	; 0x27
    1f78:	78 a5       	ldd	r23, Y+40	; 0x28
    1f7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	4a ef       	ldi	r20, 0xFA	; 250
    1f84:	54 e4       	ldi	r21, 0x44	; 68
    1f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	8b a3       	std	Y+35, r24	; 0x23
    1f90:	9c a3       	std	Y+36, r25	; 0x24
    1f92:	ad a3       	std	Y+37, r26	; 0x25
    1f94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f96:	6b a1       	ldd	r22, Y+35	; 0x23
    1f98:	7c a1       	ldd	r23, Y+36	; 0x24
    1f9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	5f e3       	ldi	r21, 0x3F	; 63
    1fa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1faa:	88 23       	and	r24, r24
    1fac:	2c f4       	brge	.+10     	; 0x1fb8 <LCD_sendCommand+0x160>
		__ticks = 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9a a3       	std	Y+34, r25	; 0x22
    1fb4:	89 a3       	std	Y+33, r24	; 0x21
    1fb6:	3f c0       	rjmp	.+126    	; 0x2036 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1fb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fba:	7c a1       	ldd	r23, Y+36	; 0x24
    1fbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1fbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	57 e4       	ldi	r21, 0x47	; 71
    1fc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	4c f5       	brge	.+82     	; 0x2022 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e2       	ldi	r20, 0x20	; 32
    1fde:	51 e4       	ldi	r21, 0x41	; 65
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9a a3       	std	Y+34, r25	; 0x22
    1ff6:	89 a3       	std	Y+33, r24	; 0x21
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <LCD_sendCommand+0x1c0>
    1ffa:	88 ec       	ldi	r24, 0xC8	; 200
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	98 a3       	std	Y+32, r25	; 0x20
    2000:	8f 8f       	std	Y+31, r24	; 0x1f
    2002:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2004:	98 a1       	ldd	r25, Y+32	; 0x20
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <LCD_sendCommand+0x1ae>
    200a:	98 a3       	std	Y+32, r25	; 0x20
    200c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200e:	89 a1       	ldd	r24, Y+33	; 0x21
    2010:	9a a1       	ldd	r25, Y+34	; 0x22
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	9a a3       	std	Y+34, r25	; 0x22
    2016:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2018:	89 a1       	ldd	r24, Y+33	; 0x21
    201a:	9a a1       	ldd	r25, Y+34	; 0x22
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	69 f7       	brne	.-38     	; 0x1ffa <LCD_sendCommand+0x1a2>
    2020:	14 c0       	rjmp	.+40     	; 0x204a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2022:	6b a1       	ldd	r22, Y+35	; 0x23
    2024:	7c a1       	ldd	r23, Y+36	; 0x24
    2026:	8d a1       	ldd	r24, Y+37	; 0x25
    2028:	9e a1       	ldd	r25, Y+38	; 0x26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9a a3       	std	Y+34, r25	; 0x22
    2034:	89 a3       	std	Y+33, r24	; 0x21
    2036:	89 a1       	ldd	r24, Y+33	; 0x21
    2038:	9a a1       	ldd	r25, Y+34	; 0x22
    203a:	9e 8f       	std	Y+30, r25	; 0x1e
    203c:	8d 8f       	std	Y+29, r24	; 0x1d
    203e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2040:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_sendCommand+0x1ea>
    2046:	9e 8f       	std	Y+30, r25	; 0x1e
    2048:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/****************************write the command to the LCD****************************/
#if LCD_DATA_BITS_MODE==8
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	69 ad       	ldd	r22, Y+57	; 0x39
    204e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <GPIO_writePort>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e8       	ldi	r26, 0x80	; 128
    2058:	bf e3       	ldi	r27, 0x3F	; 63
    205a:	89 8f       	std	Y+25, r24	; 0x19
    205c:	9a 8f       	std	Y+26, r25	; 0x1a
    205e:	ab 8f       	std	Y+27, r26	; 0x1b
    2060:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	69 8d       	ldd	r22, Y+25	; 0x19
    2064:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2066:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2068:	9c 8d       	ldd	r25, Y+28	; 0x1c
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a ef       	ldi	r20, 0xFA	; 250
    2070:	54 e4       	ldi	r21, 0x44	; 68
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	8d 8b       	std	Y+21, r24	; 0x15
    207c:	9e 8b       	std	Y+22, r25	; 0x16
    207e:	af 8b       	std	Y+23, r26	; 0x17
    2080:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2082:	6d 89       	ldd	r22, Y+21	; 0x15
    2084:	7e 89       	ldd	r23, Y+22	; 0x16
    2086:	8f 89       	ldd	r24, Y+23	; 0x17
    2088:	98 8d       	ldd	r25, Y+24	; 0x18
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	2c f4       	brge	.+10     	; 0x20a4 <LCD_sendCommand+0x24c>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9c 8b       	std	Y+20, r25	; 0x14
    20a0:	8b 8b       	std	Y+19, r24	; 0x13
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    20a4:	6d 89       	ldd	r22, Y+21	; 0x15
    20a6:	7e 89       	ldd	r23, Y+22	; 0x16
    20a8:	8f 89       	ldd	r24, Y+23	; 0x17
    20aa:	98 8d       	ldd	r25, Y+24	; 0x18
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	4c f5       	brge	.+82     	; 0x210e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	69 8d       	ldd	r22, Y+25	; 0x19
    20be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	51 e4       	ldi	r21, 0x41	; 65
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9c 8b       	std	Y+20, r25	; 0x14
    20e2:	8b 8b       	std	Y+19, r24	; 0x13
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <LCD_sendCommand+0x2ac>
    20e6:	88 ec       	ldi	r24, 0xC8	; 200
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9a 8b       	std	Y+18, r25	; 0x12
    20ec:	89 8b       	std	Y+17, r24	; 0x11
    20ee:	89 89       	ldd	r24, Y+17	; 0x11
    20f0:	9a 89       	ldd	r25, Y+18	; 0x12
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <LCD_sendCommand+0x29a>
    20f6:	9a 8b       	std	Y+18, r25	; 0x12
    20f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	8b 89       	ldd	r24, Y+19	; 0x13
    20fc:	9c 89       	ldd	r25, Y+20	; 0x14
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9c 8b       	std	Y+20, r25	; 0x14
    2102:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	8b 89       	ldd	r24, Y+19	; 0x13
    2106:	9c 89       	ldd	r25, Y+20	; 0x14
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	69 f7       	brne	.-38     	; 0x20e6 <LCD_sendCommand+0x28e>
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	6d 89       	ldd	r22, Y+21	; 0x15
    2110:	7e 89       	ldd	r23, Y+22	; 0x16
    2112:	8f 89       	ldd	r24, Y+23	; 0x17
    2114:	98 8d       	ldd	r25, Y+24	; 0x18
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9c 8b       	std	Y+20, r25	; 0x14
    2120:	8b 8b       	std	Y+19, r24	; 0x13
    2122:	8b 89       	ldd	r24, Y+19	; 0x13
    2124:	9c 89       	ldd	r25, Y+20	; 0x14
    2126:	98 8b       	std	Y+16, r25	; 0x10
    2128:	8f 87       	std	Y+15, r24	; 0x0f
    212a:	8f 85       	ldd	r24, Y+15	; 0x0f
    212c:	98 89       	ldd	r25, Y+16	; 0x10
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_sendCommand+0x2d6>
    2132:	98 8b       	std	Y+16, r25	; 0x10
    2134:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_LOW);
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	62 e0       	ldi	r22, 0x02	; 2
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	a0 e8       	ldi	r26, 0x80	; 128
    2146:	bf e3       	ldi	r27, 0x3F	; 63
    2148:	8b 87       	std	Y+11, r24	; 0x0b
    214a:	9c 87       	std	Y+12, r25	; 0x0c
    214c:	ad 87       	std	Y+13, r26	; 0x0d
    214e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2150:	6b 85       	ldd	r22, Y+11	; 0x0b
    2152:	7c 85       	ldd	r23, Y+12	; 0x0c
    2154:	8d 85       	ldd	r24, Y+13	; 0x0d
    2156:	9e 85       	ldd	r25, Y+14	; 0x0e
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	4a ef       	ldi	r20, 0xFA	; 250
    215e:	54 e4       	ldi	r21, 0x44	; 68
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	8f 83       	std	Y+7, r24	; 0x07
    216a:	98 87       	std	Y+8, r25	; 0x08
    216c:	a9 87       	std	Y+9, r26	; 0x09
    216e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2170:	6f 81       	ldd	r22, Y+7	; 0x07
    2172:	78 85       	ldd	r23, Y+8	; 0x08
    2174:	89 85       	ldd	r24, Y+9	; 0x09
    2176:	9a 85       	ldd	r25, Y+10	; 0x0a
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e8       	ldi	r20, 0x80	; 128
    217e:	5f e3       	ldi	r21, 0x3F	; 63
    2180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2184:	88 23       	and	r24, r24
    2186:	2c f4       	brge	.+10     	; 0x2192 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	3f c0       	rjmp	.+126    	; 0x2210 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2192:	6f 81       	ldd	r22, Y+7	; 0x07
    2194:	78 85       	ldd	r23, Y+8	; 0x08
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	3f ef       	ldi	r19, 0xFF	; 255
    219e:	4f e7       	ldi	r20, 0x7F	; 127
    21a0:	57 e4       	ldi	r21, 0x47	; 71
    21a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a6:	18 16       	cp	r1, r24
    21a8:	4c f5       	brge	.+82     	; 0x21fc <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e2       	ldi	r20, 0x20	; 32
    21b8:	51 e4       	ldi	r21, 0x41	; 65
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	0f c0       	rjmp	.+30     	; 0x21f2 <LCD_sendCommand+0x39a>
    21d4:	88 ec       	ldi	r24, 0xC8	; 200
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	8b 83       	std	Y+3, r24	; 0x03
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <LCD_sendCommand+0x388>
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	69 f7       	brne	.-38     	; 0x21d4 <LCD_sendCommand+0x37c>
    21fa:	14 c0       	rjmp	.+40     	; 0x2224 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fc:	6f 81       	ldd	r22, Y+7	; 0x07
    21fe:	78 85       	ldd	r23, Y+8	; 0x08
    2200:	89 85       	ldd	r24, Y+9	; 0x09
    2202:	9a 85       	ldd	r25, Y+10	; 0x0a
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	9e 83       	std	Y+6, r25	; 0x06
    220e:	8d 83       	std	Y+5, r24	; 0x05
    2210:	8d 81       	ldd	r24, Y+5	; 0x05
    2212:	9e 81       	ldd	r25, Y+6	; 0x06
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <LCD_sendCommand+0x3c4>
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_LOW);
	_delay_ms(1);
#endif
	/************************************************************************/

}
    2224:	e9 96       	adiw	r28, 0x39	; 57
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <LCD_displayCharacter>:

/*
 * Description : Function to display a character on the LCD
 */
void LCD_displayCharacter (uint8 character)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	e9 97       	sbiw	r28, 0x39	; 57
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); //RS=1 to display a character
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 e8       	ldi	r26, 0x80	; 128
    225c:	bf e3       	ldi	r27, 0x3F	; 63
    225e:	8d ab       	std	Y+53, r24	; 0x35
    2260:	9e ab       	std	Y+54, r25	; 0x36
    2262:	af ab       	std	Y+55, r26	; 0x37
    2264:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2266:	6d a9       	ldd	r22, Y+53	; 0x35
    2268:	7e a9       	ldd	r23, Y+54	; 0x36
    226a:	8f a9       	ldd	r24, Y+55	; 0x37
    226c:	98 ad       	ldd	r25, Y+56	; 0x38
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a ef       	ldi	r20, 0xFA	; 250
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	89 ab       	std	Y+49, r24	; 0x31
    2280:	9a ab       	std	Y+50, r25	; 0x32
    2282:	ab ab       	std	Y+51, r26	; 0x33
    2284:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2286:	69 a9       	ldd	r22, Y+49	; 0x31
    2288:	7a a9       	ldd	r23, Y+50	; 0x32
    228a:	8b a9       	ldd	r24, Y+51	; 0x33
    228c:	9c a9       	ldd	r25, Y+52	; 0x34
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	2c f4       	brge	.+10     	; 0x22a8 <LCD_displayCharacter+0x72>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	98 ab       	std	Y+48, r25	; 0x30
    22a4:	8f a7       	std	Y+47, r24	; 0x2f
    22a6:	3f c0       	rjmp	.+126    	; 0x2326 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    22a8:	69 a9       	ldd	r22, Y+49	; 0x31
    22aa:	7a a9       	ldd	r23, Y+50	; 0x32
    22ac:	8b a9       	ldd	r24, Y+51	; 0x33
    22ae:	9c a9       	ldd	r25, Y+52	; 0x34
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	4c f5       	brge	.+82     	; 0x2312 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	6d a9       	ldd	r22, Y+53	; 0x35
    22c2:	7e a9       	ldd	r23, Y+54	; 0x36
    22c4:	8f a9       	ldd	r24, Y+55	; 0x37
    22c6:	98 ad       	ldd	r25, Y+56	; 0x38
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	51 e4       	ldi	r21, 0x41	; 65
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	98 ab       	std	Y+48, r25	; 0x30
    22e6:	8f a7       	std	Y+47, r24	; 0x2f
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <LCD_displayCharacter+0xd2>
    22ea:	88 ec       	ldi	r24, 0xC8	; 200
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9e a7       	std	Y+46, r25	; 0x2e
    22f0:	8d a7       	std	Y+45, r24	; 0x2d
    22f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_displayCharacter+0xc0>
    22fa:	9e a7       	std	Y+46, r25	; 0x2e
    22fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2300:	98 a9       	ldd	r25, Y+48	; 0x30
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	98 ab       	std	Y+48, r25	; 0x30
    2306:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	8f a5       	ldd	r24, Y+47	; 0x2f
    230a:	98 a9       	ldd	r25, Y+48	; 0x30
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	69 f7       	brne	.-38     	; 0x22ea <LCD_displayCharacter+0xb4>
    2310:	14 c0       	rjmp	.+40     	; 0x233a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	69 a9       	ldd	r22, Y+49	; 0x31
    2314:	7a a9       	ldd	r23, Y+50	; 0x32
    2316:	8b a9       	ldd	r24, Y+51	; 0x33
    2318:	9c a9       	ldd	r25, Y+52	; 0x34
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	98 ab       	std	Y+48, r25	; 0x30
    2324:	8f a7       	std	Y+47, r24	; 0x2f
    2326:	8f a5       	ldd	r24, Y+47	; 0x2f
    2328:	98 a9       	ldd	r25, Y+48	; 0x30
    232a:	9c a7       	std	Y+44, r25	; 0x2c
    232c:	8b a7       	std	Y+43, r24	; 0x2b
    232e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2330:	9c a5       	ldd	r25, Y+44	; 0x2c
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <LCD_displayCharacter+0xfc>
    2336:	9c a7       	std	Y+44, r25	; 0x2c
    2338:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_HIGH);
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	62 e0       	ldi	r22, 0x02	; 2
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e8       	ldi	r26, 0x80	; 128
    234a:	bf e3       	ldi	r27, 0x3F	; 63
    234c:	8f a3       	std	Y+39, r24	; 0x27
    234e:	98 a7       	std	Y+40, r25	; 0x28
    2350:	a9 a7       	std	Y+41, r26	; 0x29
    2352:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2354:	6f a1       	ldd	r22, Y+39	; 0x27
    2356:	78 a5       	ldd	r23, Y+40	; 0x28
    2358:	89 a5       	ldd	r24, Y+41	; 0x29
    235a:	9a a5       	ldd	r25, Y+42	; 0x2a
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	4a ef       	ldi	r20, 0xFA	; 250
    2362:	54 e4       	ldi	r21, 0x44	; 68
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	8b a3       	std	Y+35, r24	; 0x23
    236e:	9c a3       	std	Y+36, r25	; 0x24
    2370:	ad a3       	std	Y+37, r26	; 0x25
    2372:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2374:	6b a1       	ldd	r22, Y+35	; 0x23
    2376:	7c a1       	ldd	r23, Y+36	; 0x24
    2378:	8d a1       	ldd	r24, Y+37	; 0x25
    237a:	9e a1       	ldd	r25, Y+38	; 0x26
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e8       	ldi	r20, 0x80	; 128
    2382:	5f e3       	ldi	r21, 0x3F	; 63
    2384:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2388:	88 23       	and	r24, r24
    238a:	2c f4       	brge	.+10     	; 0x2396 <LCD_displayCharacter+0x160>
		__ticks = 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9a a3       	std	Y+34, r25	; 0x22
    2392:	89 a3       	std	Y+33, r24	; 0x21
    2394:	3f c0       	rjmp	.+126    	; 0x2414 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2396:	6b a1       	ldd	r22, Y+35	; 0x23
    2398:	7c a1       	ldd	r23, Y+36	; 0x24
    239a:	8d a1       	ldd	r24, Y+37	; 0x25
    239c:	9e a1       	ldd	r25, Y+38	; 0x26
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	3f ef       	ldi	r19, 0xFF	; 255
    23a2:	4f e7       	ldi	r20, 0x7F	; 127
    23a4:	57 e4       	ldi	r21, 0x47	; 71
    23a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23aa:	18 16       	cp	r1, r24
    23ac:	4c f5       	brge	.+82     	; 0x2400 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ae:	6f a1       	ldd	r22, Y+39	; 0x27
    23b0:	78 a5       	ldd	r23, Y+40	; 0x28
    23b2:	89 a5       	ldd	r24, Y+41	; 0x29
    23b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e2       	ldi	r20, 0x20	; 32
    23bc:	51 e4       	ldi	r21, 0x41	; 65
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9a a3       	std	Y+34, r25	; 0x22
    23d4:	89 a3       	std	Y+33, r24	; 0x21
    23d6:	0f c0       	rjmp	.+30     	; 0x23f6 <LCD_displayCharacter+0x1c0>
    23d8:	88 ec       	ldi	r24, 0xC8	; 200
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	98 a3       	std	Y+32, r25	; 0x20
    23de:	8f 8f       	std	Y+31, r24	; 0x1f
    23e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23e2:	98 a1       	ldd	r25, Y+32	; 0x20
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <LCD_displayCharacter+0x1ae>
    23e8:	98 a3       	std	Y+32, r25	; 0x20
    23ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ec:	89 a1       	ldd	r24, Y+33	; 0x21
    23ee:	9a a1       	ldd	r25, Y+34	; 0x22
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	9a a3       	std	Y+34, r25	; 0x22
    23f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f6:	89 a1       	ldd	r24, Y+33	; 0x21
    23f8:	9a a1       	ldd	r25, Y+34	; 0x22
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	69 f7       	brne	.-38     	; 0x23d8 <LCD_displayCharacter+0x1a2>
    23fe:	14 c0       	rjmp	.+40     	; 0x2428 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2400:	6b a1       	ldd	r22, Y+35	; 0x23
    2402:	7c a1       	ldd	r23, Y+36	; 0x24
    2404:	8d a1       	ldd	r24, Y+37	; 0x25
    2406:	9e a1       	ldd	r25, Y+38	; 0x26
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9a a3       	std	Y+34, r25	; 0x22
    2412:	89 a3       	std	Y+33, r24	; 0x21
    2414:	89 a1       	ldd	r24, Y+33	; 0x21
    2416:	9a a1       	ldd	r25, Y+34	; 0x22
    2418:	9e 8f       	std	Y+30, r25	; 0x1e
    241a:	8d 8f       	std	Y+29, r24	; 0x1d
    241c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    241e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <LCD_displayCharacter+0x1ea>
    2424:	9e 8f       	std	Y+30, r25	; 0x1e
    2426:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/****************************write a character to the LCD****************************/
#if LCD_DATA_BITS_MODE==8
	GPIO_writePort(LCD_DATA_PORT_ID, character);
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	69 ad       	ldd	r22, Y+57	; 0x39
    242c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <GPIO_writePort>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a0 e8       	ldi	r26, 0x80	; 128
    2436:	bf e3       	ldi	r27, 0x3F	; 63
    2438:	89 8f       	std	Y+25, r24	; 0x19
    243a:	9a 8f       	std	Y+26, r25	; 0x1a
    243c:	ab 8f       	std	Y+27, r26	; 0x1b
    243e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2440:	69 8d       	ldd	r22, Y+25	; 0x19
    2442:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a ef       	ldi	r20, 0xFA	; 250
    244e:	54 e4       	ldi	r21, 0x44	; 68
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	8d 8b       	std	Y+21, r24	; 0x15
    245a:	9e 8b       	std	Y+22, r25	; 0x16
    245c:	af 8b       	std	Y+23, r26	; 0x17
    245e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2460:	6d 89       	ldd	r22, Y+21	; 0x15
    2462:	7e 89       	ldd	r23, Y+22	; 0x16
    2464:	8f 89       	ldd	r24, Y+23	; 0x17
    2466:	98 8d       	ldd	r25, Y+24	; 0x18
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	2c f4       	brge	.+10     	; 0x2482 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9c 8b       	std	Y+20, r25	; 0x14
    247e:	8b 8b       	std	Y+19, r24	; 0x13
    2480:	3f c0       	rjmp	.+126    	; 0x2500 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2482:	6d 89       	ldd	r22, Y+21	; 0x15
    2484:	7e 89       	ldd	r23, Y+22	; 0x16
    2486:	8f 89       	ldd	r24, Y+23	; 0x17
    2488:	98 8d       	ldd	r25, Y+24	; 0x18
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	3f ef       	ldi	r19, 0xFF	; 255
    248e:	4f e7       	ldi	r20, 0x7F	; 127
    2490:	57 e4       	ldi	r21, 0x47	; 71
    2492:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2496:	18 16       	cp	r1, r24
    2498:	4c f5       	brge	.+82     	; 0x24ec <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249a:	69 8d       	ldd	r22, Y+25	; 0x19
    249c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9c 8b       	std	Y+20, r25	; 0x14
    24c0:	8b 8b       	std	Y+19, r24	; 0x13
    24c2:	0f c0       	rjmp	.+30     	; 0x24e2 <LCD_displayCharacter+0x2ac>
    24c4:	88 ec       	ldi	r24, 0xC8	; 200
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9a 8b       	std	Y+18, r25	; 0x12
    24ca:	89 8b       	std	Y+17, r24	; 0x11
    24cc:	89 89       	ldd	r24, Y+17	; 0x11
    24ce:	9a 89       	ldd	r25, Y+18	; 0x12
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_displayCharacter+0x29a>
    24d4:	9a 8b       	std	Y+18, r25	; 0x12
    24d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d8:	8b 89       	ldd	r24, Y+19	; 0x13
    24da:	9c 89       	ldd	r25, Y+20	; 0x14
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	9c 8b       	std	Y+20, r25	; 0x14
    24e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e2:	8b 89       	ldd	r24, Y+19	; 0x13
    24e4:	9c 89       	ldd	r25, Y+20	; 0x14
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	69 f7       	brne	.-38     	; 0x24c4 <LCD_displayCharacter+0x28e>
    24ea:	14 c0       	rjmp	.+40     	; 0x2514 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ec:	6d 89       	ldd	r22, Y+21	; 0x15
    24ee:	7e 89       	ldd	r23, Y+22	; 0x16
    24f0:	8f 89       	ldd	r24, Y+23	; 0x17
    24f2:	98 8d       	ldd	r25, Y+24	; 0x18
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9c 8b       	std	Y+20, r25	; 0x14
    24fe:	8b 8b       	std	Y+19, r24	; 0x13
    2500:	8b 89       	ldd	r24, Y+19	; 0x13
    2502:	9c 89       	ldd	r25, Y+20	; 0x14
    2504:	98 8b       	std	Y+16, r25	; 0x10
    2506:	8f 87       	std	Y+15, r24	; 0x0f
    2508:	8f 85       	ldd	r24, Y+15	; 0x0f
    250a:	98 89       	ldd	r25, Y+16	; 0x10
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_displayCharacter+0x2d6>
    2510:	98 8b       	std	Y+16, r25	; 0x10
    2512:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_LOW);
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	62 e0       	ldi	r22, 0x02	; 2
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	0e 94 33 0c 	call	0x1866	; 0x1866 <GPIO_writePin>
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	a0 e8       	ldi	r26, 0x80	; 128
    2524:	bf e3       	ldi	r27, 0x3F	; 63
    2526:	8b 87       	std	Y+11, r24	; 0x0b
    2528:	9c 87       	std	Y+12, r25	; 0x0c
    252a:	ad 87       	std	Y+13, r26	; 0x0d
    252c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	4a ef       	ldi	r20, 0xFA	; 250
    253c:	54 e4       	ldi	r21, 0x44	; 68
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8f 83       	std	Y+7, r24	; 0x07
    2548:	98 87       	std	Y+8, r25	; 0x08
    254a:	a9 87       	std	Y+9, r26	; 0x09
    254c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254e:	6f 81       	ldd	r22, Y+7	; 0x07
    2550:	78 85       	ldd	r23, Y+8	; 0x08
    2552:	89 85       	ldd	r24, Y+9	; 0x09
    2554:	9a 85       	ldd	r25, Y+10	; 0x0a
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e8       	ldi	r20, 0x80	; 128
    255c:	5f e3       	ldi	r21, 0x3F	; 63
    255e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2562:	88 23       	and	r24, r24
    2564:	2c f4       	brge	.+10     	; 0x2570 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	3f c0       	rjmp	.+126    	; 0x25ee <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2570:	6f 81       	ldd	r22, Y+7	; 0x07
    2572:	78 85       	ldd	r23, Y+8	; 0x08
    2574:	89 85       	ldd	r24, Y+9	; 0x09
    2576:	9a 85       	ldd	r25, Y+10	; 0x0a
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	3f ef       	ldi	r19, 0xFF	; 255
    257c:	4f e7       	ldi	r20, 0x7F	; 127
    257e:	57 e4       	ldi	r21, 0x47	; 71
    2580:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2584:	18 16       	cp	r1, r24
    2586:	4c f5       	brge	.+82     	; 0x25da <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2588:	6b 85       	ldd	r22, Y+11	; 0x0b
    258a:	7c 85       	ldd	r23, Y+12	; 0x0c
    258c:	8d 85       	ldd	r24, Y+13	; 0x0d
    258e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <LCD_displayCharacter+0x39a>
    25b2:	88 ec       	ldi	r24, 0xC8	; 200
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <LCD_displayCharacter+0x388>
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	69 f7       	brne	.-38     	; 0x25b2 <LCD_displayCharacter+0x37c>
    25d8:	14 c0       	rjmp	.+40     	; 0x2602 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <LCD_displayCharacter+0x3c4>
    25fe:	9a 83       	std	Y+2, r25	; 0x02
    2600:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_LOW);
		_delay_ms(1);
	#endif
	/************************************************************************/
}
    2602:	e9 96       	adiw	r28, 0x39	; 57
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <LCD_diplaystring>:

/*
 * Description : Function to display string on the LCD
 */
void LCD_diplaystring (const char *str)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	00 d0       	rcall	.+0      	; 0x261a <LCD_diplaystring+0x6>
    261a:	0f 92       	push	r0
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	9b 83       	std	Y+3, r25	; 0x03
    2622:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0 ; str[i] != '\0' ; i++)
    2624:	19 82       	std	Y+1, r1	; 0x01
    2626:	0e c0       	rjmp	.+28     	; 0x2644 <LCD_diplaystring+0x30>
	{
		LCD_displayCharacter(str[i]);
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	28 2f       	mov	r18, r24
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	9b 81       	ldd	r25, Y+3	; 0x03
    2632:	fc 01       	movw	r30, r24
    2634:	e2 0f       	add	r30, r18
    2636:	f3 1f       	adc	r31, r19
    2638:	80 81       	ld	r24, Z
    263a:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_displayCharacter>
 * Description : Function to display string on the LCD
 */
void LCD_diplaystring (const char *str)
{
	uint8 i;
	for (i = 0 ; str[i] != '\0' ; i++)
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	8f 5f       	subi	r24, 0xFF	; 255
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	9b 81       	ldd	r25, Y+3	; 0x03
    264e:	fc 01       	movw	r30, r24
    2650:	e2 0f       	add	r30, r18
    2652:	f3 1f       	adc	r31, r19
    2654:	80 81       	ld	r24, Z
    2656:	88 23       	and	r24, r24
    2658:	39 f7       	brne	.-50     	; 0x2628 <LCD_diplaystring+0x14>
	{
		LCD_displayCharacter(str[i]);
	}
}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <LCD_moveCursor>:

/*
 * Description : Function to move the cursor to the required position
 */
void LCD_moveCursor (uint8 row , uint8 column)
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	00 d0       	rcall	.+0      	; 0x266c <LCD_moveCursor+0x6>
    266c:	00 d0       	rcall	.+0      	; 0x266e <LCD_moveCursor+0x8>
    266e:	0f 92       	push	r0
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	8a 83       	std	Y+2, r24	; 0x02
    2676:	6b 83       	std	Y+3, r22	; 0x03

	uint8 LCD_cursorAddress;
	switch (row)
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	28 2f       	mov	r18, r24
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	3d 83       	std	Y+5, r19	; 0x05
    2680:	2c 83       	std	Y+4, r18	; 0x04
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	91 05       	cpc	r25, r1
    268a:	c1 f0       	breq	.+48     	; 0x26bc <LCD_moveCursor+0x56>
    268c:	2c 81       	ldd	r18, Y+4	; 0x04
    268e:	3d 81       	ldd	r19, Y+5	; 0x05
    2690:	22 30       	cpi	r18, 0x02	; 2
    2692:	31 05       	cpc	r19, r1
    2694:	2c f4       	brge	.+10     	; 0x26a0 <LCD_moveCursor+0x3a>
    2696:	8c 81       	ldd	r24, Y+4	; 0x04
    2698:	9d 81       	ldd	r25, Y+5	; 0x05
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	61 f0       	breq	.+24     	; 0x26b6 <LCD_moveCursor+0x50>
    269e:	19 c0       	rjmp	.+50     	; 0x26d2 <LCD_moveCursor+0x6c>
    26a0:	2c 81       	ldd	r18, Y+4	; 0x04
    26a2:	3d 81       	ldd	r19, Y+5	; 0x05
    26a4:	22 30       	cpi	r18, 0x02	; 2
    26a6:	31 05       	cpc	r19, r1
    26a8:	69 f0       	breq	.+26     	; 0x26c4 <LCD_moveCursor+0x5e>
    26aa:	8c 81       	ldd	r24, Y+4	; 0x04
    26ac:	9d 81       	ldd	r25, Y+5	; 0x05
    26ae:	83 30       	cpi	r24, 0x03	; 3
    26b0:	91 05       	cpc	r25, r1
    26b2:	61 f0       	breq	.+24     	; 0x26cc <LCD_moveCursor+0x66>
    26b4:	0e c0       	rjmp	.+28     	; 0x26d2 <LCD_moveCursor+0x6c>
	{
	case 0 :
		LCD_cursorAddress = column;/*move the cursor to position at row=0,column=0*/
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	0b c0       	rjmp	.+22     	; 0x26d2 <LCD_moveCursor+0x6c>
		break;
	case 1 :
		LCD_cursorAddress = column + LCD_ROW1_START_ADDRESS;/*move the cursor to position at row=1,column=0*/
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	80 5c       	subi	r24, 0xC0	; 192
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	07 c0       	rjmp	.+14     	; 0x26d2 <LCD_moveCursor+0x6c>
		break;
	case 2 :
		LCD_cursorAddress = column + LCD_ROW2_START_ADDRESS;/*move the cursor to position at row=2,column=0*/
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	80 5f       	subi	r24, 0xF0	; 240
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	03 c0       	rjmp	.+6      	; 0x26d2 <LCD_moveCursor+0x6c>
		break;
	case 3 :
		LCD_cursorAddress = column + LCD_ROW3_START_ADDRESS;/*move the cursor to position at row=3,column=0*/
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	80 5b       	subi	r24, 0xB0	; 176
    26d0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_cursorAddress | LCD_SET_CURSOR_LOCATION);
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	80 68       	ori	r24, 0x80	; 128
    26d6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_sendCommand>
}
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <LCD_displayStringRowColumn>:

/*
 * Description : Function to display a string on the required position
 */
void LCD_displayStringRowColumn (const char *str , uint8 row , uint8 column)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <LCD_displayStringRowColumn+0x6>
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <LCD_displayStringRowColumn+0x8>
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	9a 83       	std	Y+2, r25	; 0x02
    26f8:	89 83       	std	Y+1, r24	; 0x01
    26fa:	6b 83       	std	Y+3, r22	; 0x03
    26fc:	4c 83       	std	Y+4, r20	; 0x04
	LCD_moveCursor(row, column);
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	6c 81       	ldd	r22, Y+4	; 0x04
    2702:	0e 94 33 13 	call	0x2666	; 0x2666 <LCD_moveCursor>
	LCD_diplaystring(str);
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	0e 94 0a 13 	call	0x2614	; 0x2614 <LCD_diplaystring>
}
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <LCD_clearScreen>:

/*
 * Description : Function to clear the LCD
 */
void LCD_clearScreen (void)
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_sendCommand>
}
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <LCD_integerToString>:

/*
 * Description : Function to display an integer on the LCD
 */
void LCD_integerToString (int num)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	62 97       	sbiw	r28, 0x12	; 18
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	9a 8b       	std	Y+18, r25	; 0x12
    2746:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(num, buffer, 10);/*C function to convert integer to its corresponding ASCII value, 10 for decimal*/
    2748:	89 89       	ldd	r24, Y+17	; 0x11
    274a:	9a 89       	ldd	r25, Y+18	; 0x12
    274c:	9e 01       	movw	r18, r28
    274e:	2f 5f       	subi	r18, 0xFF	; 255
    2750:	3f 4f       	sbci	r19, 0xFF	; 255
    2752:	b9 01       	movw	r22, r18
    2754:	4a e0       	ldi	r20, 0x0A	; 10
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	0e 94 59 18 	call	0x30b2	; 0x30b2 <itoa>
	LCD_diplaystring(buffer);
    275c:	ce 01       	movw	r24, r28
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	0e 94 0a 13 	call	0x2614	; 0x2614 <LCD_diplaystring>
}
    2764:	62 96       	adiw	r28, 0x12	; 18
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <PWM_Timer0_Start>:
 * Ftimer0=Fcpu/256*N
 * N=64 ==> CS00=0,CS01=1,CS02=1
 */

void PWM_Timer0_Start (uint8 dutyCycle)
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	0f 92       	push	r0
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01);/* PWM/non-inverting mode */
    2782:	e3 e5       	ldi	r30, 0x53	; 83
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	88 e6       	ldi	r24, 0x68	; 104
    2788:	80 83       	st	Z, r24
	TCCR0 = (TCCR0 & 0xF8) | (TIMER0_CLOCK_PRESCALER);/*prescaler = 64*/
    278a:	a3 e5       	ldi	r26, 0x53	; 83
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e3 e5       	ldi	r30, 0x53	; 83
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	88 7f       	andi	r24, 0xF8	; 248
    2796:	83 60       	ori	r24, 0x03	; 3
    2798:	8c 93       	st	X, r24
	TCNT0 = 0; /*timer0 initial  value*/
    279a:	e2 e5       	ldi	r30, 0x52	; 82
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	10 82       	st	Z, r1
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);/*make PB3(OC0) output PIN */
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	63 e0       	ldi	r22, 0x03	; 3
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	0e 94 48 0b 	call	0x1690	; 0x1690 <GPIO_setupPinDirection>
	if (dutyCycle == 100)
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	84 36       	cpi	r24, 0x64	; 100
    27ae:	29 f4       	brne	.+10     	; 0x27ba <PWM_Timer0_Start+0x44>
	{
		OCR0 = 255;/*maximum generated voltage*/
    27b0:	ec e5       	ldi	r30, 0x5C	; 92
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	8f ef       	ldi	r24, 0xFF	; 255
    27b6:	80 83       	st	Z, r24
    27b8:	0e c0       	rjmp	.+28     	; 0x27d6 <PWM_Timer0_Start+0x60>
	}
	else
	{
		OCR0 = dutyCycle * 256 / 100;
    27ba:	ec e5       	ldi	r30, 0x5C	; 92
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	88 2f       	mov	r24, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	98 2f       	mov	r25, r24
    27c6:	88 27       	eor	r24, r24
    27c8:	24 e6       	ldi	r18, 0x64	; 100
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	b9 01       	movw	r22, r18
    27ce:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <__divmodhi4>
    27d2:	cb 01       	movw	r24, r22
    27d4:	80 83       	st	Z, r24
	}
}
    27d6:	0f 90       	pop	r0
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <__vector_9>:
static volatile void (*g_TIMER1_callBackFunctionPtr) (void) = NULL_PTR; /*global pointer to function*/
/***********************************/

/*********Interrupt Service Routine**********/
ISR(TIMER1_OVF_vect)
{
    27de:	1f 92       	push	r1
    27e0:	0f 92       	push	r0
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	0f 92       	push	r0
    27e6:	11 24       	eor	r1, r1
    27e8:	2f 93       	push	r18
    27ea:	3f 93       	push	r19
    27ec:	4f 93       	push	r20
    27ee:	5f 93       	push	r21
    27f0:	6f 93       	push	r22
    27f2:	7f 93       	push	r23
    27f4:	8f 93       	push	r24
    27f6:	9f 93       	push	r25
    27f8:	af 93       	push	r26
    27fa:	bf 93       	push	r27
    27fc:	ef 93       	push	r30
    27fe:	ff 93       	push	r31
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
	g_TIMER1_callBackFunctionPtr();/*Call the callback function at every interrupt(at every overflow)*/
    2808:	e0 91 76 01 	lds	r30, 0x0176
    280c:	f0 91 77 01 	lds	r31, 0x0177
    2810:	09 95       	icall
}
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	ff 91       	pop	r31
    2818:	ef 91       	pop	r30
    281a:	bf 91       	pop	r27
    281c:	af 91       	pop	r26
    281e:	9f 91       	pop	r25
    2820:	8f 91       	pop	r24
    2822:	7f 91       	pop	r23
    2824:	6f 91       	pop	r22
    2826:	5f 91       	pop	r21
    2828:	4f 91       	pop	r20
    282a:	3f 91       	pop	r19
    282c:	2f 91       	pop	r18
    282e:	0f 90       	pop	r0
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	0f 90       	pop	r0
    2834:	1f 90       	pop	r1
    2836:	18 95       	reti

00002838 <__vector_7>:

ISR(TIMER1_COMPA_vect)/*in case TCNT1 matches OCR1A*/
{
    2838:	1f 92       	push	r1
    283a:	0f 92       	push	r0
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	0f 92       	push	r0
    2840:	11 24       	eor	r1, r1
    2842:	2f 93       	push	r18
    2844:	3f 93       	push	r19
    2846:	4f 93       	push	r20
    2848:	5f 93       	push	r21
    284a:	6f 93       	push	r22
    284c:	7f 93       	push	r23
    284e:	8f 93       	push	r24
    2850:	9f 93       	push	r25
    2852:	af 93       	push	r26
    2854:	bf 93       	push	r27
    2856:	ef 93       	push	r30
    2858:	ff 93       	push	r31
    285a:	df 93       	push	r29
    285c:	cf 93       	push	r28
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
	g_TIMER1_callBackFunctionPtr();/*Call the callback function at every interrupt(at every Compare match between TCNT1 & OCR1A)*/
    2862:	e0 91 76 01 	lds	r30, 0x0176
    2866:	f0 91 77 01 	lds	r31, 0x0177
    286a:	09 95       	icall

}
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	ff 91       	pop	r31
    2872:	ef 91       	pop	r30
    2874:	bf 91       	pop	r27
    2876:	af 91       	pop	r26
    2878:	9f 91       	pop	r25
    287a:	8f 91       	pop	r24
    287c:	7f 91       	pop	r23
    287e:	6f 91       	pop	r22
    2880:	5f 91       	pop	r21
    2882:	4f 91       	pop	r20
    2884:	3f 91       	pop	r19
    2886:	2f 91       	pop	r18
    2888:	0f 90       	pop	r0
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	0f 90       	pop	r0
    288e:	1f 90       	pop	r1
    2890:	18 95       	reti

00002892 <TIMER1_init>:
 *	4)TIMER1 operating mode
 *	5)TIMER1 output pins number ( OC1B only or (OC1A & OC1B) ) //in case of compare mode
 *	6)TIMER1 output pins value (Toggle/clear/set on compare) //in case of compare mode
 */
void TIMER1_init (const TIMER1_ConfigType *Config_Ptr)
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <TIMER1_init+0x6>
    2898:	00 d0       	rcall	.+0      	; 0x289a <TIMER1_init+0x8>
    289a:	00 d0       	rcall	.+0      	; 0x289c <TIMER1_init+0xa>
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	9a 83       	std	Y+2, r25	; 0x02
    28a2:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->mode)
    28a4:	e9 81       	ldd	r30, Y+1	; 0x01
    28a6:	fa 81       	ldd	r31, Y+2	; 0x02
    28a8:	85 81       	ldd	r24, Z+5	; 0x05
    28aa:	28 2f       	mov	r18, r24
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	3e 83       	std	Y+6, r19	; 0x06
    28b0:	2d 83       	std	Y+5, r18	; 0x05
    28b2:	8d 81       	ldd	r24, Y+5	; 0x05
    28b4:	9e 81       	ldd	r25, Y+6	; 0x06
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	31 f0       	breq	.+12     	; 0x28c6 <TIMER1_init+0x34>
    28ba:	2d 81       	ldd	r18, Y+5	; 0x05
    28bc:	3e 81       	ldd	r19, Y+6	; 0x06
    28be:	24 30       	cpi	r18, 0x04	; 4
    28c0:	31 05       	cpc	r19, r1
    28c2:	c9 f0       	breq	.+50     	; 0x28f6 <TIMER1_init+0x64>
    28c4:	99 c0       	rjmp	.+306    	; 0x29f8 <TIMER1_init+0x166>
		 * CS12,CS11,CS10  ===> To set prescaler value according to dynamic configurations
		 * TCNT1 ===> has a value indicating when the timer will start its count(start value)
		 * TOIE1=1 ===> To enable TIMER1 overflow interrupt
		 *******************************************************************************************************/

		TCCR1A = (LOGIC_HIGH << FOC1A) | (LOGIC_HIGH << FOC1B);/*No PWM mode*//*Set WGM11=0 , WGM10=0 */
    28c6:	ef e4       	ldi	r30, 0x4F	; 79
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	8c e0       	ldi	r24, 0x0C	; 12
    28cc:	80 83       	st	Z, r24
		TCCR1B = Config_Ptr->prescaler; /*Set prescaler value*//*Set WGM13=0 , WGM12=0 */
    28ce:	ae e4       	ldi	r26, 0x4E	; 78
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e9 81       	ldd	r30, Y+1	; 0x01
    28d4:	fa 81       	ldd	r31, Y+2	; 0x02
    28d6:	84 81       	ldd	r24, Z+4	; 0x04
    28d8:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->initial_value; /*Start value*/
    28da:	ac e4       	ldi	r26, 0x4C	; 76
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e9 81       	ldd	r30, Y+1	; 0x01
    28e0:	fa 81       	ldd	r31, Y+2	; 0x02
    28e2:	80 81       	ld	r24, Z
    28e4:	91 81       	ldd	r25, Z+1	; 0x01
    28e6:	11 96       	adiw	r26, 0x01	; 1
    28e8:	9c 93       	st	X, r25
    28ea:	8e 93       	st	-X, r24
		TIMSK = (LOGIC_HIGH << TOIE1);/*To enable overflow interrupt*/
    28ec:	e9 e5       	ldi	r30, 0x59	; 89
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	84 e0       	ldi	r24, 0x04	; 4
    28f2:	80 83       	st	Z, r24
    28f4:	81 c0       	rjmp	.+258    	; 0x29f8 <TIMER1_init+0x166>
		 * CS12,CS11,CS10  ===> To set prescaler value according to dynamic configurations
		 * TCNT1 ===> has a value indicating when the timer will start its count(start value)
		 * OCR1A ===> has a value indicating when the timer will stop its count(compare(Top) value)
		 * OCIE1A=1 ===> To generate interrupt at every compare match with OCR1A
		 *******************************************************************************************************/
		TCCR1A = (LOGIC_HIGH << FOC1A) | (LOGIC_HIGH << FOC1B);/*No PWM mode*//*Set WGM11=0 , WGM10=0 */
    28f6:	ef e4       	ldi	r30, 0x4F	; 79
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	8c e0       	ldi	r24, 0x0C	; 12
    28fc:	80 83       	st	Z, r24
		TCCR1B = Config_Ptr->prescaler; /*Set prescaler value*/
    28fe:	ae e4       	ldi	r26, 0x4E	; 78
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e9 81       	ldd	r30, Y+1	; 0x01
    2904:	fa 81       	ldd	r31, Y+2	; 0x02
    2906:	84 81       	ldd	r24, Z+4	; 0x04
    2908:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->initial_value; /*Start value*/
    290a:	ac e4       	ldi	r26, 0x4C	; 76
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e9 81       	ldd	r30, Y+1	; 0x01
    2910:	fa 81       	ldd	r31, Y+2	; 0x02
    2912:	80 81       	ld	r24, Z
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	11 96       	adiw	r26, 0x01	; 1
    2918:	9c 93       	st	X, r25
    291a:	8e 93       	st	-X, r24
		TCCR1B = (TCCR1B & 0xE7) | (TIMER1_OUTPUT_PIN_OC1B_ONLY << 3);/*Set WGM13=0 , WGM12=1 ==> OCR1A=Top*/
    291c:	ae e4       	ldi	r26, 0x4E	; 78
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	ee e4       	ldi	r30, 0x4E	; 78
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	87 7e       	andi	r24, 0xE7	; 231
    2928:	88 60       	ori	r24, 0x08	; 8
    292a:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;/*Set compare(Top) value when an interrupt will occur*/
    292c:	aa e4       	ldi	r26, 0x4A	; 74
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e9 81       	ldd	r30, Y+1	; 0x01
    2932:	fa 81       	ldd	r31, Y+2	; 0x02
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	11 96       	adiw	r26, 0x01	; 1
    293a:	9c 93       	st	X, r25
    293c:	8e 93       	st	-X, r24
		TIMSK = (LOGIC_HIGH << OCIE1A);/*To generate interrupt at every compare match with OCR1A */
    293e:	e9 e5       	ldi	r30, 0x59	; 89
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 e1       	ldi	r24, 0x10	; 16
    2944:	80 83       	st	Z, r24

		switch (Config_Ptr->TIMER1_OutputPinsNumberValue)
    2946:	e9 81       	ldd	r30, Y+1	; 0x01
    2948:	fa 81       	ldd	r31, Y+2	; 0x02
    294a:	86 81       	ldd	r24, Z+6	; 0x06
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	3c 83       	std	Y+4, r19	; 0x04
    2952:	2b 83       	std	Y+3, r18	; 0x03
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	81 30       	cpi	r24, 0x01	; 1
    295a:	91 05       	cpc	r25, r1
    295c:	31 f0       	breq	.+12     	; 0x296a <TIMER1_init+0xd8>
    295e:	2b 81       	ldd	r18, Y+3	; 0x03
    2960:	3c 81       	ldd	r19, Y+4	; 0x04
    2962:	23 30       	cpi	r18, 0x03	; 3
    2964:	31 05       	cpc	r19, r1
    2966:	d9 f0       	breq	.+54     	; 0x299e <TIMER1_init+0x10c>
    2968:	47 c0       	rjmp	.+142    	; 0x29f8 <TIMER1_init+0x166>
		{
		case TIMER1_OUTPUT_PIN_OC1B_ONLY :/*In this case we can use ICU because we store the compare(Top) value in OCR1A register*/
			TCCR1A = (TCCR1A & 0xCF)
    296a:	af e4       	ldi	r26, 0x4F	; 79
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	ef e4       	ldi	r30, 0x4F	; 79
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	28 2f       	mov	r18, r24
    2976:	2f 7c       	andi	r18, 0xCF	; 207
    2978:	e9 81       	ldd	r30, Y+1	; 0x01
    297a:	fa 81       	ldd	r31, Y+2	; 0x02
    297c:	80 85       	ldd	r24, Z+8	; 0x08
    297e:	88 2f       	mov	r24, r24
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	82 95       	swap	r24
    2984:	92 95       	swap	r25
    2986:	90 7f       	andi	r25, 0xF0	; 240
    2988:	98 27       	eor	r25, r24
    298a:	80 7f       	andi	r24, 0xF0	; 240
    298c:	98 27       	eor	r25, r24
    298e:	82 2b       	or	r24, r18
    2990:	8c 93       	st	X, r24
					| ( (Config_Ptr->TIMER1_ctcModeOutputValueOnOC1B) << 4);/*Set COM1B1,COM1B0 according to dynamic configurations*/

			GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);/*Set OC1B as output pin*/
    2992:	83 e0       	ldi	r24, 0x03	; 3
    2994:	64 e0       	ldi	r22, 0x04	; 4
    2996:	41 e0       	ldi	r20, 0x01	; 1
    2998:	0e 94 48 0b 	call	0x1690	; 0x1690 <GPIO_setupPinDirection>
    299c:	2d c0       	rjmp	.+90     	; 0x29f8 <TIMER1_init+0x166>

			break;
		case TIMER1_OUTPUT_PINS_OC1B_OC1A :/*In this case we can not use ICU because we store the compare(Top) value in ICR1 register*/

			TCCR1A = (TCCR1A & 0x0F)
    299e:	af e4       	ldi	r26, 0x4F	; 79
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	ef e4       	ldi	r30, 0x4F	; 79
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	28 2f       	mov	r18, r24
    29aa:	2f 70       	andi	r18, 0x0F	; 15
    29ac:	e9 81       	ldd	r30, Y+1	; 0x01
    29ae:	fa 81       	ldd	r31, Y+2	; 0x02
    29b0:	80 85       	ldd	r24, Z+8	; 0x08
    29b2:	88 2f       	mov	r24, r24
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	82 95       	swap	r24
    29b8:	92 95       	swap	r25
    29ba:	90 7f       	andi	r25, 0xF0	; 240
    29bc:	98 27       	eor	r25, r24
    29be:	80 7f       	andi	r24, 0xF0	; 240
    29c0:	98 27       	eor	r25, r24
    29c2:	28 2b       	or	r18, r24
    29c4:	e9 81       	ldd	r30, Y+1	; 0x01
    29c6:	fa 81       	ldd	r31, Y+2	; 0x02
    29c8:	87 81       	ldd	r24, Z+7	; 0x07
    29ca:	88 2f       	mov	r24, r24
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	00 24       	eor	r0, r0
    29d0:	96 95       	lsr	r25
    29d2:	87 95       	ror	r24
    29d4:	07 94       	ror	r0
    29d6:	96 95       	lsr	r25
    29d8:	87 95       	ror	r24
    29da:	07 94       	ror	r0
    29dc:	98 2f       	mov	r25, r24
    29de:	80 2d       	mov	r24, r0
    29e0:	82 2b       	or	r24, r18
    29e2:	8c 93       	st	X, r24
					| ( (Config_Ptr->TIMER1_ctcModeOutputValueOnOC1B) << 4)
					| ( (Config_Ptr->TIMER1_ctcModeOutputValueOnOC1A) << 6);
			GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);/*Set OC1B as output pin*/
    29e4:	83 e0       	ldi	r24, 0x03	; 3
    29e6:	64 e0       	ldi	r22, 0x04	; 4
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	0e 94 48 0b 	call	0x1690	; 0x1690 <GPIO_setupPinDirection>
			GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);/*Set OC1A as output pin*/
    29ee:	83 e0       	ldi	r24, 0x03	; 3
    29f0:	65 e0       	ldi	r22, 0x05	; 5
    29f2:	41 e0       	ldi	r20, 0x01	; 1
    29f4:	0e 94 48 0b 	call	0x1690	; 0x1690 <GPIO_setupPinDirection>
		break;

	default :
		break;
	}
}
    29f8:	26 96       	adiw	r28, 0x06	; 6
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <TIMER1_setCallBackFunction>:

/*
 * Description : Function that takes callback function address (set the function to be called at every interrupt)
 */
void TIMER1_setCallBackFunction (void (*callBackFunctionPtr) (void))
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <TIMER1_setCallBackFunction+0x6>
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	9a 83       	std	Y+2, r25	; 0x02
    2a16:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER1_callBackFunctionPtr = callBackFunctionPtr;
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1c:	90 93 77 01 	sts	0x0177, r25
    2a20:	80 93 76 01 	sts	0x0176, r24
}
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <TIMER1_deInit>:
/*
 * Description : Function to stop TIMER1
 */

void TIMER1_deInit (void)
{
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    2a36:	ef e4       	ldi	r30, 0x4F	; 79
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	10 82       	st	Z, r1
	TCCR1B = 0;
    2a3c:	ee e4       	ldi	r30, 0x4E	; 78
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	10 82       	st	Z, r1
	TIMSK &= 0b11000011;
    2a42:	a9 e5       	ldi	r26, 0x59	; 89
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e9 e5       	ldi	r30, 0x59	; 89
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	83 7c       	andi	r24, 0xC3	; 195
    2a4e:	8c 93       	st	X, r24
}
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <TWI_init>:
 * 3- Set TWI prescaler value
 * 4- Set TWI bit rate register
 * 5- Enable TWI
 */
void TWI_init (TWI_config *TWI_configurations)
{
    2a56:	cf 92       	push	r12
    2a58:	df 92       	push	r13
    2a5a:	ef 92       	push	r14
    2a5c:	ff 92       	push	r15
    2a5e:	0f 93       	push	r16
    2a60:	1f 93       	push	r17
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <TWI_init+0x12>
    2a68:	0f 92       	push	r0
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
#ifdef TWI_WITH_INTERRUPT
	SET_BIT(TWCR, TWIE);/*enable TWI interrupt*/
#endif

	/***********to give the device an address (7-bits only)***********/
	TWAR = (TWAR & 0x00) | ( (TWI_configurations->TWI_deviceAddress) << 1);
    2a72:	e2 e2       	ldi	r30, 0x22	; 34
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	a2 e2       	ldi	r26, 0x22	; 34
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a80:	85 81       	ldd	r24, Z+5	; 0x05
    2a82:	88 2f       	mov	r24, r24
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	8c 93       	st	X, r24
	/***********************************************************************/

	/******************to set General Call Recognition State************************/
	TWAR = (TWAR & 0xFE)
    2a8c:	a2 e2       	ldi	r26, 0x22	; 34
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e2 e2       	ldi	r30, 0x22	; 34
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	98 2f       	mov	r25, r24
    2a98:	9e 7f       	andi	r25, 0xFE	; 254
    2a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9e:	86 81       	ldd	r24, Z+6	; 0x06
    2aa0:	81 70       	andi	r24, 0x01	; 1
    2aa2:	89 2b       	or	r24, r25
    2aa4:	8c 93       	st	X, r24
			| ( (TWI_configurations->TWI_generalCallRecognitionStateValue)
					& 0x01);
	/*********************************************************************************/

	/**********Set TWI prescaler value*************/
	TWSR = TWI_configurations->TWI_prescalerValue;
    2aa6:	a1 e2       	ldi	r26, 0x21	; 33
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e9 81       	ldd	r30, Y+1	; 0x01
    2aac:	fa 81       	ldd	r31, Y+2	; 0x02
    2aae:	80 81       	ld	r24, Z
    2ab0:	8c 93       	st	X, r24
	/******************************************/

	/******************Set TWI bit rate register**************************************/
	TWBR = ( (F_CPU / TWI_configurations->TWI_bitRateValue) - 16)
    2ab2:	cc 24       	eor	r12, r12
    2ab4:	dd 24       	eor	r13, r13
    2ab6:	68 94       	set
    2ab8:	c5 f8       	bld	r12, 5
    2aba:	e9 81       	ldd	r30, Y+1	; 0x01
    2abc:	fa 81       	ldd	r31, Y+2	; 0x02
    2abe:	21 81       	ldd	r18, Z+1	; 0x01
    2ac0:	32 81       	ldd	r19, Z+2	; 0x02
    2ac2:	43 81       	ldd	r20, Z+3	; 0x03
    2ac4:	54 81       	ldd	r21, Z+4	; 0x04
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	92 e1       	ldi	r25, 0x12	; 18
    2aca:	aa e7       	ldi	r26, 0x7A	; 122
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__udivmodsi4>
    2ad6:	da 01       	movw	r26, r20
    2ad8:	c9 01       	movw	r24, r18
    2ada:	40 97       	sbiw	r24, 0x10	; 16
    2adc:	a1 09       	sbc	r26, r1
    2ade:	b1 09       	sbc	r27, r1
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2ae8:	7b 01       	movw	r14, r22
    2aea:	8c 01       	movw	r16, r24
    2aec:	e9 81       	ldd	r30, Y+1	; 0x01
    2aee:	fa 81       	ldd	r31, Y+2	; 0x02
    2af0:	80 81       	ld	r24, Z
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	84 e0       	ldi	r24, 0x04	; 4
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	b9 01       	movw	r22, r18
    2afc:	0e 94 14 16 	call	0x2c28	; 0x2c28 <power>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	88 0f       	add	r24, r24
    2b06:	99 1f       	adc	r25, r25
    2b08:	aa 1f       	adc	r26, r26
    2b0a:	bb 1f       	adc	r27, r27
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b14:	9b 01       	movw	r18, r22
    2b16:	ac 01       	movw	r20, r24
    2b18:	c8 01       	movw	r24, r16
    2b1a:	b7 01       	movw	r22, r14
    2b1c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	bc 01       	movw	r22, r24
    2b26:	cd 01       	movw	r24, r26
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	f6 01       	movw	r30, r12
    2b32:	80 83       	st	Z, r24
			/ (float) (2 * power(4, TWI_configurations->TWI_prescalerValue));
	/*********************************************************************************/

	/*******enable TWI*******/
	SET_BIT(TWCR, TWEN);
    2b34:	a6 e5       	ldi	r26, 0x56	; 86
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e6 e5       	ldi	r30, 0x56	; 86
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	84 60       	ori	r24, 0x04	; 4
    2b40:	8c 93       	st	X, r24
	/**********************/
}
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	ff 90       	pop	r15
    2b52:	ef 90       	pop	r14
    2b54:	df 90       	pop	r13
    2b56:	cf 90       	pop	r12
    2b58:	08 95       	ret

00002b5a <TWI_start>:

/*
 * Description :Function to write the start bit on SDA(serial data line) in TWI bus
 */
void TWI_start (void)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
	/**********************************************************************/
	/* To clear TWI interrupt flag (to start the operations of the TWI)
	 * To set the TWI start condition bit
	 * To enable TWI
	 * */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2b62:	e6 e5       	ldi	r30, 0x56	; 86
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	84 ea       	ldi	r24, 0xA4	; 164
    2b68:	80 83       	st	Z, r24
	while(g_TWI_jobCompleted==0)/*wait until start bit is transmitted*/
	{
	}
	g_TWI_jobCompleted=0;
#else
	while (BIT_IS_CLEAR(TWCR, TWINT))/*wait until start bit is transmitted*/
    2b6a:	e6 e5       	ldi	r30, 0x56	; 86
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	88 23       	and	r24, r24
    2b72:	dc f7       	brge	.-10     	; 0x2b6a <TWI_start+0x10>
#endif

	/* we do not need to clear the TWI interrupt flag
	 * because we clear it at the beginning of every operation(start,stop,transmit,receive,etc)
	 */
}
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <TWI_stop>:

/*
 * Description :Function to write the stop bit on SDA(serial data line) in TWI bus
 */
void TWI_stop (void)
{
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
	/**********************************************************************/
	/* To clear TWI interrupt flag (to start the operations of the TWI)
	 * To set the TWI stop condition bit
	 * To enable TWI
	 * */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2b82:	e6 e5       	ldi	r30, 0x56	; 86
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	84 e9       	ldi	r24, 0x94	; 148
    2b88:	80 83       	st	Z, r24
	/***************************************************************************************************/

	/* we do not need to clear the TWI interrupt flag
	 * because we clear it at the beginning of every operation(start,stop,transmit,receive,etc)
	 */
}
    2b8a:	cf 91       	pop	r28
    2b8c:	df 91       	pop	r29
    2b8e:	08 95       	ret

00002b90 <TWI_writeByte>:

/*
 * Description :Function to write a byte on SDA(serial data line) in TWI bus
 */
void TWI_writeByte (uint8 data)
{
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	0f 92       	push	r0
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	89 83       	std	Y+1, r24	; 0x01
	/*******put the data in TWI data register*********/
	TWDR = data;
    2b9c:	e3 e2       	ldi	r30, 0x23	; 35
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	80 83       	st	Z, r24

	/**********************************************************************/
	/* To clear TWI interrupt flag (to start the operations of the TWI)
	 * To enable TWI
	 * */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2ba4:	e6 e5       	ldi	r30, 0x56	; 86
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	84 e8       	ldi	r24, 0x84	; 132
    2baa:	80 83       	st	Z, r24
	while(g_TWI_jobCompleted==0)/*wait until the byte is transmitted*/
	{
	}
	g_TWI_jobCompleted=0;
#else
	while (BIT_IS_CLEAR(TWCR, TWINT))/*wait until the byte is transmitted*/
    2bac:	e6 e5       	ldi	r30, 0x56	; 86
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	88 23       	and	r24, r24
    2bb4:	dc f7       	brge	.-10     	; 0x2bac <TWI_writeByte+0x1c>
	{
	}
#endif

}
    2bb6:	0f 90       	pop	r0
    2bb8:	cf 91       	pop	r28
    2bba:	df 91       	pop	r29
    2bbc:	08 95       	ret

00002bbe <TWI_readByteWithACK>:

/*
 * Description :Function to read a byte from SDA(serial data line) in TWI bus and write an Acknowledge on SDA
 */
uint8 TWI_readByteWithACK (void)
{
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
	/**********************************************************************/
	/* To clear TWI interrupt flag (to start the operations of the TWI)
	 * To set the TWI Acknowledge enable bit (when TWEA=1 then it sends ACK bit when the data is received)
	 * To enable TWI
	 * */
	TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
    2bc6:	e6 e5       	ldi	r30, 0x56	; 86
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	84 ec       	ldi	r24, 0xC4	; 196
    2bcc:	80 83       	st	Z, r24
	while(g_TWI_jobCompleted==0)/*wait until a byte is received*/
	{
	}
	g_TWI_jobCompleted=0;
#else
	while (BIT_IS_CLEAR(TWCR, TWINT))/*wait until a byte is received*/
    2bce:	e6 e5       	ldi	r30, 0x56	; 86
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	88 23       	and	r24, r24
    2bd6:	dc f7       	brge	.-10     	; 0x2bce <TWI_readByteWithACK+0x10>
#endif
	/* we do not need to clear the TWI interrupt flag
	 * because we clear it at the beginning of every operation(start,stop,transmit,receive,etc)
	 */

	return TWDR;/*return the received byte*/
    2bd8:	e3 e2       	ldi	r30, 0x23	; 35
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
}
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	08 95       	ret

00002be4 <TWI_readByteWithNACK>:
/*
 * Description :Function to read a byte from SDA(serial data line) in TWI bus only
 * and it does not send ACK bit indicating that the receiver does not want to receive more(like we send a NACK)
 */
uint8 TWI_readByteWithNACK (void)
{
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
	/**********************************************************************/
	/* To clear TWI interrupt flag (to start the operations of the TWI)
	 * To enable TWI
	 * */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2bec:	e6 e5       	ldi	r30, 0x56	; 86
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	84 e8       	ldi	r24, 0x84	; 132
    2bf2:	80 83       	st	Z, r24
	while(g_TWI_jobCompleted==0)/*wait until a byte is received*/
	{
	}
	g_TWI_jobCompleted=0;
#else
	while (BIT_IS_CLEAR(TWCR, TWINT))/*wait until a byte is received*/
    2bf4:	e6 e5       	ldi	r30, 0x56	; 86
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	88 23       	and	r24, r24
    2bfc:	dc f7       	brge	.-10     	; 0x2bf4 <TWI_readByteWithNACK+0x10>
#endif
	/* we do not need to clear the TWI interrupt flag
	 * because we clear it at the beginning of every operation(start,stop,transmit,receive,etc)
	 */

	return TWDR;/*return the received byte*/
    2bfe:	e3 e2       	ldi	r30, 0x23	; 35
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
}
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <TWI_getStatus>:

/*
 * Description :Function to return the status of TWI logic and TWI serial bus
 */
uint8 TWI_getStatus (void)
{
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	0f 92       	push	r0
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status = TWSR & 0b11111000;/*to mask prescaler bits*/
    2c14:	e1 e2       	ldi	r30, 0x21	; 33
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	88 7f       	andi	r24, 0xF8	; 248
    2c1c:	89 83       	std	Y+1, r24	; 0x01
	return status;
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <power>:

/*
 * Description :Function calculate the power value and it takes the base value and the exponent value
 */
static uint32 power (uint16 base , uint16 exponent)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	29 97       	sbiw	r28, 0x09	; 9
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	9f 83       	std	Y+7, r25	; 0x07
    2c3e:	8e 83       	std	Y+6, r24	; 0x06
    2c40:	79 87       	std	Y+9, r23	; 0x09
    2c42:	68 87       	std	Y+8, r22	; 0x08
	uint32 result = 1;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	a0 e0       	ldi	r26, 0x00	; 0
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	8a 83       	std	Y+2, r24	; 0x02
    2c4e:	9b 83       	std	Y+3, r25	; 0x03
    2c50:	ac 83       	std	Y+4, r26	; 0x04
    2c52:	bd 83       	std	Y+5, r27	; 0x05
	uint8 i;
	for (i = 0 ; i < exponent ; i++)
    2c54:	19 82       	std	Y+1, r1	; 0x01
    2c56:	16 c0       	rjmp	.+44     	; 0x2c84 <power+0x5c>
	{
		result *= base;
    2c58:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c5c:	9c 01       	movw	r18, r24
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	50 e0       	ldi	r21, 0x00	; 0
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	9b 81       	ldd	r25, Y+3	; 0x03
    2c66:	ac 81       	ldd	r26, Y+4	; 0x04
    2c68:	bd 81       	ldd	r27, Y+5	; 0x05
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__mulsi3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	8a 83       	std	Y+2, r24	; 0x02
    2c78:	9b 83       	std	Y+3, r25	; 0x03
    2c7a:	ac 83       	std	Y+4, r26	; 0x04
    2c7c:	bd 83       	std	Y+5, r27	; 0x05
 */
static uint32 power (uint16 base , uint16 exponent)
{
	uint32 result = 1;
	uint8 i;
	for (i = 0 ; i < exponent ; i++)
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	8f 5f       	subi	r24, 0xFF	; 255
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	88 85       	ldd	r24, Y+8	; 0x08
    2c8c:	99 85       	ldd	r25, Y+9	; 0x09
    2c8e:	28 17       	cp	r18, r24
    2c90:	39 07       	cpc	r19, r25
    2c92:	10 f3       	brcs	.-60     	; 0x2c58 <power+0x30>
	{
		result *= base;
	}
	return result;
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	9b 81       	ldd	r25, Y+3	; 0x03
    2c98:	ac 81       	ldd	r26, Y+4	; 0x04
    2c9a:	bd 81       	ldd	r27, Y+5	; 0x05
}
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	29 96       	adiw	r28, 0x09	; 9
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <UART_init>:
 * 4- UART n-bits data mode (5-bits,6-bits,7-bits,8-bits,9-bits)
 * 5- set baud rate in UBRR register using an equation
 * 6- to enable RX and TX interrupts in case we use interrupts
 */
void UART_init (UART_config *UART_configurations)
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <UART_init+0x6>
    2cb8:	00 d0       	rcall	.+0      	; 0x2cba <UART_init+0x8>
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	9c 83       	std	Y+4, r25	; 0x04
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRR_value = 0;
    2cc2:	1a 82       	std	Y+2, r1	; 0x02
    2cc4:	19 82       	std	Y+1, r1	; 0x01
	/**************************************Set UART dynamic configurations**************************************/

	/*********set whether the UART operates in U2X(double transmission speed) or not********/
	UCSRA =
    2cc6:	ab e2       	ldi	r26, 0x2B	; 43
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	eb e2       	ldi	r30, 0x2B	; 43
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	2d 7f       	andi	r18, 0xFD	; 253
    2cd4:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd6:	fc 81       	ldd	r31, Y+4	; 0x04
    2cd8:	83 81       	ldd	r24, Z+3	; 0x03
    2cda:	88 2f       	mov	r24, r24
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	82 2b       	or	r24, r18
    2ce4:	8c 93       	st	X, r24
					| ( (UART_configurations->UART_transmissionSpeed)
							<< UART_U2X_BIT_ID);
	/********************************************************************/

	/*************Receiver enable and transmitter enable************/
	UCSRB |= (1 << RXEN) | (1 << TXEN);
    2ce6:	aa e2       	ldi	r26, 0x2A	; 42
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	ea e2       	ldi	r30, 0x2A	; 42
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	88 61       	ori	r24, 0x18	; 24
    2cf2:	8c 93       	st	X, r24
	/**************************************************************/

	/*****to use UCSRC *****/
	UCSRC |= (1 << URSEL);
    2cf4:	a0 e4       	ldi	r26, 0x40	; 64
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	e0 e4       	ldi	r30, 0x40	; 64
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	80 68       	ori	r24, 0x80	; 128
    2d00:	8c 93       	st	X, r24
	/************************/
	/****************Set the UART parity type***************/
	UCSRC = (UCSRC & ~ (0x03 << UART_PARITY_START_BIT_ID))
    2d02:	a0 e4       	ldi	r26, 0x40	; 64
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	e0 e4       	ldi	r30, 0x40	; 64
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	2f 7c       	andi	r18, 0xCF	; 207
    2d10:	eb 81       	ldd	r30, Y+3	; 0x03
    2d12:	fc 81       	ldd	r31, Y+4	; 0x04
    2d14:	80 81       	ld	r24, Z
    2d16:	88 2f       	mov	r24, r24
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	82 95       	swap	r24
    2d1c:	92 95       	swap	r25
    2d1e:	90 7f       	andi	r25, 0xF0	; 240
    2d20:	98 27       	eor	r25, r24
    2d22:	80 7f       	andi	r24, 0xF0	; 240
    2d24:	98 27       	eor	r25, r24
    2d26:	82 2b       	or	r24, r18
    2d28:	8c 93       	st	X, r24
			| ( (UART_configurations->UART_parity) << UART_PARITY_START_BIT_ID);
	/*************************************************/

	/*************Set the UART stop bits number************/
	UCSRC = (UCSRC & ~ (1 << UART_STOP_BITS_BIT_ID))
    2d2a:	a0 e4       	ldi	r26, 0x40	; 64
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e0 e4       	ldi	r30, 0x40	; 64
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	28 2f       	mov	r18, r24
    2d36:	27 7f       	andi	r18, 0xF7	; 247
    2d38:	eb 81       	ldd	r30, Y+3	; 0x03
    2d3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d3c:	81 81       	ldd	r24, Z+1	; 0x01
    2d3e:	88 2f       	mov	r24, r24
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	88 0f       	add	r24, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	88 0f       	add	r24, r24
    2d48:	99 1f       	adc	r25, r25
    2d4a:	88 0f       	add	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	82 2b       	or	r24, r18
    2d50:	8c 93       	st	X, r24
			| ( (UART_configurations->UART_stopBits) << UART_STOP_BITS_BIT_ID);
	/*************************************************/

	/************Set the UART parity type**************/
	UCSRC = (UCSRC & ~ (0x03 << UART_N_BITS_MODE_START_BIT_ID))
    2d52:	a0 e4       	ldi	r26, 0x40	; 64
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e0 e4       	ldi	r30, 0x40	; 64
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	29 7f       	andi	r18, 0xF9	; 249
    2d60:	eb 81       	ldd	r30, Y+3	; 0x03
    2d62:	fc 81       	ldd	r31, Y+4	; 0x04
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	88 2f       	mov	r24, r24
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	88 0f       	add	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	82 2b       	or	r24, r18
    2d70:	8c 93       	st	X, r24
			| ( (UART_configurations->UART_nBitsDataMode)
					<< UART_N_BITS_MODE_START_BIT_ID);
	/*************************************************/

	/***********in case of 9-bits data mode**********/
	if (UART_configurations->UART_nBitsDataMode == 9)
    2d72:	eb 81       	ldd	r30, Y+3	; 0x03
    2d74:	fc 81       	ldd	r31, Y+4	; 0x04
    2d76:	82 81       	ldd	r24, Z+2	; 0x02
    2d78:	89 30       	cpi	r24, 0x09	; 9
    2d7a:	39 f4       	brne	.+14     	; 0x2d8a <UART_init+0xd8>
	{
		UCSRB |= (1 << UCSZ2);
    2d7c:	aa e2       	ldi	r26, 0x2A	; 42
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	ea e2       	ldi	r30, 0x2A	; 42
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	84 60       	ori	r24, 0x04	; 4
    2d88:	8c 93       	st	X, r24
	}
	/*************************************************/

	/********calculating UBBR in term of the baud rate************/
	if (UART_configurations->UART_transmissionSpeed == UART_singleSpeed)/*in case the UART operates in normal mode*/
    2d8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d8e:	83 81       	ldd	r24, Z+3	; 0x03
    2d90:	88 23       	and	r24, r24
    2d92:	31 f5       	brne	.+76     	; 0x2de0 <UART_init+0x12e>
	{
		UBRR_value = (uint16) ( (F_CPU
    2d94:	eb 81       	ldd	r30, Y+3	; 0x03
    2d96:	fc 81       	ldd	r31, Y+4	; 0x04
    2d98:	84 81       	ldd	r24, Z+4	; 0x04
    2d9a:	95 81       	ldd	r25, Z+5	; 0x05
    2d9c:	a6 81       	ldd	r26, Z+6	; 0x06
    2d9e:	b7 81       	ldd	r27, Z+7	; 0x07
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	aa 1f       	adc	r26, r26
    2da6:	bb 1f       	adc	r27, r27
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	aa 1f       	adc	r26, r26
    2dae:	bb 1f       	adc	r27, r27
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	aa 1f       	adc	r26, r26
    2db6:	bb 1f       	adc	r27, r27
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	aa 1f       	adc	r26, r26
    2dbe:	bb 1f       	adc	r27, r27
    2dc0:	9c 01       	movw	r18, r24
    2dc2:	ad 01       	movw	r20, r26
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	92 e1       	ldi	r25, 0x12	; 18
    2dc8:	aa e7       	ldi	r26, 0x7A	; 122
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__udivmodsi4>
    2dd4:	da 01       	movw	r26, r20
    2dd6:	c9 01       	movw	r24, r18
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	9a 83       	std	Y+2, r25	; 0x02
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	26 c0       	rjmp	.+76     	; 0x2e2c <UART_init+0x17a>
				/ (16 * UART_configurations->UART_baudRate)) - 1);
	}
	else if (UART_configurations->UART_transmissionSpeed == UART_doubleSpeed)/*in case the UART operates in U2X(double transmission speed)*/
    2de0:	eb 81       	ldd	r30, Y+3	; 0x03
    2de2:	fc 81       	ldd	r31, Y+4	; 0x04
    2de4:	83 81       	ldd	r24, Z+3	; 0x03
    2de6:	81 30       	cpi	r24, 0x01	; 1
    2de8:	09 f5       	brne	.+66     	; 0x2e2c <UART_init+0x17a>
	{
		UBRR_value = (uint16) ( (F_CPU
    2dea:	eb 81       	ldd	r30, Y+3	; 0x03
    2dec:	fc 81       	ldd	r31, Y+4	; 0x04
    2dee:	84 81       	ldd	r24, Z+4	; 0x04
    2df0:	95 81       	ldd	r25, Z+5	; 0x05
    2df2:	a6 81       	ldd	r26, Z+6	; 0x06
    2df4:	b7 81       	ldd	r27, Z+7	; 0x07
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	aa 1f       	adc	r26, r26
    2dfc:	bb 1f       	adc	r27, r27
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	aa 1f       	adc	r26, r26
    2e04:	bb 1f       	adc	r27, r27
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	aa 1f       	adc	r26, r26
    2e0c:	bb 1f       	adc	r27, r27
    2e0e:	9c 01       	movw	r18, r24
    2e10:	ad 01       	movw	r20, r26
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	92 e1       	ldi	r25, 0x12	; 18
    2e16:	aa e7       	ldi	r26, 0x7A	; 122
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	bc 01       	movw	r22, r24
    2e1c:	cd 01       	movw	r24, r26
    2e1e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__udivmodsi4>
    2e22:	da 01       	movw	r26, r20
    2e24:	c9 01       	movw	r24, r18
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	9a 83       	std	Y+2, r25	; 0x02
    2e2a:	89 83       	std	Y+1, r24	; 0x01
				/ (8 * UART_configurations->UART_baudRate)) - 1);
	}
	/*****************************************************************/

	/***********setting UBBR*********/
	UBRRL = UBRR_value;
    2e2c:	e9 e2       	ldi	r30, 0x29	; 41
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	80 83       	st	Z, r24
	UBRRH = UBRR_value >> 8;
    2e34:	e0 e4       	ldi	r30, 0x40	; 64
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3c:	89 2f       	mov	r24, r25
    2e3e:	99 27       	eor	r25, r25
    2e40:	80 83       	st	Z, r24
	/***********************************/
	/**************************************************************************************************************************/
#ifdef UART_UISNG_INTERRUPT
	UCSRB |= (1 << RXCIE) | (1 << UDRIE);/* Rx complete interrupt enable & data register empty interrupt enable*/
#endif
}
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <UART_sendByte>:

/*
 * Description :Function that take a byte (data) and send it serially through UART (TX pin)
 */
void UART_sendByte (const uint8 data)
{
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	0f 92       	push	r0
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	89 83       	std	Y+1, r24	; 0x01
#ifndef UART_UISNG_INTERRUPT
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    2e5c:	eb e2       	ldi	r30, 0x2B	; 43
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	88 2f       	mov	r24, r24
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	80 72       	andi	r24, 0x20	; 32
    2e68:	90 70       	andi	r25, 0x00	; 0
    2e6a:	00 97       	sbiw	r24, 0x00	; 0
    2e6c:	b9 f3       	breq	.-18     	; 0x2e5c <UART_sendByte+0xc>
	{
	}
	UDR = data;
    2e6e:	ec e2       	ldi	r30, 0x2C	; 44
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	80 83       	st	Z, r24
#ifdef UART_UISNG_INTERRUPT
	g_dataTx = data;
	g_flagTx = 1;
#endif

}
    2e76:	0f 90       	pop	r0
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <UART_sendString>:

/*
 * Description :Function to send a string serially through the UART
 */
void UART_sendString (const uint8 *string)
{
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	00 d0       	rcall	.+0      	; 0x2e84 <UART_sendString+0x6>
    2e84:	0f 92       	push	r0
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
    2e8a:	9b 83       	std	Y+3, r25	; 0x03
    2e8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count;
	for (count = 0 ; string[count] != '\0' ; count++)
    2e8e:	19 82       	std	Y+1, r1	; 0x01
    2e90:	0e c0       	rjmp	.+28     	; 0x2eae <UART_sendString+0x30>
	{
		UART_sendByte(string[count]);
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	28 2f       	mov	r18, r24
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	e2 0f       	add	r30, r18
    2ea0:	f3 1f       	adc	r31, r19
    2ea2:	80 81       	ld	r24, Z
    2ea4:	0e 94 28 17 	call	0x2e50	; 0x2e50 <UART_sendByte>
 * Description :Function to send a string serially through the UART
 */
void UART_sendString (const uint8 *string)
{
	uint8 count;
	for (count = 0 ; string[count] != '\0' ; count++)
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	8f 5f       	subi	r24, 0xFF	; 255
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb8:	fc 01       	movw	r30, r24
    2eba:	e2 0f       	add	r30, r18
    2ebc:	f3 1f       	adc	r31, r19
    2ebe:	80 81       	ld	r24, Z
    2ec0:	88 23       	and	r24, r24
    2ec2:	39 f7       	brne	.-50     	; 0x2e92 <UART_sendString+0x14>
		while (g_flagTx == 1)/*wait until the byte is sent*/
		{
		}
#endif
	}
}
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	08 95       	ret

00002ed0 <UART_receiveByte>:

/*
 * Description : Function that return a byte(data) received serially from UART (RX pin)
 */
uint8 UART_receiveByte (void)
{
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
#ifndef UART_UISNG_INTERRUPT
	while (BIT_IS_CLEAR(UCSRA, RXC))
    2ed8:	eb e2       	ldi	r30, 0x2B	; 43
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	80 81       	ld	r24, Z
    2ede:	88 23       	and	r24, r24
    2ee0:	dc f7       	brge	.-10     	; 0x2ed8 <UART_receiveByte+0x8>
	{
	}
	return UDR;
    2ee2:	ec e2       	ldi	r30, 0x2C	; 44
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	80 81       	ld	r24, Z
	{
	}
	g_flagRx = 0;
	return g_dataRx;
#endif
}
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	08 95       	ret

00002eee <UART_receiveString>:

/*
 * Description : Function to receive a string until '#' serially through the UART
 */
void UART_receiveString (uint8 *string)
{
    2eee:	0f 93       	push	r16
    2ef0:	1f 93       	push	r17
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	00 d0       	rcall	.+0      	; 0x2ef8 <UART_receiveString+0xa>
    2ef8:	0f 92       	push	r0
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
    2efe:	9b 83       	std	Y+3, r25	; 0x03
    2f00:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    2f02:	19 82       	std	Y+1, r1	; 0x01
	string[count] = UART_receiveByte();
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	28 2f       	mov	r18, r24
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f0e:	8c 01       	movw	r16, r24
    2f10:	02 0f       	add	r16, r18
    2f12:	13 1f       	adc	r17, r19
    2f14:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <UART_receiveByte>
    2f18:	f8 01       	movw	r30, r16
    2f1a:	80 83       	st	Z, r24
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <UART_receiveString+0x4e>
	while (string[count] != '#')
	{
		count++;
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	8f 5f       	subi	r24, 0xFF	; 255
    2f22:	89 83       	std	Y+1, r24	; 0x01
		string[count] = UART_receiveByte();
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	28 2f       	mov	r18, r24
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2e:	8c 01       	movw	r16, r24
    2f30:	02 0f       	add	r16, r18
    2f32:	13 1f       	adc	r17, r19
    2f34:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <UART_receiveByte>
    2f38:	f8 01       	movw	r30, r16
    2f3a:	80 83       	st	Z, r24
 */
void UART_receiveString (uint8 *string)
{
	uint8 count = 0;
	string[count] = UART_receiveByte();
	while (string[count] != '#')
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	28 2f       	mov	r18, r24
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	9b 81       	ldd	r25, Y+3	; 0x03
    2f46:	fc 01       	movw	r30, r24
    2f48:	e2 0f       	add	r30, r18
    2f4a:	f3 1f       	adc	r31, r19
    2f4c:	80 81       	ld	r24, Z
    2f4e:	83 32       	cpi	r24, 0x23	; 35
    2f50:	31 f7       	brne	.-52     	; 0x2f1e <UART_receiveString+0x30>
	{
		count++;
		string[count] = UART_receiveByte();
	}

	string[count] = '\0';
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	e2 0f       	add	r30, r18
    2f60:	f3 1f       	adc	r31, r19
    2f62:	10 82       	st	Z, r1

}
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	1f 91       	pop	r17
    2f70:	0f 91       	pop	r16
    2f72:	08 95       	ret

00002f74 <__mulsi3>:
    2f74:	62 9f       	mul	r22, r18
    2f76:	d0 01       	movw	r26, r0
    2f78:	73 9f       	mul	r23, r19
    2f7a:	f0 01       	movw	r30, r0
    2f7c:	82 9f       	mul	r24, r18
    2f7e:	e0 0d       	add	r30, r0
    2f80:	f1 1d       	adc	r31, r1
    2f82:	64 9f       	mul	r22, r20
    2f84:	e0 0d       	add	r30, r0
    2f86:	f1 1d       	adc	r31, r1
    2f88:	92 9f       	mul	r25, r18
    2f8a:	f0 0d       	add	r31, r0
    2f8c:	83 9f       	mul	r24, r19
    2f8e:	f0 0d       	add	r31, r0
    2f90:	74 9f       	mul	r23, r20
    2f92:	f0 0d       	add	r31, r0
    2f94:	65 9f       	mul	r22, r21
    2f96:	f0 0d       	add	r31, r0
    2f98:	99 27       	eor	r25, r25
    2f9a:	72 9f       	mul	r23, r18
    2f9c:	b0 0d       	add	r27, r0
    2f9e:	e1 1d       	adc	r30, r1
    2fa0:	f9 1f       	adc	r31, r25
    2fa2:	63 9f       	mul	r22, r19
    2fa4:	b0 0d       	add	r27, r0
    2fa6:	e1 1d       	adc	r30, r1
    2fa8:	f9 1f       	adc	r31, r25
    2faa:	bd 01       	movw	r22, r26
    2fac:	cf 01       	movw	r24, r30
    2fae:	11 24       	eor	r1, r1
    2fb0:	08 95       	ret

00002fb2 <__divmodhi4>:
    2fb2:	97 fb       	bst	r25, 7
    2fb4:	09 2e       	mov	r0, r25
    2fb6:	07 26       	eor	r0, r23
    2fb8:	0a d0       	rcall	.+20     	; 0x2fce <__divmodhi4_neg1>
    2fba:	77 fd       	sbrc	r23, 7
    2fbc:	04 d0       	rcall	.+8      	; 0x2fc6 <__divmodhi4_neg2>
    2fbe:	2e d0       	rcall	.+92     	; 0x301c <__udivmodhi4>
    2fc0:	06 d0       	rcall	.+12     	; 0x2fce <__divmodhi4_neg1>
    2fc2:	00 20       	and	r0, r0
    2fc4:	1a f4       	brpl	.+6      	; 0x2fcc <__divmodhi4_exit>

00002fc6 <__divmodhi4_neg2>:
    2fc6:	70 95       	com	r23
    2fc8:	61 95       	neg	r22
    2fca:	7f 4f       	sbci	r23, 0xFF	; 255

00002fcc <__divmodhi4_exit>:
    2fcc:	08 95       	ret

00002fce <__divmodhi4_neg1>:
    2fce:	f6 f7       	brtc	.-4      	; 0x2fcc <__divmodhi4_exit>
    2fd0:	90 95       	com	r25
    2fd2:	81 95       	neg	r24
    2fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd6:	08 95       	ret

00002fd8 <__udivmodsi4>:
    2fd8:	a1 e2       	ldi	r26, 0x21	; 33
    2fda:	1a 2e       	mov	r1, r26
    2fdc:	aa 1b       	sub	r26, r26
    2fde:	bb 1b       	sub	r27, r27
    2fe0:	fd 01       	movw	r30, r26
    2fe2:	0d c0       	rjmp	.+26     	; 0x2ffe <__udivmodsi4_ep>

00002fe4 <__udivmodsi4_loop>:
    2fe4:	aa 1f       	adc	r26, r26
    2fe6:	bb 1f       	adc	r27, r27
    2fe8:	ee 1f       	adc	r30, r30
    2fea:	ff 1f       	adc	r31, r31
    2fec:	a2 17       	cp	r26, r18
    2fee:	b3 07       	cpc	r27, r19
    2ff0:	e4 07       	cpc	r30, r20
    2ff2:	f5 07       	cpc	r31, r21
    2ff4:	20 f0       	brcs	.+8      	; 0x2ffe <__udivmodsi4_ep>
    2ff6:	a2 1b       	sub	r26, r18
    2ff8:	b3 0b       	sbc	r27, r19
    2ffa:	e4 0b       	sbc	r30, r20
    2ffc:	f5 0b       	sbc	r31, r21

00002ffe <__udivmodsi4_ep>:
    2ffe:	66 1f       	adc	r22, r22
    3000:	77 1f       	adc	r23, r23
    3002:	88 1f       	adc	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	1a 94       	dec	r1
    3008:	69 f7       	brne	.-38     	; 0x2fe4 <__udivmodsi4_loop>
    300a:	60 95       	com	r22
    300c:	70 95       	com	r23
    300e:	80 95       	com	r24
    3010:	90 95       	com	r25
    3012:	9b 01       	movw	r18, r22
    3014:	ac 01       	movw	r20, r24
    3016:	bd 01       	movw	r22, r26
    3018:	cf 01       	movw	r24, r30
    301a:	08 95       	ret

0000301c <__udivmodhi4>:
    301c:	aa 1b       	sub	r26, r26
    301e:	bb 1b       	sub	r27, r27
    3020:	51 e1       	ldi	r21, 0x11	; 17
    3022:	07 c0       	rjmp	.+14     	; 0x3032 <__udivmodhi4_ep>

00003024 <__udivmodhi4_loop>:
    3024:	aa 1f       	adc	r26, r26
    3026:	bb 1f       	adc	r27, r27
    3028:	a6 17       	cp	r26, r22
    302a:	b7 07       	cpc	r27, r23
    302c:	10 f0       	brcs	.+4      	; 0x3032 <__udivmodhi4_ep>
    302e:	a6 1b       	sub	r26, r22
    3030:	b7 0b       	sbc	r27, r23

00003032 <__udivmodhi4_ep>:
    3032:	88 1f       	adc	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	5a 95       	dec	r21
    3038:	a9 f7       	brne	.-22     	; 0x3024 <__udivmodhi4_loop>
    303a:	80 95       	com	r24
    303c:	90 95       	com	r25
    303e:	bc 01       	movw	r22, r24
    3040:	cd 01       	movw	r24, r26
    3042:	08 95       	ret

00003044 <__prologue_saves__>:
    3044:	2f 92       	push	r2
    3046:	3f 92       	push	r3
    3048:	4f 92       	push	r4
    304a:	5f 92       	push	r5
    304c:	6f 92       	push	r6
    304e:	7f 92       	push	r7
    3050:	8f 92       	push	r8
    3052:	9f 92       	push	r9
    3054:	af 92       	push	r10
    3056:	bf 92       	push	r11
    3058:	cf 92       	push	r12
    305a:	df 92       	push	r13
    305c:	ef 92       	push	r14
    305e:	ff 92       	push	r15
    3060:	0f 93       	push	r16
    3062:	1f 93       	push	r17
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	ca 1b       	sub	r28, r26
    306e:	db 0b       	sbc	r29, r27
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	09 94       	ijmp

0000307c <__epilogue_restores__>:
    307c:	2a 88       	ldd	r2, Y+18	; 0x12
    307e:	39 88       	ldd	r3, Y+17	; 0x11
    3080:	48 88       	ldd	r4, Y+16	; 0x10
    3082:	5f 84       	ldd	r5, Y+15	; 0x0f
    3084:	6e 84       	ldd	r6, Y+14	; 0x0e
    3086:	7d 84       	ldd	r7, Y+13	; 0x0d
    3088:	8c 84       	ldd	r8, Y+12	; 0x0c
    308a:	9b 84       	ldd	r9, Y+11	; 0x0b
    308c:	aa 84       	ldd	r10, Y+10	; 0x0a
    308e:	b9 84       	ldd	r11, Y+9	; 0x09
    3090:	c8 84       	ldd	r12, Y+8	; 0x08
    3092:	df 80       	ldd	r13, Y+7	; 0x07
    3094:	ee 80       	ldd	r14, Y+6	; 0x06
    3096:	fd 80       	ldd	r15, Y+5	; 0x05
    3098:	0c 81       	ldd	r16, Y+4	; 0x04
    309a:	1b 81       	ldd	r17, Y+3	; 0x03
    309c:	aa 81       	ldd	r26, Y+2	; 0x02
    309e:	b9 81       	ldd	r27, Y+1	; 0x01
    30a0:	ce 0f       	add	r28, r30
    30a2:	d1 1d       	adc	r29, r1
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	de bf       	out	0x3e, r29	; 62
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	cd bf       	out	0x3d, r28	; 61
    30ae:	ed 01       	movw	r28, r26
    30b0:	08 95       	ret

000030b2 <itoa>:
    30b2:	fb 01       	movw	r30, r22
    30b4:	9f 01       	movw	r18, r30
    30b6:	e8 94       	clt
    30b8:	42 30       	cpi	r20, 0x02	; 2
    30ba:	c4 f0       	brlt	.+48     	; 0x30ec <itoa+0x3a>
    30bc:	45 32       	cpi	r20, 0x25	; 37
    30be:	b4 f4       	brge	.+44     	; 0x30ec <itoa+0x3a>
    30c0:	4a 30       	cpi	r20, 0x0A	; 10
    30c2:	29 f4       	brne	.+10     	; 0x30ce <itoa+0x1c>
    30c4:	97 fb       	bst	r25, 7
    30c6:	1e f4       	brtc	.+6      	; 0x30ce <itoa+0x1c>
    30c8:	90 95       	com	r25
    30ca:	81 95       	neg	r24
    30cc:	9f 4f       	sbci	r25, 0xFF	; 255
    30ce:	64 2f       	mov	r22, r20
    30d0:	77 27       	eor	r23, r23
    30d2:	0e 94 0e 18 	call	0x301c	; 0x301c <__udivmodhi4>
    30d6:	80 5d       	subi	r24, 0xD0	; 208
    30d8:	8a 33       	cpi	r24, 0x3A	; 58
    30da:	0c f0       	brlt	.+2      	; 0x30de <itoa+0x2c>
    30dc:	89 5d       	subi	r24, 0xD9	; 217
    30de:	81 93       	st	Z+, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	a1 f7       	brne	.-24     	; 0x30ce <itoa+0x1c>
    30e6:	16 f4       	brtc	.+4      	; 0x30ec <itoa+0x3a>
    30e8:	5d e2       	ldi	r21, 0x2D	; 45
    30ea:	51 93       	st	Z+, r21
    30ec:	10 82       	st	Z, r1
    30ee:	c9 01       	movw	r24, r18
    30f0:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <strrev>

000030f4 <strrev>:
    30f4:	dc 01       	movw	r26, r24
    30f6:	fc 01       	movw	r30, r24
    30f8:	67 2f       	mov	r22, r23
    30fa:	71 91       	ld	r23, Z+
    30fc:	77 23       	and	r23, r23
    30fe:	e1 f7       	brne	.-8      	; 0x30f8 <strrev+0x4>
    3100:	32 97       	sbiw	r30, 0x02	; 2
    3102:	04 c0       	rjmp	.+8      	; 0x310c <strrev+0x18>
    3104:	7c 91       	ld	r23, X
    3106:	6d 93       	st	X+, r22
    3108:	70 83       	st	Z, r23
    310a:	62 91       	ld	r22, -Z
    310c:	ae 17       	cp	r26, r30
    310e:	bf 07       	cpc	r27, r31
    3110:	c8 f3       	brcs	.-14     	; 0x3104 <strrev+0x10>
    3112:	08 95       	ret

00003114 <_exit>:
    3114:	f8 94       	cli

00003116 <__stop_program>:
    3116:	ff cf       	rjmp	.-2      	; 0x3116 <__stop_program>
