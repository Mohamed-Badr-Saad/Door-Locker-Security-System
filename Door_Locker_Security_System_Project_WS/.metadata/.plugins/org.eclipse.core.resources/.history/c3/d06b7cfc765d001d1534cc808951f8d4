/*
 *    File name: Final_Project_CONTROL_ECU.c
 *   Created on: Nov 4, 2022
 *       Author: Mohamed Badr
 *  Description: 
 */

#define PASSWORD_SIZE 5
#define PASSWORD_SIZE_PLUS_ENTER 1+PASSWORD_SIZE
#define PASSWORDS_IDENTICAL 1
#define PASSWORDS_NOT_IDENTICAL 0
#define CONTROL_ECU_READY 0xFF
#define OPEN_DOOR '+'
#define CHANGE_PASSWORD '-'
#define DUMMY_VALUE 0xF0

#include<avr/io.h>
#include "twi.h"
#include "eeprom.h"
#include "uart.h"
#include "lcd.h"
#include "dc-motor.h"
#include "timer1.h"
#include "buzzer.h"
#include <util/delay.h>
/**********************************************************/
uint8 g_passwordArray[PASSWORD_SIZE_PLUS_ENTER] = { 0 },
		g_repeatedPassword[PASSWORD_SIZE_PLUS_ENTER] = { 0 };
TIMER1_ConfigType g_TIMER1_configurations;
volatile uint8 g_tick = 0;
/*****************************************************/

/*
 * Description : Function to receive newly created password and store it in EEPROM
 */
void doorLock_receiveAndStoreNewPassword (void);

/*
 * Description : Function to receive the password from CONTROL_ECU
 */
void doorLock_receivePassword (uint8 *receivedPass);

/*
 * Description : Function to check whether the 2 passwords are identical or not in case of creating a new password
 */
uint8 doorLock_passwordFirstCheck (void);

/*
 * Description : Function to save the password in EEPROM
 */
void doorLock_savePassword (void);

/*
 * Description : Function to receive the required option from HMI_ECU
 */
uint8 doorLock_receiveOption (void);

/*
 * Description : Function to check whether the saved password in EEPROM is identical to the received password or not
 */
uint8 doorLock_passwordSecondCheck (void);

/*
 * Description : Function to increment g_tick every compare match [callback function]
 */
void tickIncrement (void);

/*
 * Description : Function to make a delay for specific time in seconds
 */
void delayInSec (uint16 timeInSec);

/*
 * Description : Function to open the door
 */
void doorLock_openDoor (void);

/*
 * Description : Function to check the entered password(for the third time) in order to do specific option
 * in case the user failed to enter the password correctly in the 3 trials then we have to return to the main options
 */
uint8 doorLock_3trialsPasswordCheck (void);

int main (void)
{
	uint8 option, count;
	SREG |= (1 << 7);/*enable global interrupt*/
	/********UART dynamic configurations**********/
	UART_config UART_configurations;
	UART_configurations.UART_baudRate = 9600;
	UART_configurations.UART_nBitsDataMode = UART_8_BIT_DATA_MODE;
	UART_configurations.UART_parity = UART_PARITY_OFF;
	UART_configurations.UART_stopBits = UART_1_STOP_BIT;
	UART_configurations.UART_transmissionSpeed = UART_doubleSpeed;
	UART_init(&UART_configurations);/*initialize UART*/
	/**********************************************/

	/**************TWI dynamic configurations************************/
	TWI_config TWI_configurations;
	TWI_configurations.TWI_bitRateValue = TWI_NORMAL_MODE_100K;
	TWI_configurations.TWI_prescalerValue = TWI_F_CPU_1;
	TWI_configurations.TWI_deviceAddress = 1;/*this MCU will have an address 0x01*/
	TWI_configurations.TWI_generalCallRecognitionStateValue = TWI_OFF;
	TWI_init(&TWI_configurations);
	/****************************************************************/

	/*********TIMER1 dynamic configurations****************//*it will call the callback function every 1sec*/
	g_TIMER1_configurations.mode = TIMER1_CTC_MODE;
	g_TIMER1_configurations.initial_value = 0;
	g_TIMER1_configurations.compare_value = 7812;
	g_TIMER1_configurations.prescaler = TIMER1_F_CPU_1024;
	g_TIMER1_configurations.TIMER1_OutputPinsNumberValue = 0;
	g_TIMER1_configurations.TIMER1_ctcModeOutputValueOnOC1A =
			TIMER1_CTC_MODE_NO_OUTPUT;
	g_TIMER1_configurations.TIMER1_ctcModeOutputValueOnOC1B =
			TIMER1_CTC_MODE_NO_OUTPUT;
	TIMER1_setCallBackFunction(tickIncrement);
	/*******************************************************/
	LCD_init();
	DcMotor_init();/*initialize pins direction in the micro-controller to make the motor operate in the required state*/
	LCD_diplaystring("RX pass:");

	UART_sendByte(CONTROL_ECU_READY);/*to inform HMI_ECU that CONTROL_ECU is ready to receive data*/

	while (1)
	{

		doorLock_receiveAndStoreNewPassword();/*receive newly created password and store it in EEPROM*/
		option = doorLock_receiveOption();/*receive the required option from HMI_ECU*/
		count = doorLock_3trialsPasswordCheck();

		if (count < 3)/*in case the user entered the correct password in any of the 3 trials*/
		{
			LCD_moveCursor(1, 0);
			switch (option)
			{
			case OPEN_DOOR :
				doorLock_openDoor();
				break;

			case CHANGE_PASSWORD :
				doorLock_receiveAndStoreNewPassword();/*receive newly created password and store it in EEPROM*/
				break;
			}

		}
		else/*in case the user entered a wrong password for more than 3 trials*/
		{
			option = doorLock_receiveOption();/*receive the required option from HMI_ECU*/
			count = doorLock_3trialsPasswordCheck();
		}

	}
}

/*
 * Description : Function to receive the password from CONTROL_ECU
 */
void doorLock_receivePassword (uint8 *receivedPass)
{
	uint8 count;
	/* we loop until password size +1
	 * to receive enter button to make CONTROL_ECU know that the user finished entering the password*/
	for (count = 0 ; count < PASSWORD_SIZE_PLUS_ENTER ; count++)
	{
		receivedPass[count] = UART_receiveByte();/*receive the password from HMI_ECU byte by byte*/
	}
}

/*
 * Description : Function to check whether the 2 passwords are identical or not in case of creating a new password
 */
uint8 doorLock_passwordFirstCheck (void)
{
	uint8 count, passwordState = PASSWORDS_IDENTICAL;
	for (count = 0 ; count < PASSWORD_SIZE ; count++)
	{
		if (g_passwordArray[count] != g_repeatedPassword[count])/*in case the 2 passwords are not identical*/
		{
			passwordState = PASSWORDS_NOT_IDENTICAL;
			break;
		}
	}

	UART_sendByte(passwordState);/*send the state of comparing 2 passwords to HMI_ECU*/
	return passwordState;

}
/*
 * Description : Function to save the password in EEPROM
 */
void doorLock_savePassword (void)
{
	uint8 count, eepromData, eepromAdress = 0;

	for (count = 0 ; count < PASSWORD_SIZE ; count++)
	{
		EEPROM_writeByte(g_passwordArray[count], eepromAdress);/*save the password to EEPROM*/
		_delay_ms(10);/*between every frame on TWI bus we have to wait 10ms*/
		EEPROM_readByte(&eepromData, eepromAdress);
		_delay_ms(10);/*between every frame on TWI bus we have to wait 10ms*/
		LCD_integerToString((int) eepromData);
		eepromAdress++;
	}
}

/*
 * Description : Function to receive the required option from HMI_ECU
 */
uint8 doorLock_receiveOption (void)
{
	uint8 option;
	option = UART_receiveByte();
	LCD_diplaystring("OP");
	LCD_displayCharacter(option);
	return option;
}
/*
 * Description : Function to check whether the saved password in EEPROM is identical to the received password or not
 */
uint8 doorLock_passwordSecondCheck (void)
{
	uint8 count, eepromAdress = 0, eepromData, passwordState =
	PASSWORDS_IDENTICAL;
	for (count = 0 ; count < PASSWORD_SIZE ; count++)
	{
		EEPROM_readByte(&eepromData, eepromAdress);
		if (g_passwordArray[count] != eepromData)
		{
			passwordState = PASSWORDS_NOT_IDENTICAL;
			break;
		}
		eepromAdress++;
		_delay_ms(10);
	}
	UART_sendByte(passwordState);/*sends the state of the password to HMI_ECU*/
	return passwordState;
}

/*
 * Description : Function to increment g_tick every compare match [callback function]
 */
void tickIncrement (void)
{
	g_tick++;
}

/*
 * Description : Function to make a delay for specific time in seconds
 */
void delayInSec (uint16 timeInSec)
{
	/*************wait for timeInSec***********/
	while (g_tick < timeInSec)
	{
		LCD_moveCursor(1, 0);
		LCD_integerToString(g_tick);
	}
	g_tick = 0;
	/*****************************************/
}

/*
 * Description : Function to open the door
 */
void doorLock_openDoor (void)
{
	TIMER1_init(&g_TIMER1_configurations);/*it will call the callback function every 1sec*/
	DcMotor_Rotate(DC_MOTOR_CLOCKWISE, DC_MOTOR_FULL_SPEED);
	delayInSec(15);/*wait for 15sec*/
	DcMotor_Rotate(DC_MOTOR_STOP, DC_MOTOR_STOP);
	delayInSec(3);/*hold for 3sec*/
	DcMotor_Rotate(DC_MOTOR_ANTI_CLOCKWISE, DC_MOTOR_FULL_SPEED);
	delayInSec(15);/*wait for 15sec*/
	DcMotor_Rotate(DC_MOTOR_STOP, DC_MOTOR_STOP);

	TIMER1_deInit();
}

/*
 * Description : Function to receive newly created password and store it in EEPROM
 */
void doorLock_receiveAndStoreNewPassword (void)
{
	/****************************repeat this loop in case the entered 2 passwords are not identical****************************/
	do
	{
		doorLock_receivePassword(g_passwordArray);/*receive the password from HMI_ECU for the first time*/
		doorLock_receivePassword(g_repeatedPassword);/*receive the password from HMI_ECU for the second time*/
	} while (doorLock_passwordFirstCheck() == PASSWORDS_NOT_IDENTICAL);
	/************************************************************************************************************************/
	/******In case the 2 passwords are identical CONTROL_ECU will save the password in EEPROM******/
	doorLock_savePassword();
	/*************************************************/
	UART_sendByte(CONTROL_ECU_READY);/*to inform HMI_ECU that CONTROL_ECU is ready to receive data*/
}

/*
 * Description : Function to check the entered password(for the third time) in order to do specific option
 * in case the user failed to enter the password correctly in the 3 trials then we have to return to the main options
 */
uint8 doorLock_3trialsPasswordCheck (void)
{
	uint8 count, passwordState = DUMMY_VALUE;
	for (count = 0 ; count < 3 ; count++)
	{
		if (passwordState == PASSWORDS_IDENTICAL)
		{
			break;
		}
		else
		{
			doorLock_receivePassword(g_passwordArray);/*receive the password from HMI_ECU*/
			passwordState = doorLock_passwordSecondCheck();/*check if the saved password in EEPROM is identical to received password*/
		}
	}
	return count;
}
