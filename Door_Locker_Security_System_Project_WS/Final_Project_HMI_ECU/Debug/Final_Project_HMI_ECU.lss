
Final_Project_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ad6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00002ad6  00002b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000f4  008000f4  00002bfe  2**0
                  ALLOC
  3 .stab         00002ab4  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016fa  00000000  00000000  000056b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000705e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a940  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ad2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b4fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 30       	cpi	r26, 0x01	; 1
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ee       	ldi	r26, 0xEC	; 236
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ee       	ldi	r24, 0xEC	; 236
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 19 15 	jmp	0x2a32	; 0x2a32 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/**********Other header files used by this module*************/
#include <avr/io.h>
/*****************************************************************/

int main (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 option, count;

	SREG |= (1 << 7);/*enable global interrupt*/
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	/********UART dynamic configurations**********/
	UART_config UART_configurations;
	UART_setDynamicConfig(&UART_configurations);/*Set UART dynamic configurations*/
     b68:	ce 01       	movw	r24, r28
     b6a:	03 96       	adiw	r24, 0x03	; 3
     b6c:	0e 94 01 06 	call	0xc02	; 0xc02 <UART_setDynamicConfig>
	UART_init(&UART_configurations);/*initialize UART*/
     b70:	ce 01       	movw	r24, r28
     b72:	03 96       	adiw	r24, 0x03	; 3
     b74:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <UART_init>
	/**********************************************/

	/*********TIMER1 dynamic configurations****************//*it will call the callback function every 1sec*/
	TIMER1_setDynamicConfig(&g_TIMER1_configurations);
     b78:	88 ef       	ldi	r24, 0xF8	; 248
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 25 06 	call	0xc4a	; 0xc4a <TIMER1_setDynamicConfig>
	TIMER1_setCallBackFunction(tickIncrement);
     b80:	88 e8       	ldi	r24, 0x88	; 136
     b82:	97 e0       	ldi	r25, 0x07	; 7
     b84:	0e 94 44 13 	call	0x2688	; 0x2688 <TIMER1_setCallBackFunction>
	/*******************************************************/

	/******LCD initialization*******/
	LCD_init();
     b88:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_init>
	/*********************************/

	/****************wait until CONTROL_ECU is ready****************/
	while (UART_receiveByte() != CONTROL_ECU_READY)
     b8c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UART_receiveByte>
     b90:	8f 3f       	cpi	r24, 0xFF	; 255
     b92:	e1 f7       	brne	.-8      	; 0xb8c <main+0x46>
	{
	}
	/****************************************************************/

	doorLock_createNewPassword();
     b94:	0e 94 d6 07 	call	0xfac	; 0xfac <doorLock_createNewPassword>

	while (1)
	{

		option = doorLock_chooseOption();/*take the required option from user*/
     b98:	0e 94 63 07 	call	0xec6	; 0xec6 <doorLock_chooseOption>
     b9c:	8a 83       	std	Y+2, r24	; 0x02
		count = doorLock_3trialsPasswordCheck();/*give the user 3 trials only to enter the password correctly*/
     b9e:	0e 94 ff 07 	call	0xffe	; 0xffe <doorLock_3trialsPasswordCheck>
     ba2:	89 83       	std	Y+1, r24	; 0x01

		if (g_3trialsPasswordFlag)/*in case the user entered the correct password in any of the 3 trials*/
     ba4:	80 91 f4 00 	lds	r24, 0x00F4
     ba8:	88 23       	and	r24, r24
     baa:	c1 f0       	breq	.+48     	; 0xbdc <main+0x96>
		{
			g_3trialsPasswordFlag = 0;
     bac:	10 92 f4 00 	sts	0x00F4, r1
			switch (option)
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	3c 87       	std	Y+12, r19	; 0x0c
     bb8:	2b 87       	std	Y+11, r18	; 0x0b
     bba:	8b 85       	ldd	r24, Y+11	; 0x0b
     bbc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bbe:	8b 32       	cpi	r24, 0x2B	; 43
     bc0:	91 05       	cpc	r25, r1
     bc2:	31 f0       	breq	.+12     	; 0xbd0 <main+0x8a>
     bc4:	2b 85       	ldd	r18, Y+11	; 0x0b
     bc6:	3c 85       	ldd	r19, Y+12	; 0x0c
     bc8:	2d 32       	cpi	r18, 0x2D	; 45
     bca:	31 05       	cpc	r19, r1
     bcc:	21 f0       	breq	.+8      	; 0xbd6 <main+0x90>
     bce:	e4 cf       	rjmp	.-56     	; 0xb98 <main+0x52>
			{
			case OPEN_DOOR :
				doorLock_openDoor();
     bd0:	0e 94 ab 07 	call	0xf56	; 0xf56 <doorLock_openDoor>
     bd4:	e1 cf       	rjmp	.-62     	; 0xb98 <main+0x52>

				break;

			case CHANGE_PASSWORD :
				doorLock_createNewPassword();
     bd6:	0e 94 d6 07 	call	0xfac	; 0xfac <doorLock_createNewPassword>
     bda:	de cf       	rjmp	.-68     	; 0xb98 <main+0x52>
				break;
			}
		}
		else/*in case the user entered a wrong password for more than 3 trials*/
		{
			LCD_clearScreen();
     bdc:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_clearScreen>
			TIMER1_init(&g_TIMER1_configurations);
     be0:	88 ef       	ldi	r24, 0xF8	; 248
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 88 12 	call	0x2510	; 0x2510 <TIMER1_init>
			LCD_diplaystring("Wrong Password");
     be8:	80 e6       	ldi	r24, 0x60	; 96
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_diplaystring>
			delayInSec(60);/*delay for 1min*/
     bf0:	8c e3       	ldi	r24, 0x3C	; 60
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 94 07 	call	0xf28	; 0xf28 <delayInSec>
			TIMER1_deInit();
     bf8:	0e 94 56 13 	call	0x26ac	; 0x26ac <TIMER1_deInit>
			LCD_clearScreen();
     bfc:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_clearScreen>
     c00:	cb cf       	rjmp	.-106    	; 0xb98 <main+0x52>

00000c02 <UART_setDynamicConfig>:

/*
 * Description : Function to set UART dynamic configurations
 */
void UART_setDynamicConfig (UART_config *UART_configurations)
{
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	00 d0       	rcall	.+0      	; 0xc08 <UART_setDynamicConfig+0x6>
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	9a 83       	std	Y+2, r25	; 0x02
     c0e:	89 83       	std	Y+1, r24	; 0x01
	/********UART dynamic configurations**********/
	UART_configurations->UART_baudRate = 9600;
     c10:	e9 81       	ldd	r30, Y+1	; 0x01
     c12:	fa 81       	ldd	r31, Y+2	; 0x02
     c14:	80 e8       	ldi	r24, 0x80	; 128
     c16:	95 e2       	ldi	r25, 0x25	; 37
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	84 83       	std	Z+4, r24	; 0x04
     c1e:	95 83       	std	Z+5, r25	; 0x05
     c20:	a6 83       	std	Z+6, r26	; 0x06
     c22:	b7 83       	std	Z+7, r27	; 0x07
	UART_configurations->UART_nBitsDataMode = UART_8_BIT_DATA_MODE;
     c24:	e9 81       	ldd	r30, Y+1	; 0x01
     c26:	fa 81       	ldd	r31, Y+2	; 0x02
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	82 83       	std	Z+2, r24	; 0x02
	UART_configurations->UART_parity = UART_PARITY_OFF;
     c2c:	e9 81       	ldd	r30, Y+1	; 0x01
     c2e:	fa 81       	ldd	r31, Y+2	; 0x02
     c30:	10 82       	st	Z, r1
	UART_configurations->UART_stopBits = UART_1_STOP_BIT;
     c32:	e9 81       	ldd	r30, Y+1	; 0x01
     c34:	fa 81       	ldd	r31, Y+2	; 0x02
     c36:	11 82       	std	Z+1, r1	; 0x01
	UART_configurations->UART_transmissionSpeed = UART_doubleSpeed;
     c38:	e9 81       	ldd	r30, Y+1	; 0x01
     c3a:	fa 81       	ldd	r31, Y+2	; 0x02
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	83 83       	std	Z+3, r24	; 0x03
	/**********************************************/
}
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <TIMER1_setDynamicConfig>:

/*
 * Description : Function to set TIMER1 dynamic configurations
 */
void TIMER1_setDynamicConfig (TIMER1_ConfigType *TIMER1_configurations)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <TIMER1_setDynamicConfig+0x6>
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_configurations->mode = TIMER1_CTC_MODE;
     c58:	e9 81       	ldd	r30, Y+1	; 0x01
     c5a:	fa 81       	ldd	r31, Y+2	; 0x02
     c5c:	84 e0       	ldi	r24, 0x04	; 4
     c5e:	85 83       	std	Z+5, r24	; 0x05
	TIMER1_configurations->initial_value = 0;
     c60:	e9 81       	ldd	r30, Y+1	; 0x01
     c62:	fa 81       	ldd	r31, Y+2	; 0x02
     c64:	11 82       	std	Z+1, r1	; 0x01
     c66:	10 82       	st	Z, r1
	TIMER1_configurations->compare_value = 7812;
     c68:	e9 81       	ldd	r30, Y+1	; 0x01
     c6a:	fa 81       	ldd	r31, Y+2	; 0x02
     c6c:	84 e8       	ldi	r24, 0x84	; 132
     c6e:	9e e1       	ldi	r25, 0x1E	; 30
     c70:	93 83       	std	Z+3, r25	; 0x03
     c72:	82 83       	std	Z+2, r24	; 0x02
	TIMER1_configurations->prescaler = TIMER1_F_CPU_1024;
     c74:	e9 81       	ldd	r30, Y+1	; 0x01
     c76:	fa 81       	ldd	r31, Y+2	; 0x02
     c78:	85 e0       	ldi	r24, 0x05	; 5
     c7a:	84 83       	std	Z+4, r24	; 0x04
	TIMER1_configurations->TIMER1_OutputPinsNumberValue = 0;
     c7c:	e9 81       	ldd	r30, Y+1	; 0x01
     c7e:	fa 81       	ldd	r31, Y+2	; 0x02
     c80:	16 82       	std	Z+6, r1	; 0x06
	TIMER1_configurations->TIMER1_ctcModeOutputValueOnOC1A =
     c82:	e9 81       	ldd	r30, Y+1	; 0x01
     c84:	fa 81       	ldd	r31, Y+2	; 0x02
     c86:	17 82       	std	Z+7, r1	; 0x07
			TIMER1_CTC_MODE_NO_OUTPUT;
	TIMER1_configurations->TIMER1_ctcModeOutputValueOnOC1B =
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	10 86       	std	Z+8, r1	; 0x08
			TIMER1_CTC_MODE_NO_OUTPUT;
}
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <doorLock_sendPassword>:
 * Description : Function to
 * 1) get the password from keypad(user)
 * 2) send the password to CONTROL_ECU
 */
void doorLock_sendPassword (void)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	6e 97       	sbiw	r28, 0x1e	; 30
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
	uint8 count = 0, transmittedPass;
     cac:	1e 8e       	std	Y+30, r1	; 0x1e

	for (count = 0 ; count < PASSWORD_SIZE ; count++)
     cae:	1e 8e       	std	Y+30, r1	; 0x1e
     cb0:	81 c0       	rjmp	.+258    	; 0xdb4 <doorLock_sendPassword+0x11c>
	{
		do
		{
			transmittedPass = KEYPAD_getPressedKey();/*take an input from keypad*/
     cb2:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <KEYPAD_getPressedKey>
     cb6:	8d 8f       	std	Y+29, r24	; 0x1d
		} while (! (transmittedPass >= 0 && transmittedPass <= 9));/*In case the user clicks on a wrong button ==> wait for another input*/
     cb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cba:	8a 30       	cpi	r24, 0x0A	; 10
     cbc:	d0 f7       	brcc	.-12     	; 0xcb2 <doorLock_sendPassword+0x1a>

		LCD_displayCharacter('*');
     cbe:	8a e2       	ldi	r24, 0x2A	; 42
     cc0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_displayCharacter>
		UART_sendByte(transmittedPass);/*send the password byte by byte through UART*/
     cc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cc6:	0e 94 39 14 	call	0x2872	; 0x2872 <UART_sendByte>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	aa ef       	ldi	r26, 0xFA	; 250
     cd0:	b3 e4       	ldi	r27, 0x43	; 67
     cd2:	89 8f       	std	Y+25, r24	; 0x19
     cd4:	9a 8f       	std	Y+26, r25	; 0x1a
     cd6:	ab 8f       	std	Y+27, r26	; 0x1b
     cd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cda:	69 8d       	ldd	r22, Y+25	; 0x19
     cdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	4a ef       	ldi	r20, 0xFA	; 250
     ce8:	54 e4       	ldi	r21, 0x44	; 68
     cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	8d 8b       	std	Y+21, r24	; 0x15
     cf4:	9e 8b       	std	Y+22, r25	; 0x16
     cf6:	af 8b       	std	Y+23, r26	; 0x17
     cf8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cfa:	6d 89       	ldd	r22, Y+21	; 0x15
     cfc:	7e 89       	ldd	r23, Y+22	; 0x16
     cfe:	8f 89       	ldd	r24, Y+23	; 0x17
     d00:	98 8d       	ldd	r25, Y+24	; 0x18
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e8       	ldi	r20, 0x80	; 128
     d08:	5f e3       	ldi	r21, 0x3F	; 63
     d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d0e:	88 23       	and	r24, r24
     d10:	2c f4       	brge	.+10     	; 0xd1c <doorLock_sendPassword+0x84>
		__ticks = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	9c 8b       	std	Y+20, r25	; 0x14
     d18:	8b 8b       	std	Y+19, r24	; 0x13
     d1a:	3f c0       	rjmp	.+126    	; 0xd9a <doorLock_sendPassword+0x102>
	else if (__tmp > 65535)
     d1c:	6d 89       	ldd	r22, Y+21	; 0x15
     d1e:	7e 89       	ldd	r23, Y+22	; 0x16
     d20:	8f 89       	ldd	r24, Y+23	; 0x17
     d22:	98 8d       	ldd	r25, Y+24	; 0x18
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	3f ef       	ldi	r19, 0xFF	; 255
     d28:	4f e7       	ldi	r20, 0x7F	; 127
     d2a:	57 e4       	ldi	r21, 0x47	; 71
     d2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d30:	18 16       	cp	r1, r24
     d32:	4c f5       	brge	.+82     	; 0xd86 <doorLock_sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d34:	69 8d       	ldd	r22, Y+25	; 0x19
     d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 e2       	ldi	r20, 0x20	; 32
     d42:	51 e4       	ldi	r21, 0x41	; 65
     d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	bc 01       	movw	r22, r24
     d4e:	cd 01       	movw	r24, r26
     d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	9c 8b       	std	Y+20, r25	; 0x14
     d5a:	8b 8b       	std	Y+19, r24	; 0x13
     d5c:	0f c0       	rjmp	.+30     	; 0xd7c <doorLock_sendPassword+0xe4>
     d5e:	88 ec       	ldi	r24, 0xC8	; 200
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	9a 8b       	std	Y+18, r25	; 0x12
     d64:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d66:	89 89       	ldd	r24, Y+17	; 0x11
     d68:	9a 89       	ldd	r25, Y+18	; 0x12
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <doorLock_sendPassword+0xd2>
     d6e:	9a 8b       	std	Y+18, r25	; 0x12
     d70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d72:	8b 89       	ldd	r24, Y+19	; 0x13
     d74:	9c 89       	ldd	r25, Y+20	; 0x14
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	9c 8b       	std	Y+20, r25	; 0x14
     d7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7c:	8b 89       	ldd	r24, Y+19	; 0x13
     d7e:	9c 89       	ldd	r25, Y+20	; 0x14
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	69 f7       	brne	.-38     	; 0xd5e <doorLock_sendPassword+0xc6>
     d84:	14 c0       	rjmp	.+40     	; 0xdae <doorLock_sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d86:	6d 89       	ldd	r22, Y+21	; 0x15
     d88:	7e 89       	ldd	r23, Y+22	; 0x16
     d8a:	8f 89       	ldd	r24, Y+23	; 0x17
     d8c:	98 8d       	ldd	r25, Y+24	; 0x18
     d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	9c 8b       	std	Y+20, r25	; 0x14
     d98:	8b 8b       	std	Y+19, r24	; 0x13
     d9a:	8b 89       	ldd	r24, Y+19	; 0x13
     d9c:	9c 89       	ldd	r25, Y+20	; 0x14
     d9e:	98 8b       	std	Y+16, r25	; 0x10
     da0:	8f 87       	std	Y+15, r24	; 0x0f
     da2:	8f 85       	ldd	r24, Y+15	; 0x0f
     da4:	98 89       	ldd	r25, Y+16	; 0x10
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <doorLock_sendPassword+0x10e>
     daa:	98 8b       	std	Y+16, r25	; 0x10
     dac:	8f 87       	std	Y+15, r24	; 0x0f
 */
void doorLock_sendPassword (void)
{
	uint8 count = 0, transmittedPass;

	for (count = 0 ; count < PASSWORD_SIZE ; count++)
     dae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db0:	8f 5f       	subi	r24, 0xFF	; 255
     db2:	8e 8f       	std	Y+30, r24	; 0x1e
     db4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db6:	85 30       	cpi	r24, 0x05	; 5
     db8:	08 f4       	brcc	.+2      	; 0xdbc <doorLock_sendPassword+0x124>
     dba:	7b cf       	rjmp	.-266    	; 0xcb2 <doorLock_sendPassword+0x1a>
		_delay_ms(CLICK_PERIOD_IN_SEC);/*any click for 0.5sec will be counted as one click*/
	}

	do/*wait for enter button*/
	{
		transmittedPass = KEYPAD_getPressedKey();/*take an input from keypad*/
     dbc:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <KEYPAD_getPressedKey>
     dc0:	8d 8f       	std	Y+29, r24	; 0x1d
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	aa ef       	ldi	r26, 0xFA	; 250
     dc8:	b3 e4       	ldi	r27, 0x43	; 67
     dca:	8b 87       	std	Y+11, r24	; 0x0b
     dcc:	9c 87       	std	Y+12, r25	; 0x0c
     dce:	ad 87       	std	Y+13, r26	; 0x0d
     dd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	4a ef       	ldi	r20, 0xFA	; 250
     de0:	54 e4       	ldi	r21, 0x44	; 68
     de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	8f 83       	std	Y+7, r24	; 0x07
     dec:	98 87       	std	Y+8, r25	; 0x08
     dee:	a9 87       	std	Y+9, r26	; 0x09
     df0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     df2:	6f 81       	ldd	r22, Y+7	; 0x07
     df4:	78 85       	ldd	r23, Y+8	; 0x08
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e8       	ldi	r20, 0x80	; 128
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e06:	88 23       	and	r24, r24
     e08:	2c f4       	brge	.+10     	; 0xe14 <doorLock_sendPassword+0x17c>
		__ticks = 1;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9e 83       	std	Y+6, r25	; 0x06
     e10:	8d 83       	std	Y+5, r24	; 0x05
     e12:	3f c0       	rjmp	.+126    	; 0xe92 <doorLock_sendPassword+0x1fa>
	else if (__tmp > 65535)
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	3f ef       	ldi	r19, 0xFF	; 255
     e20:	4f e7       	ldi	r20, 0x7F	; 127
     e22:	57 e4       	ldi	r21, 0x47	; 71
     e24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e28:	18 16       	cp	r1, r24
     e2a:	4c f5       	brge	.+82     	; 0xe7e <doorLock_sendPassword+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e30:	8d 85       	ldd	r24, Y+13	; 0x0d
     e32:	9e 85       	ldd	r25, Y+14	; 0x0e
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e2       	ldi	r20, 0x20	; 32
     e3a:	51 e4       	ldi	r21, 0x41	; 65
     e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	bc 01       	movw	r22, r24
     e46:	cd 01       	movw	r24, r26
     e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	9e 83       	std	Y+6, r25	; 0x06
     e52:	8d 83       	std	Y+5, r24	; 0x05
     e54:	0f c0       	rjmp	.+30     	; 0xe74 <doorLock_sendPassword+0x1dc>
     e56:	88 ec       	ldi	r24, 0xC8	; 200
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	8b 83       	std	Y+3, r24	; 0x03
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <doorLock_sendPassword+0x1ca>
     e66:	9c 83       	std	Y+4, r25	; 0x04
     e68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	9e 83       	std	Y+6, r25	; 0x06
     e72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	9e 81       	ldd	r25, Y+6	; 0x06
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	69 f7       	brne	.-38     	; 0xe56 <doorLock_sendPassword+0x1be>
     e7c:	14 c0       	rjmp	.+40     	; 0xea6 <doorLock_sendPassword+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7e:	6f 81       	ldd	r22, Y+7	; 0x07
     e80:	78 85       	ldd	r23, Y+8	; 0x08
     e82:	89 85       	ldd	r24, Y+9	; 0x09
     e84:	9a 85       	ldd	r25, Y+10	; 0x0a
     e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	9e 81       	ldd	r25, Y+6	; 0x06
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <doorLock_sendPassword+0x206>
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(CLICK_PERIOD_IN_SEC);/*all clicks for 0.5sec will be counted as one click*/

	} while (transmittedPass != 13);/*ASCII of enter*/
     ea6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea8:	8d 30       	cpi	r24, 0x0D	; 13
     eaa:	09 f0       	breq	.+2      	; 0xeae <doorLock_sendPassword+0x216>
     eac:	87 cf       	rjmp	.-242    	; 0xdbc <doorLock_sendPassword+0x124>
	UART_sendByte(transmittedPass);/*send enter to make CONTROL_ECU know that the user finished entering the password*/
     eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb0:	0e 94 39 14 	call	0x2872	; 0x2872 <UART_sendByte>

}
     eb4:	6e 96       	adiw	r28, 0x1e	; 30
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <doorLock_chooseOption>:
/*
 * Description : Function to wait until the user enters the required option and send this option to CONTROL_ECU
 * and return the option to HMI_ECU as well
 */
uint8 doorLock_chooseOption (void)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
	uint8 option = 0;
     ed0:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
     ed2:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_clearScreen>
	LCD_displayStringRowColumn("+ : Open Door", 0, 0);
     ed6:	8f e6       	ldi	r24, 0x6F	; 111
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn("- : Change Pass", 1, 0);
     ee2:	8d e7       	ldi	r24, 0x7D	; 125
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_displayStringRowColumn>
	do
	{
		option = KEYPAD_getPressedKey();
     eee:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <KEYPAD_getPressedKey>
     ef2:	89 83       	std	Y+1, r24	; 0x01
	} while (option != '+' && option != '-');/*In case the user clicks on a wrong button ==> wait for another input*/
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	8b 32       	cpi	r24, 0x2B	; 43
     ef8:	19 f0       	breq	.+6      	; 0xf00 <doorLock_chooseOption+0x3a>
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	8d 32       	cpi	r24, 0x2D	; 45
     efe:	b9 f7       	brne	.-18     	; 0xeee <doorLock_chooseOption+0x28>
	UART_sendByte(option);/*send the required option to CONTROL_ECU*/
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	0e 94 39 14 	call	0x2872	; 0x2872 <UART_sendByte>
	return option;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
}
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <tickIncrement>:

/*
 * Description : Function to increment g_tick every compare match [callback function]
 */
void tickIncrement (void)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     f18:	80 91 f5 00 	lds	r24, 0x00F5
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	80 93 f5 00 	sts	0x00F5, r24
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <delayInSec>:

/*
 * Description : Function to make a delay for specific time in seconds
 */
void delayInSec (uint16 timeInSec)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <delayInSec+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	/*************wait for timeInSec***********/
	while (g_tick < timeInSec)
     f36:	80 91 f5 00 	lds	r24, 0x00F5
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	28 17       	cp	r18, r24
     f44:	39 07       	cpc	r19, r25
     f46:	b8 f3       	brcs	.-18     	; 0xf36 <delayInSec+0xe>
	{
	}
	g_tick = 0;
     f48:	10 92 f5 00 	sts	0x00F5, r1
	/*****************************************/
}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <doorLock_openDoor>:

/*
 * Description : Function to display the door state
 */
void doorLock_openDoor (void)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	TIMER1_init(&g_TIMER1_configurations);/*it will call the callback function every 1sec*/
     f5e:	88 ef       	ldi	r24, 0xF8	; 248
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 88 12 	call	0x2510	; 0x2510 <TIMER1_init>
	LCD_clearScreen();
     f66:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_clearScreen>
	LCD_diplaystring("Door is Unlocking");
     f6a:	8d e8       	ldi	r24, 0x8D	; 141
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_diplaystring>
	delayInSec(15);/*wait for 15sec*/
     f72:	8f e0       	ldi	r24, 0x0F	; 15
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 94 07 	call	0xf28	; 0xf28 <delayInSec>
	LCD_clearScreen();
     f7a:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_clearScreen>
	LCD_diplaystring("Door is Opened");
     f7e:	8f e9       	ldi	r24, 0x9F	; 159
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_diplaystring>
	delayInSec(3);/*hold for 3sec*/
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 94 07 	call	0xf28	; 0xf28 <delayInSec>
	LCD_clearScreen();
     f8e:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_clearScreen>
	LCD_diplaystring("Door is Locking ");
     f92:	8e ea       	ldi	r24, 0xAE	; 174
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_diplaystring>
	delayInSec(15);/*wait for 15sec*/
     f9a:	8f e0       	ldi	r24, 0x0F	; 15
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 94 07 	call	0xf28	; 0xf28 <delayInSec>
	TIMER1_deInit();
     fa2:	0e 94 56 13 	call	0x26ac	; 0x26ac <TIMER1_deInit>
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <doorLock_createNewPassword>:

/*
 * Description : Function to create new password
 */
void doorLock_createNewPassword (void)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	/****************************repeat this loop in case the entered 2 passwords are not identical****************************/
	do
	{
		LCD_clearScreen();
     fb4:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_clearScreen>
		LCD_diplaystring("plz enter pass:");
     fb8:	8f eb       	ldi	r24, 0xBF	; 191
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_diplaystring>
		LCD_moveCursor(1, 0);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_moveCursor>
		doorLock_sendPassword();/*send the password for the first time*/
     fc8:	0e 94 4c 06 	call	0xc98	; 0xc98 <doorLock_sendPassword>
		LCD_displayStringRowColumn("plz re-enter the", 0, 0);
     fcc:	8f ec       	ldi	r24, 0xCF	; 207
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn("same pass: ", 1, 0);
     fd8:	80 ee       	ldi	r24, 0xE0	; 224
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_displayStringRowColumn>
		doorLock_sendPassword();/*send the password for the second time*/
     fe4:	0e 94 4c 06 	call	0xc98	; 0xc98 <doorLock_sendPassword>
	} while (UART_receiveByte() == PASSWORDS_NOT_IDENTICAL);/*receive the state of comparing 2 passwords from CONTROL_ECU*/
     fe8:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UART_receiveByte>
     fec:	88 23       	and	r24, r24
     fee:	11 f3       	breq	.-60     	; 0xfb4 <doorLock_createNewPassword+0x8>
	/************************************************************************************************************************/
	/****************wait until CONTROL_ECU is ready****************/
	while (UART_receiveByte() != CONTROL_ECU_READY)
     ff0:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UART_receiveByte>
     ff4:	8f 3f       	cpi	r24, 0xFF	; 255
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <doorLock_createNewPassword+0x44>
	{
	}
	/****************************************************************/
}
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <doorLock_3trialsPasswordCheck>:
/*
 * Description : Function to check the entered password(for the third time) in order to do specific option
 * in case the user failed to enter the password correctly in the 3 trials then we have to return to the main options
 */
uint8 doorLock_3trialsPasswordCheck (void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <doorLock_3trialsPasswordCheck+0x6>
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	uint8 count, passwordState = DUMMY_VALUE;
    1008:	80 ef       	ldi	r24, 0xF0	; 240
    100a:	89 83       	std	Y+1, r24	; 0x01
	/* we make the fourth loop
	 * in order to check the password that it is entered for the third time*/
	for (count = 0 ; count <= NUMBER_OF_PASSWORD_TRIALS ; count++)
    100c:	1a 82       	std	Y+2, r1	; 0x02
    100e:	1c c0       	rjmp	.+56     	; 0x1048 <doorLock_3trialsPasswordCheck+0x4a>
	{
		if (passwordState == PASSWORDS_IDENTICAL)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	21 f4       	brne	.+8      	; 0x101e <doorLock_3trialsPasswordCheck+0x20>
		{
			g_3trialsPasswordFlag = PASSWORDS_IDENTICAL;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	80 93 f4 00 	sts	0x00F4, r24
    101c:	18 c0       	rjmp	.+48     	; 0x104e <doorLock_3trialsPasswordCheck+0x50>
			break;
		}
		else if (count < 3)/*in case the 2 passwords are not identical and count<3*/
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	78 f4       	brcc	.+30     	; 0x1042 <doorLock_3trialsPasswordCheck+0x44>
		{
			LCD_clearScreen();
    1024:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_clearScreen>
			LCD_diplaystring("plz enter pass:");
    1028:	8f eb       	ldi	r24, 0xBF	; 191
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_diplaystring>
			LCD_moveCursor(1, 0);
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_moveCursor>
			doorLock_sendPassword();/*send the password to CONTROL_ECU*/
    1038:	0e 94 4c 06 	call	0xc98	; 0xc98 <doorLock_sendPassword>
			passwordState = UART_receiveByte();
    103c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UART_receiveByte>
    1040:	89 83       	std	Y+1, r24	; 0x01
uint8 doorLock_3trialsPasswordCheck (void)
{
	uint8 count, passwordState = DUMMY_VALUE;
	/* we make the fourth loop
	 * in order to check the password that it is entered for the third time*/
	for (count = 0 ; count <= NUMBER_OF_PASSWORD_TRIALS ; count++)
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	8a 83       	std	Y+2, r24	; 0x02
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	84 30       	cpi	r24, 0x04	; 4
    104c:	08 f3       	brcs	.-62     	; 0x1010 <doorLock_3trialsPasswordCheck+0x12>
			LCD_moveCursor(1, 0);
			doorLock_sendPassword();/*send the password to CONTROL_ECU*/
			passwordState = UART_receiveByte();
		}
	}
	return g_3trialsPasswordFlag;
    104e:	80 91 f4 00 	lds	r24, 0x00F4
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <GPIO_setupPinDirection+0x6>
    1062:	00 d0       	rcall	.+0      	; 0x1064 <GPIO_setupPinDirection+0x8>
    1064:	0f 92       	push	r0
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	6a 83       	std	Y+2, r22	; 0x02
    106e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	88 30       	cpi	r24, 0x08	; 8
    1074:	08 f0       	brcs	.+2      	; 0x1078 <GPIO_setupPinDirection+0x1c>
    1076:	d5 c0       	rjmp	.+426    	; 0x1222 <GPIO_setupPinDirection+0x1c6>
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	84 30       	cpi	r24, 0x04	; 4
    107c:	08 f0       	brcs	.+2      	; 0x1080 <GPIO_setupPinDirection+0x24>
    107e:	d1 c0       	rjmp	.+418    	; 0x1222 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	3d 83       	std	Y+5, r19	; 0x05
    1088:	2c 83       	std	Y+4, r18	; 0x04
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	9d 81       	ldd	r25, Y+5	; 0x05
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	91 05       	cpc	r25, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <GPIO_setupPinDirection+0x3a>
    1094:	43 c0       	rjmp	.+134    	; 0x111c <GPIO_setupPinDirection+0xc0>
    1096:	2c 81       	ldd	r18, Y+4	; 0x04
    1098:	3d 81       	ldd	r19, Y+5	; 0x05
    109a:	22 30       	cpi	r18, 0x02	; 2
    109c:	31 05       	cpc	r19, r1
    109e:	2c f4       	brge	.+10     	; 0x10aa <GPIO_setupPinDirection+0x4e>
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	71 f0       	breq	.+28     	; 0x10c4 <GPIO_setupPinDirection+0x68>
    10a8:	bc c0       	rjmp	.+376    	; 0x1222 <GPIO_setupPinDirection+0x1c6>
    10aa:	2c 81       	ldd	r18, Y+4	; 0x04
    10ac:	3d 81       	ldd	r19, Y+5	; 0x05
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <GPIO_setupPinDirection+0x5a>
    10b4:	5f c0       	rjmp	.+190    	; 0x1174 <GPIO_setupPinDirection+0x118>
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	91 05       	cpc	r25, r1
    10be:	09 f4       	brne	.+2      	; 0x10c2 <GPIO_setupPinDirection+0x66>
    10c0:	85 c0       	rjmp	.+266    	; 0x11cc <GPIO_setupPinDirection+0x170>
    10c2:	af c0       	rjmp	.+350    	; 0x1222 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10ca:	aa e3       	ldi	r26, 0x3A	; 58
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ea e3       	ldi	r30, 0x3A	; 58
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <GPIO_setupPinDirection+0x8c>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <GPIO_setupPinDirection+0x88>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	98 c0       	rjmp	.+304    	; 0x1222 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10f2:	aa e3       	ldi	r26, 0x3A	; 58
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ea e3       	ldi	r30, 0x3A	; 58
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <GPIO_setupPinDirection+0xb4>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <GPIO_setupPinDirection+0xb0>
    1114:	80 95       	com	r24
    1116:	84 23       	and	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	83 c0       	rjmp	.+262    	; 0x1222 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	a1 f4       	brne	.+40     	; 0x114a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1122:	a7 e3       	ldi	r26, 0x37	; 55
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e7 e3       	ldi	r30, 0x37	; 55
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <GPIO_setupPinDirection+0xe4>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <GPIO_setupPinDirection+0xe0>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	6c c0       	rjmp	.+216    	; 0x1222 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    114a:	a7 e3       	ldi	r26, 0x37	; 55
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e7 e3       	ldi	r30, 0x37	; 55
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_setupPinDirection+0x10c>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_setupPinDirection+0x108>
    116c:	80 95       	com	r24
    116e:	84 23       	and	r24, r20
    1170:	8c 93       	st	X, r24
    1172:	57 c0       	rjmp	.+174    	; 0x1222 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	a1 f4       	brne	.+40     	; 0x11a2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    117a:	a4 e3       	ldi	r26, 0x34	; 52
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e4 e3       	ldi	r30, 0x34	; 52
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <GPIO_setupPinDirection+0x13c>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <GPIO_setupPinDirection+0x138>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	40 c0       	rjmp	.+128    	; 0x1222 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    11a2:	a4 e3       	ldi	r26, 0x34	; 52
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e4 e3       	ldi	r30, 0x34	; 52
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_setupPinDirection+0x164>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_setupPinDirection+0x160>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	2b c0       	rjmp	.+86     	; 0x1222 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	a1 f4       	brne	.+40     	; 0x11fa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11d2:	a1 e3       	ldi	r26, 0x31	; 49
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e1 e3       	ldi	r30, 0x31	; 49
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <GPIO_setupPinDirection+0x194>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <GPIO_setupPinDirection+0x190>
    11f4:	84 2b       	or	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	14 c0       	rjmp	.+40     	; 0x1222 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11fa:	a1 e3       	ldi	r26, 0x31	; 49
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e1 e3       	ldi	r30, 0x31	; 49
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <GPIO_setupPinDirection+0x1bc>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <GPIO_setupPinDirection+0x1b8>
    121c:	80 95       	com	r24
    121e:	84 23       	and	r24, r20
    1220:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <GPIO_writePin+0x6>
    1238:	00 d0       	rcall	.+0      	; 0x123a <GPIO_writePin+0x8>
    123a:	0f 92       	push	r0
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	6a 83       	std	Y+2, r22	; 0x02
    1244:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	88 30       	cpi	r24, 0x08	; 8
    124a:	08 f0       	brcs	.+2      	; 0x124e <GPIO_writePin+0x1c>
    124c:	d5 c0       	rjmp	.+426    	; 0x13f8 <GPIO_writePin+0x1c6>
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	08 f0       	brcs	.+2      	; 0x1256 <GPIO_writePin+0x24>
    1254:	d1 c0       	rjmp	.+418    	; 0x13f8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3d 83       	std	Y+5, r19	; 0x05
    125e:	2c 83       	std	Y+4, r18	; 0x04
    1260:	8c 81       	ldd	r24, Y+4	; 0x04
    1262:	9d 81       	ldd	r25, Y+5	; 0x05
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	91 05       	cpc	r25, r1
    1268:	09 f4       	brne	.+2      	; 0x126c <GPIO_writePin+0x3a>
    126a:	43 c0       	rjmp	.+134    	; 0x12f2 <GPIO_writePin+0xc0>
    126c:	2c 81       	ldd	r18, Y+4	; 0x04
    126e:	3d 81       	ldd	r19, Y+5	; 0x05
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	2c f4       	brge	.+10     	; 0x1280 <GPIO_writePin+0x4e>
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	9d 81       	ldd	r25, Y+5	; 0x05
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	71 f0       	breq	.+28     	; 0x129a <GPIO_writePin+0x68>
    127e:	bc c0       	rjmp	.+376    	; 0x13f8 <GPIO_writePin+0x1c6>
    1280:	2c 81       	ldd	r18, Y+4	; 0x04
    1282:	3d 81       	ldd	r19, Y+5	; 0x05
    1284:	22 30       	cpi	r18, 0x02	; 2
    1286:	31 05       	cpc	r19, r1
    1288:	09 f4       	brne	.+2      	; 0x128c <GPIO_writePin+0x5a>
    128a:	5f c0       	rjmp	.+190    	; 0x134a <GPIO_writePin+0x118>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	09 f4       	brne	.+2      	; 0x1298 <GPIO_writePin+0x66>
    1296:	85 c0       	rjmp	.+266    	; 0x13a2 <GPIO_writePin+0x170>
    1298:	af c0       	rjmp	.+350    	; 0x13f8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	a1 f4       	brne	.+40     	; 0x12c8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    12a0:	ab e3       	ldi	r26, 0x3B	; 59
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	eb e3       	ldi	r30, 0x3B	; 59
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_writePin+0x8c>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_writePin+0x88>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	98 c0       	rjmp	.+304    	; 0x13f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12c8:	ab e3       	ldi	r26, 0x3B	; 59
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	eb e3       	ldi	r30, 0x3B	; 59
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <GPIO_writePin+0xb4>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <GPIO_writePin+0xb0>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	83 c0       	rjmp	.+262    	; 0x13f8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	a1 f4       	brne	.+40     	; 0x1320 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12f8:	a8 e3       	ldi	r26, 0x38	; 56
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e8 e3       	ldi	r30, 0x38	; 56
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_writePin+0xe4>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_writePin+0xe0>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	6c c0       	rjmp	.+216    	; 0x13f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1320:	a8 e3       	ldi	r26, 0x38	; 56
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e8 e3       	ldi	r30, 0x38	; 56
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <GPIO_writePin+0x10c>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <GPIO_writePin+0x108>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	57 c0       	rjmp	.+174    	; 0x13f8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	a1 f4       	brne	.+40     	; 0x1378 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1350:	a5 e3       	ldi	r26, 0x35	; 53
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e5 e3       	ldi	r30, 0x35	; 53
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <GPIO_writePin+0x13c>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <GPIO_writePin+0x138>
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	40 c0       	rjmp	.+128    	; 0x13f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1378:	a5 e3       	ldi	r26, 0x35	; 53
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e3       	ldi	r30, 0x35	; 53
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GPIO_writePin+0x164>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <GPIO_writePin+0x160>
    139a:	80 95       	com	r24
    139c:	84 23       	and	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	2b c0       	rjmp	.+86     	; 0x13f8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	a1 f4       	brne	.+40     	; 0x13d0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    13a8:	a2 e3       	ldi	r26, 0x32	; 50
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e2 e3       	ldi	r30, 0x32	; 50
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <GPIO_writePin+0x194>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <GPIO_writePin+0x190>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	14 c0       	rjmp	.+40     	; 0x13f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13d0:	a2 e3       	ldi	r26, 0x32	; 50
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e2 e3       	ldi	r30, 0x32	; 50
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <GPIO_writePin+0x1bc>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <GPIO_writePin+0x1b8>
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	00 d0       	rcall	.+0      	; 0x140e <GPIO_readPin+0x6>
    140e:	00 d0       	rcall	.+0      	; 0x1410 <GPIO_readPin+0x8>
    1410:	0f 92       	push	r0
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	8a 83       	std	Y+2, r24	; 0x02
    1418:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    141a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	88 30       	cpi	r24, 0x08	; 8
    1420:	08 f0       	brcs	.+2      	; 0x1424 <GPIO_readPin+0x1c>
    1422:	84 c0       	rjmp	.+264    	; 0x152c <GPIO_readPin+0x124>
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	08 f0       	brcs	.+2      	; 0x142c <GPIO_readPin+0x24>
    142a:	80 c0       	rjmp	.+256    	; 0x152c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	3d 83       	std	Y+5, r19	; 0x05
    1434:	2c 83       	std	Y+4, r18	; 0x04
    1436:	4c 81       	ldd	r20, Y+4	; 0x04
    1438:	5d 81       	ldd	r21, Y+5	; 0x05
    143a:	41 30       	cpi	r20, 0x01	; 1
    143c:	51 05       	cpc	r21, r1
    143e:	79 f1       	breq	.+94     	; 0x149e <GPIO_readPin+0x96>
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	91 05       	cpc	r25, r1
    1448:	34 f4       	brge	.+12     	; 0x1456 <GPIO_readPin+0x4e>
    144a:	2c 81       	ldd	r18, Y+4	; 0x04
    144c:	3d 81       	ldd	r19, Y+5	; 0x05
    144e:	21 15       	cp	r18, r1
    1450:	31 05       	cpc	r19, r1
    1452:	69 f0       	breq	.+26     	; 0x146e <GPIO_readPin+0x66>
    1454:	6b c0       	rjmp	.+214    	; 0x152c <GPIO_readPin+0x124>
    1456:	4c 81       	ldd	r20, Y+4	; 0x04
    1458:	5d 81       	ldd	r21, Y+5	; 0x05
    145a:	42 30       	cpi	r20, 0x02	; 2
    145c:	51 05       	cpc	r21, r1
    145e:	b9 f1       	breq	.+110    	; 0x14ce <GPIO_readPin+0xc6>
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	83 30       	cpi	r24, 0x03	; 3
    1466:	91 05       	cpc	r25, r1
    1468:	09 f4       	brne	.+2      	; 0x146c <GPIO_readPin+0x64>
    146a:	49 c0       	rjmp	.+146    	; 0x14fe <GPIO_readPin+0xf6>
    146c:	5f c0       	rjmp	.+190    	; 0x152c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    146e:	e9 e3       	ldi	r30, 0x39	; 57
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a9 01       	movw	r20, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <GPIO_readPin+0x7e>
    1482:	55 95       	asr	r21
    1484:	47 95       	ror	r20
    1486:	8a 95       	dec	r24
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <GPIO_readPin+0x7a>
    148a:	ca 01       	movw	r24, r20
    148c:	81 70       	andi	r24, 0x01	; 1
    148e:	90 70       	andi	r25, 0x00	; 0
    1490:	88 23       	and	r24, r24
    1492:	19 f0       	breq	.+6      	; 0x149a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	49 c0       	rjmp	.+146    	; 0x152c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    149a:	19 82       	std	Y+1, r1	; 0x01
    149c:	47 c0       	rjmp	.+142    	; 0x152c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    149e:	e6 e3       	ldi	r30, 0x36	; 54
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a9 01       	movw	r20, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <GPIO_readPin+0xae>
    14b2:	55 95       	asr	r21
    14b4:	47 95       	ror	r20
    14b6:	8a 95       	dec	r24
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <GPIO_readPin+0xaa>
    14ba:	ca 01       	movw	r24, r20
    14bc:	81 70       	andi	r24, 0x01	; 1
    14be:	90 70       	andi	r25, 0x00	; 0
    14c0:	88 23       	and	r24, r24
    14c2:	19 f0       	breq	.+6      	; 0x14ca <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	31 c0       	rjmp	.+98     	; 0x152c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14ca:	19 82       	std	Y+1, r1	; 0x01
    14cc:	2f c0       	rjmp	.+94     	; 0x152c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14ce:	e3 e3       	ldi	r30, 0x33	; 51
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a9 01       	movw	r20, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <GPIO_readPin+0xde>
    14e2:	55 95       	asr	r21
    14e4:	47 95       	ror	r20
    14e6:	8a 95       	dec	r24
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <GPIO_readPin+0xda>
    14ea:	ca 01       	movw	r24, r20
    14ec:	81 70       	andi	r24, 0x01	; 1
    14ee:	90 70       	andi	r25, 0x00	; 0
    14f0:	88 23       	and	r24, r24
    14f2:	19 f0       	breq	.+6      	; 0x14fa <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	19 c0       	rjmp	.+50     	; 0x152c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14fa:	19 82       	std	Y+1, r1	; 0x01
    14fc:	17 c0       	rjmp	.+46     	; 0x152c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14fe:	e0 e3       	ldi	r30, 0x30	; 48
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <GPIO_readPin+0x10e>
    1512:	55 95       	asr	r21
    1514:	47 95       	ror	r20
    1516:	8a 95       	dec	r24
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <GPIO_readPin+0x10a>
    151a:	ca 01       	movw	r24, r20
    151c:	81 70       	andi	r24, 0x01	; 1
    151e:	90 70       	andi	r25, 0x00	; 0
    1520:	88 23       	and	r24, r24
    1522:	19 f0       	breq	.+6      	; 0x152a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	01 c0       	rjmp	.+2      	; 0x152c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    152a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    152c:	89 81       	ldd	r24, Y+1	; 0x01
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <GPIO_setupPortDirection+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <GPIO_setupPortDirection+0x8>
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	90 f5       	brcc	.+100    	; 0x15b8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	3c 83       	std	Y+4, r19	; 0x04
    155c:	2b 83       	std	Y+3, r18	; 0x03
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	91 05       	cpc	r25, r1
    1566:	d1 f0       	breq	.+52     	; 0x159c <GPIO_setupPortDirection+0x5e>
    1568:	2b 81       	ldd	r18, Y+3	; 0x03
    156a:	3c 81       	ldd	r19, Y+4	; 0x04
    156c:	22 30       	cpi	r18, 0x02	; 2
    156e:	31 05       	cpc	r19, r1
    1570:	2c f4       	brge	.+10     	; 0x157c <GPIO_setupPortDirection+0x3e>
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	61 f0       	breq	.+24     	; 0x1592 <GPIO_setupPortDirection+0x54>
    157a:	1e c0       	rjmp	.+60     	; 0x15b8 <GPIO_setupPortDirection+0x7a>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	81 f0       	breq	.+32     	; 0x15a6 <GPIO_setupPortDirection+0x68>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	83 30       	cpi	r24, 0x03	; 3
    158c:	91 05       	cpc	r25, r1
    158e:	81 f0       	breq	.+32     	; 0x15b0 <GPIO_setupPortDirection+0x72>
    1590:	13 c0       	rjmp	.+38     	; 0x15b8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1592:	ea e3       	ldi	r30, 0x3A	; 58
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	80 83       	st	Z, r24
    159a:	0e c0       	rjmp	.+28     	; 0x15b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    159c:	e7 e3       	ldi	r30, 0x37	; 55
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	80 83       	st	Z, r24
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15a6:	e4 e3       	ldi	r30, 0x34	; 52
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	80 83       	st	Z, r24
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15b0:	e1 e3       	ldi	r30, 0x31	; 49
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	80 83       	st	Z, r24
			break;
		}
	}
}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <GPIO_writePort+0x6>
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <GPIO_writePort+0x8>
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	84 30       	cpi	r24, 0x04	; 4
    15da:	90 f5       	brcc	.+100    	; 0x1640 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3c 83       	std	Y+4, r19	; 0x04
    15e4:	2b 83       	std	Y+3, r18	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	91 05       	cpc	r25, r1
    15ee:	d1 f0       	breq	.+52     	; 0x1624 <GPIO_writePort+0x5e>
    15f0:	2b 81       	ldd	r18, Y+3	; 0x03
    15f2:	3c 81       	ldd	r19, Y+4	; 0x04
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	2c f4       	brge	.+10     	; 0x1604 <GPIO_writePort+0x3e>
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	61 f0       	breq	.+24     	; 0x161a <GPIO_writePort+0x54>
    1602:	1e c0       	rjmp	.+60     	; 0x1640 <GPIO_writePort+0x7a>
    1604:	2b 81       	ldd	r18, Y+3	; 0x03
    1606:	3c 81       	ldd	r19, Y+4	; 0x04
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	81 f0       	breq	.+32     	; 0x162e <GPIO_writePort+0x68>
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	81 f0       	breq	.+32     	; 0x1638 <GPIO_writePort+0x72>
    1618:	13 c0       	rjmp	.+38     	; 0x1640 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    161a:	eb e3       	ldi	r30, 0x3B	; 59
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	80 83       	st	Z, r24
    1622:	0e c0       	rjmp	.+28     	; 0x1640 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1624:	e8 e3       	ldi	r30, 0x38	; 56
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	80 83       	st	Z, r24
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    162e:	e5 e3       	ldi	r30, 0x35	; 53
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	80 83       	st	Z, r24
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1638:	e2 e3       	ldi	r30, 0x32	; 50
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	00 d0       	rcall	.+0      	; 0x1654 <GPIO_readPort+0x6>
    1654:	00 d0       	rcall	.+0      	; 0x1656 <GPIO_readPort+0x8>
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    165c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	84 30       	cpi	r24, 0x04	; 4
    1662:	90 f5       	brcc	.+100    	; 0x16c8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	3c 83       	std	Y+4, r19	; 0x04
    166c:	2b 83       	std	Y+3, r18	; 0x03
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	91 05       	cpc	r25, r1
    1676:	d1 f0       	breq	.+52     	; 0x16ac <GPIO_readPort+0x5e>
    1678:	2b 81       	ldd	r18, Y+3	; 0x03
    167a:	3c 81       	ldd	r19, Y+4	; 0x04
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	31 05       	cpc	r19, r1
    1680:	2c f4       	brge	.+10     	; 0x168c <GPIO_readPort+0x3e>
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	61 f0       	breq	.+24     	; 0x16a2 <GPIO_readPort+0x54>
    168a:	1e c0       	rjmp	.+60     	; 0x16c8 <GPIO_readPort+0x7a>
    168c:	2b 81       	ldd	r18, Y+3	; 0x03
    168e:	3c 81       	ldd	r19, Y+4	; 0x04
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	81 f0       	breq	.+32     	; 0x16b6 <GPIO_readPort+0x68>
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	91 05       	cpc	r25, r1
    169e:	81 f0       	breq	.+32     	; 0x16c0 <GPIO_readPort+0x72>
    16a0:	13 c0       	rjmp	.+38     	; 0x16c8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    16a2:	e9 e3       	ldi	r30, 0x39	; 57
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	0e c0       	rjmp	.+28     	; 0x16c8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16ac:	e6 e3       	ldi	r30, 0x36	; 54
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16b6:	e3 e3       	ldi	r30, 0x33	; 51
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	04 c0       	rjmp	.+8      	; 0x16c8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16c0:	e0 e3       	ldi	r30, 0x30	; 48
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <KEYPAD_getPressedKey>:
/*
 * Description : Function to scan the keypad and return value of the pressed button
 */

uint8 KEYPAD_getPressedKey (void)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	61 97       	sbiw	r28, 0x11	; 17
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
	uint8 row, column, buttonNum;

	/*************configure column pins as output pins*************/
	GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID,
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	64 e0       	ldi	r22, 0x04	; 4
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	KEYPAD_COLUMN_START_PIN_ID, PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID,
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	65 e0       	ldi	r22, 0x05	; 5
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	KEYPAD_COLUMN_START_PIN_ID + 1, PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID,
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	66 e0       	ldi	r22, 0x06	; 6
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	KEYPAD_COLUMN_START_PIN_ID + 2, PIN_INPUT);
#if KEYPAD_COLUMNS_NUMBER == 4
	GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID,
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	67 e0       	ldi	r22, 0x07	; 7
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	KEYPAD_COLUMN_START_PIN_ID + 3, PIN_INPUT);
#endif
	/*****************************************************************/

	/*************configure row pins as output pins*************/
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	KEYPAD_ROW_START_PIN_ID, PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	KEYPAD_ROW_START_PIN_ID + 1, PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	62 e0       	ldi	r22, 0x02	; 2
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	KEYPAD_ROW_START_PIN_ID + 2, PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	63 e0       	ldi	r22, 0x03	; 3
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	KEYPAD_ROW_START_PIN_ID + 3, PIN_INPUT);
	/*****************************************************************/
	while (1)
	{
		for (row = 0 ; row < KEYPAD_ROWS_NUMBER ; row++)
    173c:	19 8a       	std	Y+17, r1	; 0x11
    173e:	ad c0       	rjmp	.+346    	; 0x189a <KEYPAD_getPressedKey+0x1c2>
		{
			/***********make the row output pin  and set or clear the row pin according to pull-up or pull-down***********/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	69 89       	ldd	r22, Y+17	; 0x11
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
			KEYPAD_ROW_START_PIN_ID + row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID,
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	69 89       	ldd	r22, Y+17	; 0x11
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	0e 94 19 09 	call	0x1232	; 0x1232 <GPIO_writePin>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a0 e7       	ldi	r26, 0x70	; 112
    175a:	b2 e4       	ldi	r27, 0x42	; 66
    175c:	8b 87       	std	Y+11, r24	; 0x0b
    175e:	9c 87       	std	Y+12, r25	; 0x0c
    1760:	ad 87       	std	Y+13, r26	; 0x0d
    1762:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1764:	6b 85       	ldd	r22, Y+11	; 0x0b
    1766:	7c 85       	ldd	r23, Y+12	; 0x0c
    1768:	8d 85       	ldd	r24, Y+13	; 0x0d
    176a:	9e 85       	ldd	r25, Y+14	; 0x0e
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	4a ef       	ldi	r20, 0xFA	; 250
    1772:	54 e4       	ldi	r21, 0x44	; 68
    1774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	8f 83       	std	Y+7, r24	; 0x07
    177e:	98 87       	std	Y+8, r25	; 0x08
    1780:	a9 87       	std	Y+9, r26	; 0x09
    1782:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1784:	6f 81       	ldd	r22, Y+7	; 0x07
    1786:	78 85       	ldd	r23, Y+8	; 0x08
    1788:	89 85       	ldd	r24, Y+9	; 0x09
    178a:	9a 85       	ldd	r25, Y+10	; 0x0a
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	5f e3       	ldi	r21, 0x3F	; 63
    1794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1798:	88 23       	and	r24, r24
    179a:	2c f4       	brge	.+10     	; 0x17a6 <KEYPAD_getPressedKey+0xce>
		__ticks = 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
    17a4:	3f c0       	rjmp	.+126    	; 0x1824 <KEYPAD_getPressedKey+0x14c>
	else if (__tmp > 65535)
    17a6:	6f 81       	ldd	r22, Y+7	; 0x07
    17a8:	78 85       	ldd	r23, Y+8	; 0x08
    17aa:	89 85       	ldd	r24, Y+9	; 0x09
    17ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	3f ef       	ldi	r19, 0xFF	; 255
    17b2:	4f e7       	ldi	r20, 0x7F	; 127
    17b4:	57 e4       	ldi	r21, 0x47	; 71
    17b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ba:	18 16       	cp	r1, r24
    17bc:	4c f5       	brge	.+82     	; 0x1810 <KEYPAD_getPressedKey+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17be:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e2       	ldi	r20, 0x20	; 32
    17cc:	51 e4       	ldi	r21, 0x41	; 65
    17ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
    17e6:	0f c0       	rjmp	.+30     	; 0x1806 <KEYPAD_getPressedKey+0x12e>
    17e8:	88 ec       	ldi	r24, 0xC8	; 200
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	8b 83       	std	Y+3, r24	; 0x03
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <KEYPAD_getPressedKey+0x11c>
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	9e 83       	std	Y+6, r25	; 0x06
    1804:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	69 f7       	brne	.-38     	; 0x17e8 <KEYPAD_getPressedKey+0x110>
    180e:	14 c0       	rjmp	.+40     	; 0x1838 <KEYPAD_getPressedKey+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1810:	6f 81       	ldd	r22, Y+7	; 0x07
    1812:	78 85       	ldd	r23, Y+8	; 0x08
    1814:	89 85       	ldd	r24, Y+9	; 0x09
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <KEYPAD_getPressedKey+0x158>
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
			KEYPAD_ROW_START_PIN_ID + row, KEYPAD_BUTTON_PRESSED);

			_delay_ms(60);/*To make Keypad work properly with F_CPU higher than 2Mhz*/

			/************************************************************************************************************/
			for (column = 0 ; column < KEYPAD_COLUMNS_NUMBER ; column++)
    1838:	18 8a       	std	Y+16, r1	; 0x10
    183a:	24 c0       	rjmp	.+72     	; 0x1884 <KEYPAD_getPressedKey+0x1ac>
			{
				/*check for every column if the the button is pressed*/
				if (GPIO_readPin(KEYPAD_COLUMN_PORT_ID,
    183c:	88 89       	ldd	r24, Y+16	; 0x10
    183e:	98 2f       	mov	r25, r24
    1840:	9c 5f       	subi	r25, 0xFC	; 252
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	69 2f       	mov	r22, r25
    1846:	0e 94 04 0a 	call	0x1408	; 0x1408 <GPIO_readPin>
    184a:	88 23       	and	r24, r24
    184c:	c1 f4       	brne	.+48     	; 0x187e <KEYPAD_getPressedKey+0x1a6>
				KEYPAD_COLUMN_START_PIN_ID + column) == KEYPAD_BUTTON_PRESSED)
				{
					buttonNum = (row * KEYPAD_COLUMNS_NUMBER) + column + 1;
    184e:	89 89       	ldd	r24, Y+17	; 0x11
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	98 2f       	mov	r25, r24
    185e:	88 89       	ldd	r24, Y+16	; 0x10
    1860:	89 0f       	add	r24, r25
    1862:	8f 5f       	subi	r24, 0xFF	; 255
    1864:	8f 87       	std	Y+15, r24	; 0x0f
					return buttonNum;
#else
#if KEYPAD_COLUMNS_NUMBER == 3
				return KEYPAD_4X3_adjustKeyNumber(buttonNum);
#elif KEYPAD_COLUMNS_NUMBER == 4
				return KEYPAD_4X4_adjustKeyNumber(buttonNum);
    1866:	8f 85       	ldd	r24, Y+15	; 0x0f
    1868:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <KEYPAD_4X4_adjustKeyNumber>
			/************************************************************************/
		}

	}

}
    186c:	61 96       	adiw	r28, 0x11	; 17
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret
			KEYPAD_ROW_START_PIN_ID + row, KEYPAD_BUTTON_PRESSED);

			_delay_ms(60);/*To make Keypad work properly with F_CPU higher than 2Mhz*/

			/************************************************************************************************************/
			for (column = 0 ; column < KEYPAD_COLUMNS_NUMBER ; column++)
    187e:	88 89       	ldd	r24, Y+16	; 0x10
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	88 8b       	std	Y+16, r24	; 0x10
    1884:	88 89       	ldd	r24, Y+16	; 0x10
    1886:	84 30       	cpi	r24, 0x04	; 4
    1888:	c8 f2       	brcs	.-78     	; 0x183c <KEYPAD_getPressedKey+0x164>
#endif
#endif
				}
			}
			/************make the pins row input again after checking this row***********/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	69 89       	ldd	r22, Y+17	; 0x11
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
	KEYPAD_ROW_START_PIN_ID + 3, PIN_INPUT);
	/*****************************************************************/
	while (1)
	{
		for (row = 0 ; row < KEYPAD_ROWS_NUMBER ; row++)
    1894:	89 89       	ldd	r24, Y+17	; 0x11
    1896:	8f 5f       	subi	r24, 0xFF	; 255
    1898:	89 8b       	std	Y+17, r24	; 0x11
    189a:	89 89       	ldd	r24, Y+17	; 0x11
    189c:	84 30       	cpi	r24, 0x04	; 4
    189e:	08 f4       	brcc	.+2      	; 0x18a2 <KEYPAD_getPressedKey+0x1ca>
    18a0:	4f cf       	rjmp	.-354    	; 0x1740 <KEYPAD_getPressedKey+0x68>
    18a2:	4c cf       	rjmp	.-360    	; 0x173c <KEYPAD_getPressedKey+0x64>

000018a4 <KEYPAD_4X4_adjustKeyNumber>:
/*
 * Description : Function to take the value of the keypad button number and return the keypad actual button value in case of 4x4 keypad
 */
#if KEYPAD_COLUMNS_NUMBER == 4
static uint8 KEYPAD_4X4_adjustKeyNumber (uint8 buttonNum)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <KEYPAD_4X4_adjustKeyNumber+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <KEYPAD_4X4_adjustKeyNumber+0x8>
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypadButton = 0;
    18b2:	19 82       	std	Y+1, r1	; 0x01
	switch (buttonNum)
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3c 83       	std	Y+4, r19	; 0x04
    18bc:	2b 83       	std	Y+3, r18	; 0x03
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	88 30       	cpi	r24, 0x08	; 8
    18c4:	91 05       	cpc	r25, r1
    18c6:	09 f4       	brne	.+2      	; 0x18ca <KEYPAD_4X4_adjustKeyNumber+0x26>
    18c8:	70 c0       	rjmp	.+224    	; 0x19aa <KEYPAD_4X4_adjustKeyNumber+0x106>
    18ca:	2b 81       	ldd	r18, Y+3	; 0x03
    18cc:	3c 81       	ldd	r19, Y+4	; 0x04
    18ce:	29 30       	cpi	r18, 0x09	; 9
    18d0:	31 05       	cpc	r19, r1
    18d2:	5c f5       	brge	.+86     	; 0x192a <KEYPAD_4X4_adjustKeyNumber+0x86>
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	84 30       	cpi	r24, 0x04	; 4
    18da:	91 05       	cpc	r25, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <KEYPAD_4X4_adjustKeyNumber+0x3c>
    18de:	59 c0       	rjmp	.+178    	; 0x1992 <KEYPAD_4X4_adjustKeyNumber+0xee>
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	25 30       	cpi	r18, 0x05	; 5
    18e6:	31 05       	cpc	r19, r1
    18e8:	9c f4       	brge	.+38     	; 0x1910 <KEYPAD_4X4_adjustKeyNumber+0x6c>
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	82 30       	cpi	r24, 0x02	; 2
    18f0:	91 05       	cpc	r25, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <KEYPAD_4X4_adjustKeyNumber+0x52>
    18f4:	48 c0       	rjmp	.+144    	; 0x1986 <KEYPAD_4X4_adjustKeyNumber+0xe2>
    18f6:	2b 81       	ldd	r18, Y+3	; 0x03
    18f8:	3c 81       	ldd	r19, Y+4	; 0x04
    18fa:	23 30       	cpi	r18, 0x03	; 3
    18fc:	31 05       	cpc	r19, r1
    18fe:	0c f0       	brlt	.+2      	; 0x1902 <KEYPAD_4X4_adjustKeyNumber+0x5e>
    1900:	45 c0       	rjmp	.+138    	; 0x198c <KEYPAD_4X4_adjustKeyNumber+0xe8>
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	91 05       	cpc	r25, r1
    190a:	09 f4       	brne	.+2      	; 0x190e <KEYPAD_4X4_adjustKeyNumber+0x6a>
    190c:	39 c0       	rjmp	.+114    	; 0x1980 <KEYPAD_4X4_adjustKeyNumber+0xdc>
    190e:	67 c0       	rjmp	.+206    	; 0x19de <KEYPAD_4X4_adjustKeyNumber+0x13a>
    1910:	2b 81       	ldd	r18, Y+3	; 0x03
    1912:	3c 81       	ldd	r19, Y+4	; 0x04
    1914:	26 30       	cpi	r18, 0x06	; 6
    1916:	31 05       	cpc	r19, r1
    1918:	09 f4       	brne	.+2      	; 0x191c <KEYPAD_4X4_adjustKeyNumber+0x78>
    191a:	41 c0       	rjmp	.+130    	; 0x199e <KEYPAD_4X4_adjustKeyNumber+0xfa>
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	9c 81       	ldd	r25, Y+4	; 0x04
    1920:	87 30       	cpi	r24, 0x07	; 7
    1922:	91 05       	cpc	r25, r1
    1924:	0c f0       	brlt	.+2      	; 0x1928 <KEYPAD_4X4_adjustKeyNumber+0x84>
    1926:	3e c0       	rjmp	.+124    	; 0x19a4 <KEYPAD_4X4_adjustKeyNumber+0x100>
    1928:	37 c0       	rjmp	.+110    	; 0x1998 <KEYPAD_4X4_adjustKeyNumber+0xf4>
    192a:	2b 81       	ldd	r18, Y+3	; 0x03
    192c:	3c 81       	ldd	r19, Y+4	; 0x04
    192e:	2c 30       	cpi	r18, 0x0C	; 12
    1930:	31 05       	cpc	r19, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <KEYPAD_4X4_adjustKeyNumber+0x92>
    1934:	46 c0       	rjmp	.+140    	; 0x19c2 <KEYPAD_4X4_adjustKeyNumber+0x11e>
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	8d 30       	cpi	r24, 0x0D	; 13
    193c:	91 05       	cpc	r25, r1
    193e:	5c f4       	brge	.+22     	; 0x1956 <KEYPAD_4X4_adjustKeyNumber+0xb2>
    1940:	2b 81       	ldd	r18, Y+3	; 0x03
    1942:	3c 81       	ldd	r19, Y+4	; 0x04
    1944:	2a 30       	cpi	r18, 0x0A	; 10
    1946:	31 05       	cpc	r19, r1
    1948:	b1 f1       	breq	.+108    	; 0x19b6 <KEYPAD_4X4_adjustKeyNumber+0x112>
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	8b 30       	cpi	r24, 0x0B	; 11
    1950:	91 05       	cpc	r25, r1
    1952:	a4 f5       	brge	.+104    	; 0x19bc <KEYPAD_4X4_adjustKeyNumber+0x118>
    1954:	2d c0       	rjmp	.+90     	; 0x19b0 <KEYPAD_4X4_adjustKeyNumber+0x10c>
    1956:	2b 81       	ldd	r18, Y+3	; 0x03
    1958:	3c 81       	ldd	r19, Y+4	; 0x04
    195a:	2e 30       	cpi	r18, 0x0E	; 14
    195c:	31 05       	cpc	r19, r1
    195e:	b9 f1       	breq	.+110    	; 0x19ce <KEYPAD_4X4_adjustKeyNumber+0x12a>
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	8e 30       	cpi	r24, 0x0E	; 14
    1966:	91 05       	cpc	r25, r1
    1968:	7c f1       	brlt	.+94     	; 0x19c8 <KEYPAD_4X4_adjustKeyNumber+0x124>
    196a:	2b 81       	ldd	r18, Y+3	; 0x03
    196c:	3c 81       	ldd	r19, Y+4	; 0x04
    196e:	2f 30       	cpi	r18, 0x0F	; 15
    1970:	31 05       	cpc	r19, r1
    1972:	79 f1       	breq	.+94     	; 0x19d2 <KEYPAD_4X4_adjustKeyNumber+0x12e>
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	9c 81       	ldd	r25, Y+4	; 0x04
    1978:	80 31       	cpi	r24, 0x10	; 16
    197a:	91 05       	cpc	r25, r1
    197c:	69 f1       	breq	.+90     	; 0x19d8 <KEYPAD_4X4_adjustKeyNumber+0x134>
    197e:	2f c0       	rjmp	.+94     	; 0x19de <KEYPAD_4X4_adjustKeyNumber+0x13a>
	{
	case 1 :
		keypadButton = 7;
    1980:	87 e0       	ldi	r24, 0x07	; 7
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	2e c0       	rjmp	.+92     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 2 :
		keypadButton = 8;
    1986:	88 e0       	ldi	r24, 0x08	; 8
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	2b c0       	rjmp	.+86     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 3 :
		keypadButton = 9;
    198c:	89 e0       	ldi	r24, 0x09	; 9
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	28 c0       	rjmp	.+80     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 4 :
		keypadButton = '%'; // ASCII Code of %
    1992:	85 e2       	ldi	r24, 0x25	; 37
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	25 c0       	rjmp	.+74     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 5 :
		keypadButton = 4;
    1998:	84 e0       	ldi	r24, 0x04	; 4
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	22 c0       	rjmp	.+68     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 6 :
		keypadButton = 5;
    199e:	85 e0       	ldi	r24, 0x05	; 5
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	1f c0       	rjmp	.+62     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 7 :
		keypadButton = 6;
    19a4:	86 e0       	ldi	r24, 0x06	; 6
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	1c c0       	rjmp	.+56     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 8 :
		keypadButton = '*'; /* ASCII Code of '*' */
    19aa:	8a e2       	ldi	r24, 0x2A	; 42
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	19 c0       	rjmp	.+50     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 9 :
		keypadButton = 1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	16 c0       	rjmp	.+44     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 10 :
		keypadButton = 2;
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	13 c0       	rjmp	.+38     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 11 :
		keypadButton = 3;
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	10 c0       	rjmp	.+32     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 12 :
		keypadButton = '-'; /* ASCII Code of '-' */
    19c2:	8d e2       	ldi	r24, 0x2D	; 45
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	0d c0       	rjmp	.+26     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 13 :
		keypadButton = 13; /* ASCII of Enter */
    19c8:	8d e0       	ldi	r24, 0x0D	; 13
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	0a c0       	rjmp	.+20     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 14 :
		keypadButton = 0;
    19ce:	19 82       	std	Y+1, r1	; 0x01
    19d0:	08 c0       	rjmp	.+16     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 15 :
		keypadButton = '='; /* ASCII Code of '=' */
    19d2:	8d e3       	ldi	r24, 0x3D	; 61
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	05 c0       	rjmp	.+10     	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	case 16 :
		keypadButton = '+'; /* ASCII Code of '+' */
    19d8:	8b e2       	ldi	r24, 0x2B	; 43
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <KEYPAD_4X4_adjustKeyNumber+0x13e>
		break;
	default :
		keypadButton = buttonNum;
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypadButton;
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <LCD_init>:
 * Description : Function to initialize the LCD
 * 1-set the pin direction connected to RS,E and Data pins
 * 2-set the LCD data mode 4bits or 8bits
 */
void LCD_init (void)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	2e 97       	sbiw	r28, 0x0e	; 14
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIIN_ID, PIN_OUTPUT); /* Enable LCD E=1 */
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	62 e0       	ldi	r22, 0x02	; 2
    1a14:	41 e0       	ldi	r20, 0x01	; 1
    1a16:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	41 e0       	ldi	r20, 0x01	; 1
    1a20:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);/*To make LCD operate in write mode*/
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	0e 94 19 09 	call	0x1232	; 0x1232 <GPIO_writePin>
#if LCD_DATA_BITS_MODE==8
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	6f ef       	ldi	r22, 0xFF	; 255
    1a32:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_setupPortDirection>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a0 ea       	ldi	r26, 0xA0	; 160
    1a3c:	b1 e4       	ldi	r27, 0x41	; 65
    1a3e:	8b 87       	std	Y+11, r24	; 0x0b
    1a40:	9c 87       	std	Y+12, r25	; 0x0c
    1a42:	ad 87       	std	Y+13, r26	; 0x0d
    1a44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	4a ef       	ldi	r20, 0xFA	; 250
    1a54:	54 e4       	ldi	r21, 0x44	; 68
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	8f 83       	std	Y+7, r24	; 0x07
    1a60:	98 87       	std	Y+8, r25	; 0x08
    1a62:	a9 87       	std	Y+9, r26	; 0x09
    1a64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	2c f4       	brge	.+10     	; 0x1a88 <LCD_init+0x96>
		__ticks = 1;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	9e 83       	std	Y+6, r25	; 0x06
    1a84:	8d 83       	std	Y+5, r24	; 0x05
    1a86:	3f c0       	rjmp	.+126    	; 0x1b06 <LCD_init+0x114>
	else if (__tmp > 65535)
    1a88:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8a:	78 85       	ldd	r23, Y+8	; 0x08
    1a8c:	89 85       	ldd	r24, Y+9	; 0x09
    1a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	3f ef       	ldi	r19, 0xFF	; 255
    1a94:	4f e7       	ldi	r20, 0x7F	; 127
    1a96:	57 e4       	ldi	r21, 0x47	; 71
    1a98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9c:	18 16       	cp	r1, r24
    1a9e:	4c f5       	brge	.+82     	; 0x1af2 <LCD_init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e2       	ldi	r20, 0x20	; 32
    1aae:	51 e4       	ldi	r21, 0x41	; 65
    1ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	bc 01       	movw	r22, r24
    1aba:	cd 01       	movw	r24, r26
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	0f c0       	rjmp	.+30     	; 0x1ae8 <LCD_init+0xf6>
    1aca:	88 ec       	ldi	r24, 0xC8	; 200
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9c 83       	std	Y+4, r25	; 0x04
    1ad0:	8b 83       	std	Y+3, r24	; 0x03
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <LCD_init+0xe4>
    1ada:	9c 83       	std	Y+4, r25	; 0x04
    1adc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	69 f7       	brne	.-38     	; 0x1aca <LCD_init+0xd8>
    1af0:	14 c0       	rjmp	.+40     	; 0x1b1a <LCD_init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af2:	6f 81       	ldd	r22, Y+7	; 0x07
    1af4:	78 85       	ldd	r23, Y+8	; 0x08
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	9e 83       	std	Y+6, r25	; 0x06
    1b04:	8d 83       	std	Y+5, r24	; 0x05
    1b06:	8d 81       	ldd	r24, Y+5	; 0x05
    1b08:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <LCD_init+0x120>
    1b16:	9a 83       	std	Y+2, r25	; 0x02
    1b18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_sendCommand(LCD_2LINES_8_BITS_MODE); //to operate in 2 lines 8-bits mode
    1b1a:	88 e3       	ldi	r24, 0x38	; 56
    1b1c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <LCD_sendCommand>
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT1);
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT2);
	/***********************************************/
	LCD_sendCommand(LCD_2LINES_4_BITS_MODE); //to operate in 2 lines 4-bits mode
#endif
	LCD_sendCommand(LCD_TURN_CURSOR_OFF); //to turn off the cursor
    1b20:	8c e0       	ldi	r24, 0x0C	; 12
    1b22:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN); //to clear the screen
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <LCD_sendCommand>
}
    1b2c:	2e 96       	adiw	r28, 0x0e	; 14
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <LCD_sendCommand>:

/*
 * Description : Function to send a command to the LCD
 */
void LCD_sendCommand (uint8 command)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	e9 97       	sbiw	r28, 0x39	; 57
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); //RS=0 to send command(ex:clear the screen,shift the screen)
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	0e 94 19 09 	call	0x1232	; 0x1232 <GPIO_writePin>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a0 e8       	ldi	r26, 0x80	; 128
    1b64:	bf e3       	ldi	r27, 0x3F	; 63
    1b66:	8d ab       	std	Y+53, r24	; 0x35
    1b68:	9e ab       	std	Y+54, r25	; 0x36
    1b6a:	af ab       	std	Y+55, r26	; 0x37
    1b6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b70:	7e a9       	ldd	r23, Y+54	; 0x36
    1b72:	8f a9       	ldd	r24, Y+55	; 0x37
    1b74:	98 ad       	ldd	r25, Y+56	; 0x38
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	4a ef       	ldi	r20, 0xFA	; 250
    1b7c:	54 e4       	ldi	r21, 0x44	; 68
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	89 ab       	std	Y+49, r24	; 0x31
    1b88:	9a ab       	std	Y+50, r25	; 0x32
    1b8a:	ab ab       	std	Y+51, r26	; 0x33
    1b8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b90:	7a a9       	ldd	r23, Y+50	; 0x32
    1b92:	8b a9       	ldd	r24, Y+51	; 0x33
    1b94:	9c a9       	ldd	r25, Y+52	; 0x34
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e8       	ldi	r20, 0x80	; 128
    1b9c:	5f e3       	ldi	r21, 0x3F	; 63
    1b9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba2:	88 23       	and	r24, r24
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <LCD_sendCommand+0x72>
		__ticks = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	98 ab       	std	Y+48, r25	; 0x30
    1bac:	8f a7       	std	Y+47, r24	; 0x2f
    1bae:	3f c0       	rjmp	.+126    	; 0x1c2e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1bb0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	3f ef       	ldi	r19, 0xFF	; 255
    1bbc:	4f e7       	ldi	r20, 0x7F	; 127
    1bbe:	57 e4       	ldi	r21, 0x47	; 71
    1bc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc4:	18 16       	cp	r1, r24
    1bc6:	4c f5       	brge	.+82     	; 0x1c1a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bca:	7e a9       	ldd	r23, Y+54	; 0x36
    1bcc:	8f a9       	ldd	r24, Y+55	; 0x37
    1bce:	98 ad       	ldd	r25, Y+56	; 0x38
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e2       	ldi	r20, 0x20	; 32
    1bd6:	51 e4       	ldi	r21, 0x41	; 65
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	bc 01       	movw	r22, r24
    1be2:	cd 01       	movw	r24, r26
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	98 ab       	std	Y+48, r25	; 0x30
    1bee:	8f a7       	std	Y+47, r24	; 0x2f
    1bf0:	0f c0       	rjmp	.+30     	; 0x1c10 <LCD_sendCommand+0xd2>
    1bf2:	88 ec       	ldi	r24, 0xC8	; 200
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	9e a7       	std	Y+46, r25	; 0x2e
    1bf8:	8d a7       	std	Y+45, r24	; 0x2d
    1bfa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bfc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_sendCommand+0xc0>
    1c02:	9e a7       	std	Y+46, r25	; 0x2e
    1c04:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c08:	98 a9       	ldd	r25, Y+48	; 0x30
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	98 ab       	std	Y+48, r25	; 0x30
    1c0e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c10:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c12:	98 a9       	ldd	r25, Y+48	; 0x30
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	69 f7       	brne	.-38     	; 0x1bf2 <LCD_sendCommand+0xb4>
    1c18:	14 c0       	rjmp	.+40     	; 0x1c42 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c20:	9c a9       	ldd	r25, Y+52	; 0x34
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	98 ab       	std	Y+48, r25	; 0x30
    1c2c:	8f a7       	std	Y+47, r24	; 0x2f
    1c2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c30:	98 a9       	ldd	r25, Y+48	; 0x30
    1c32:	9c a7       	std	Y+44, r25	; 0x2c
    1c34:	8b a7       	std	Y+43, r24	; 0x2b
    1c36:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c38:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <LCD_sendCommand+0xfc>
    1c3e:	9c a7       	std	Y+44, r25	; 0x2c
    1c40:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	62 e0       	ldi	r22, 0x02	; 2
    1c46:	41 e0       	ldi	r20, 0x01	; 1
    1c48:	0e 94 19 09 	call	0x1232	; 0x1232 <GPIO_writePin>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a0 e8       	ldi	r26, 0x80	; 128
    1c52:	bf e3       	ldi	r27, 0x3F	; 63
    1c54:	8f a3       	std	Y+39, r24	; 0x27
    1c56:	98 a7       	std	Y+40, r25	; 0x28
    1c58:	a9 a7       	std	Y+41, r26	; 0x29
    1c5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c60:	89 a5       	ldd	r24, Y+41	; 0x29
    1c62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	4a ef       	ldi	r20, 0xFA	; 250
    1c6a:	54 e4       	ldi	r21, 0x44	; 68
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	8b a3       	std	Y+35, r24	; 0x23
    1c76:	9c a3       	std	Y+36, r25	; 0x24
    1c78:	ad a3       	std	Y+37, r26	; 0x25
    1c7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c80:	8d a1       	ldd	r24, Y+37	; 0x25
    1c82:	9e a1       	ldd	r25, Y+38	; 0x26
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	5f e3       	ldi	r21, 0x3F	; 63
    1c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <LCD_sendCommand+0x160>
		__ticks = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9a a3       	std	Y+34, r25	; 0x22
    1c9a:	89 a3       	std	Y+33, r24	; 0x21
    1c9c:	3f c0       	rjmp	.+126    	; 0x1d1c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1c9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ca2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	57 e4       	ldi	r21, 0x47	; 71
    1cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	4c f5       	brge	.+82     	; 0x1d08 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cba:	89 a5       	ldd	r24, Y+41	; 0x29
    1cbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e2       	ldi	r20, 0x20	; 32
    1cc4:	51 e4       	ldi	r21, 0x41	; 65
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9a a3       	std	Y+34, r25	; 0x22
    1cdc:	89 a3       	std	Y+33, r24	; 0x21
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <LCD_sendCommand+0x1c0>
    1ce0:	88 ec       	ldi	r24, 0xC8	; 200
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	98 a3       	std	Y+32, r25	; 0x20
    1ce6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ce8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cea:	98 a1       	ldd	r25, Y+32	; 0x20
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_sendCommand+0x1ae>
    1cf0:	98 a3       	std	Y+32, r25	; 0x20
    1cf2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	9a a3       	std	Y+34, r25	; 0x22
    1cfc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1d00:	9a a1       	ldd	r25, Y+34	; 0x22
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	69 f7       	brne	.-38     	; 0x1ce0 <LCD_sendCommand+0x1a2>
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d08:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9a a3       	std	Y+34, r25	; 0x22
    1d1a:	89 a3       	std	Y+33, r24	; 0x21
    1d1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d20:	9e 8f       	std	Y+30, r25	; 0x1e
    1d22:	8d 8f       	std	Y+29, r24	; 0x1d
    1d24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_sendCommand+0x1ea>
    1d2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d2e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/****************************write the command to the LCD****************************/
#if LCD_DATA_BITS_MODE==8
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	69 ad       	ldd	r22, Y+57	; 0x39
    1d34:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <GPIO_writePort>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a0 e8       	ldi	r26, 0x80	; 128
    1d3e:	bf e3       	ldi	r27, 0x3F	; 63
    1d40:	89 8f       	std	Y+25, r24	; 0x19
    1d42:	9a 8f       	std	Y+26, r25	; 0x1a
    1d44:	ab 8f       	std	Y+27, r26	; 0x1b
    1d46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d48:	69 8d       	ldd	r22, Y+25	; 0x19
    1d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4a ef       	ldi	r20, 0xFA	; 250
    1d56:	54 e4       	ldi	r21, 0x44	; 68
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8d 8b       	std	Y+21, r24	; 0x15
    1d62:	9e 8b       	std	Y+22, r25	; 0x16
    1d64:	af 8b       	std	Y+23, r26	; 0x17
    1d66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d68:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7c:	88 23       	and	r24, r24
    1d7e:	2c f4       	brge	.+10     	; 0x1d8a <LCD_sendCommand+0x24c>
		__ticks = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9c 8b       	std	Y+20, r25	; 0x14
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
    1d88:	3f c0       	rjmp	.+126    	; 0x1e08 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d90:	98 8d       	ldd	r25, Y+24	; 0x18
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	3f ef       	ldi	r19, 0xFF	; 255
    1d96:	4f e7       	ldi	r20, 0x7F	; 127
    1d98:	57 e4       	ldi	r21, 0x47	; 71
    1d9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	4c f5       	brge	.+82     	; 0x1df4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da2:	69 8d       	ldd	r22, Y+25	; 0x19
    1da4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e2       	ldi	r20, 0x20	; 32
    1db0:	51 e4       	ldi	r21, 0x41	; 65
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9c 8b       	std	Y+20, r25	; 0x14
    1dc8:	8b 8b       	std	Y+19, r24	; 0x13
    1dca:	0f c0       	rjmp	.+30     	; 0x1dea <LCD_sendCommand+0x2ac>
    1dcc:	88 ec       	ldi	r24, 0xC8	; 200
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9a 8b       	std	Y+18, r25	; 0x12
    1dd2:	89 8b       	std	Y+17, r24	; 0x11
    1dd4:	89 89       	ldd	r24, Y+17	; 0x11
    1dd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <LCD_sendCommand+0x29a>
    1ddc:	9a 8b       	std	Y+18, r25	; 0x12
    1dde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de0:	8b 89       	ldd	r24, Y+19	; 0x13
    1de2:	9c 89       	ldd	r25, Y+20	; 0x14
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	9c 8b       	std	Y+20, r25	; 0x14
    1de8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dea:	8b 89       	ldd	r24, Y+19	; 0x13
    1dec:	9c 89       	ldd	r25, Y+20	; 0x14
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	69 f7       	brne	.-38     	; 0x1dcc <LCD_sendCommand+0x28e>
    1df2:	14 c0       	rjmp	.+40     	; 0x1e1c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df4:	6d 89       	ldd	r22, Y+21	; 0x15
    1df6:	7e 89       	ldd	r23, Y+22	; 0x16
    1df8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9c 8b       	std	Y+20, r25	; 0x14
    1e06:	8b 8b       	std	Y+19, r24	; 0x13
    1e08:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0c:	98 8b       	std	Y+16, r25	; 0x10
    1e0e:	8f 87       	std	Y+15, r24	; 0x0f
    1e10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e12:	98 89       	ldd	r25, Y+16	; 0x10
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <LCD_sendCommand+0x2d6>
    1e18:	98 8b       	std	Y+16, r25	; 0x10
    1e1a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_LOW);
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	62 e0       	ldi	r22, 0x02	; 2
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	0e 94 19 09 	call	0x1232	; 0x1232 <GPIO_writePin>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	a0 e8       	ldi	r26, 0x80	; 128
    1e2c:	bf e3       	ldi	r27, 0x3F	; 63
    1e2e:	8b 87       	std	Y+11, r24	; 0x0b
    1e30:	9c 87       	std	Y+12, r25	; 0x0c
    1e32:	ad 87       	std	Y+13, r26	; 0x0d
    1e34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a ef       	ldi	r20, 0xFA	; 250
    1e44:	54 e4       	ldi	r21, 0x44	; 68
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	8f 83       	std	Y+7, r24	; 0x07
    1e50:	98 87       	std	Y+8, r25	; 0x08
    1e52:	a9 87       	std	Y+9, r26	; 0x09
    1e54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e56:	6f 81       	ldd	r22, Y+7	; 0x07
    1e58:	78 85       	ldd	r23, Y+8	; 0x08
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f e3       	ldi	r21, 0x3F	; 63
    1e66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
    1e76:	3f c0       	rjmp	.+126    	; 0x1ef6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	3f ef       	ldi	r19, 0xFF	; 255
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	57 e4       	ldi	r21, 0x47	; 71
    1e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	4c f5       	brge	.+82     	; 0x1ee2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e2       	ldi	r20, 0x20	; 32
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <LCD_sendCommand+0x39a>
    1eba:	88 ec       	ldi	r24, 0xC8	; 200
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_sendCommand+0x388>
    1eca:	9c 83       	std	Y+4, r25	; 0x04
    1ecc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eda:	9e 81       	ldd	r25, Y+6	; 0x06
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	69 f7       	brne	.-38     	; 0x1eba <LCD_sendCommand+0x37c>
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_sendCommand+0x3c4>
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_LOW);
	_delay_ms(1);
#endif
	/************************************************************************/

}
    1f0a:	e9 96       	adiw	r28, 0x39	; 57
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <LCD_displayCharacter>:

/*
 * Description : Function to display a character on the LCD
 */
void LCD_displayCharacter (uint8 character)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	e9 97       	sbiw	r28, 0x39	; 57
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); //RS=1 to display a character
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	41 e0       	ldi	r20, 0x01	; 1
    1f38:	0e 94 19 09 	call	0x1232	; 0x1232 <GPIO_writePin>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a0 e8       	ldi	r26, 0x80	; 128
    1f42:	bf e3       	ldi	r27, 0x3F	; 63
    1f44:	8d ab       	std	Y+53, r24	; 0x35
    1f46:	9e ab       	std	Y+54, r25	; 0x36
    1f48:	af ab       	std	Y+55, r26	; 0x37
    1f4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f4e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f50:	8f a9       	ldd	r24, Y+55	; 0x37
    1f52:	98 ad       	ldd	r25, Y+56	; 0x38
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	4a ef       	ldi	r20, 0xFA	; 250
    1f5a:	54 e4       	ldi	r21, 0x44	; 68
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	89 ab       	std	Y+49, r24	; 0x31
    1f66:	9a ab       	std	Y+50, r25	; 0x32
    1f68:	ab ab       	std	Y+51, r26	; 0x33
    1f6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f70:	8b a9       	ldd	r24, Y+51	; 0x33
    1f72:	9c a9       	ldd	r25, Y+52	; 0x34
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e8       	ldi	r20, 0x80	; 128
    1f7a:	5f e3       	ldi	r21, 0x3F	; 63
    1f7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f80:	88 23       	and	r24, r24
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <LCD_displayCharacter+0x72>
		__ticks = 1;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	98 ab       	std	Y+48, r25	; 0x30
    1f8a:	8f a7       	std	Y+47, r24	; 0x2f
    1f8c:	3f c0       	rjmp	.+126    	; 0x200c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1f8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f90:	7a a9       	ldd	r23, Y+50	; 0x32
    1f92:	8b a9       	ldd	r24, Y+51	; 0x33
    1f94:	9c a9       	ldd	r25, Y+52	; 0x34
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	3f ef       	ldi	r19, 0xFF	; 255
    1f9a:	4f e7       	ldi	r20, 0x7F	; 127
    1f9c:	57 e4       	ldi	r21, 0x47	; 71
    1f9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	4c f5       	brge	.+82     	; 0x1ff8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fa8:	7e a9       	ldd	r23, Y+54	; 0x36
    1faa:	8f a9       	ldd	r24, Y+55	; 0x37
    1fac:	98 ad       	ldd	r25, Y+56	; 0x38
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e2       	ldi	r20, 0x20	; 32
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	98 ab       	std	Y+48, r25	; 0x30
    1fcc:	8f a7       	std	Y+47, r24	; 0x2f
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <LCD_displayCharacter+0xd2>
    1fd0:	88 ec       	ldi	r24, 0xC8	; 200
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9e a7       	std	Y+46, r25	; 0x2e
    1fd6:	8d a7       	std	Y+45, r24	; 0x2d
    1fd8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fda:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_displayCharacter+0xc0>
    1fe0:	9e a7       	std	Y+46, r25	; 0x2e
    1fe2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	98 ab       	std	Y+48, r25	; 0x30
    1fec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	69 f7       	brne	.-38     	; 0x1fd0 <LCD_displayCharacter+0xb4>
    1ff6:	14 c0       	rjmp	.+40     	; 0x2020 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff8:	69 a9       	ldd	r22, Y+49	; 0x31
    1ffa:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ffe:	9c a9       	ldd	r25, Y+52	; 0x34
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	98 ab       	std	Y+48, r25	; 0x30
    200a:	8f a7       	std	Y+47, r24	; 0x2f
    200c:	8f a5       	ldd	r24, Y+47	; 0x2f
    200e:	98 a9       	ldd	r25, Y+48	; 0x30
    2010:	9c a7       	std	Y+44, r25	; 0x2c
    2012:	8b a7       	std	Y+43, r24	; 0x2b
    2014:	8b a5       	ldd	r24, Y+43	; 0x2b
    2016:	9c a5       	ldd	r25, Y+44	; 0x2c
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_displayCharacter+0xfc>
    201c:	9c a7       	std	Y+44, r25	; 0x2c
    201e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_HIGH);
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	62 e0       	ldi	r22, 0x02	; 2
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	0e 94 19 09 	call	0x1232	; 0x1232 <GPIO_writePin>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e8       	ldi	r26, 0x80	; 128
    2030:	bf e3       	ldi	r27, 0x3F	; 63
    2032:	8f a3       	std	Y+39, r24	; 0x27
    2034:	98 a7       	std	Y+40, r25	; 0x28
    2036:	a9 a7       	std	Y+41, r26	; 0x29
    2038:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203a:	6f a1       	ldd	r22, Y+39	; 0x27
    203c:	78 a5       	ldd	r23, Y+40	; 0x28
    203e:	89 a5       	ldd	r24, Y+41	; 0x29
    2040:	9a a5       	ldd	r25, Y+42	; 0x2a
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a ef       	ldi	r20, 0xFA	; 250
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8b a3       	std	Y+35, r24	; 0x23
    2054:	9c a3       	std	Y+36, r25	; 0x24
    2056:	ad a3       	std	Y+37, r26	; 0x25
    2058:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    205a:	6b a1       	ldd	r22, Y+35	; 0x23
    205c:	7c a1       	ldd	r23, Y+36	; 0x24
    205e:	8d a1       	ldd	r24, Y+37	; 0x25
    2060:	9e a1       	ldd	r25, Y+38	; 0x26
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	2c f4       	brge	.+10     	; 0x207c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9a a3       	std	Y+34, r25	; 0x22
    2078:	89 a3       	std	Y+33, r24	; 0x21
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    207c:	6b a1       	ldd	r22, Y+35	; 0x23
    207e:	7c a1       	ldd	r23, Y+36	; 0x24
    2080:	8d a1       	ldd	r24, Y+37	; 0x25
    2082:	9e a1       	ldd	r25, Y+38	; 0x26
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	3f ef       	ldi	r19, 0xFF	; 255
    2088:	4f e7       	ldi	r20, 0x7F	; 127
    208a:	57 e4       	ldi	r21, 0x47	; 71
    208c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2090:	18 16       	cp	r1, r24
    2092:	4c f5       	brge	.+82     	; 0x20e6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2094:	6f a1       	ldd	r22, Y+39	; 0x27
    2096:	78 a5       	ldd	r23, Y+40	; 0x28
    2098:	89 a5       	ldd	r24, Y+41	; 0x29
    209a:	9a a5       	ldd	r25, Y+42	; 0x2a
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e2       	ldi	r20, 0x20	; 32
    20a2:	51 e4       	ldi	r21, 0x41	; 65
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9a a3       	std	Y+34, r25	; 0x22
    20ba:	89 a3       	std	Y+33, r24	; 0x21
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <LCD_displayCharacter+0x1c0>
    20be:	88 ec       	ldi	r24, 0xC8	; 200
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	98 a3       	std	Y+32, r25	; 0x20
    20c4:	8f 8f       	std	Y+31, r24	; 0x1f
    20c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20c8:	98 a1       	ldd	r25, Y+32	; 0x20
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_displayCharacter+0x1ae>
    20ce:	98 a3       	std	Y+32, r25	; 0x20
    20d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	89 a1       	ldd	r24, Y+33	; 0x21
    20d4:	9a a1       	ldd	r25, Y+34	; 0x22
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	9a a3       	std	Y+34, r25	; 0x22
    20da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20dc:	89 a1       	ldd	r24, Y+33	; 0x21
    20de:	9a a1       	ldd	r25, Y+34	; 0x22
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	69 f7       	brne	.-38     	; 0x20be <LCD_displayCharacter+0x1a2>
    20e4:	14 c0       	rjmp	.+40     	; 0x210e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	6b a1       	ldd	r22, Y+35	; 0x23
    20e8:	7c a1       	ldd	r23, Y+36	; 0x24
    20ea:	8d a1       	ldd	r24, Y+37	; 0x25
    20ec:	9e a1       	ldd	r25, Y+38	; 0x26
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9a a3       	std	Y+34, r25	; 0x22
    20f8:	89 a3       	std	Y+33, r24	; 0x21
    20fa:	89 a1       	ldd	r24, Y+33	; 0x21
    20fc:	9a a1       	ldd	r25, Y+34	; 0x22
    20fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2100:	8d 8f       	std	Y+29, r24	; 0x1d
    2102:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2104:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_displayCharacter+0x1ea>
    210a:	9e 8f       	std	Y+30, r25	; 0x1e
    210c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/****************************write a character to the LCD****************************/
#if LCD_DATA_BITS_MODE==8
	GPIO_writePort(LCD_DATA_PORT_ID, character);
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	69 ad       	ldd	r22, Y+57	; 0x39
    2112:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <GPIO_writePort>
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a0 e8       	ldi	r26, 0x80	; 128
    211c:	bf e3       	ldi	r27, 0x3F	; 63
    211e:	89 8f       	std	Y+25, r24	; 0x19
    2120:	9a 8f       	std	Y+26, r25	; 0x1a
    2122:	ab 8f       	std	Y+27, r26	; 0x1b
    2124:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2126:	69 8d       	ldd	r22, Y+25	; 0x19
    2128:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4a ef       	ldi	r20, 0xFA	; 250
    2134:	54 e4       	ldi	r21, 0x44	; 68
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	8d 8b       	std	Y+21, r24	; 0x15
    2140:	9e 8b       	std	Y+22, r25	; 0x16
    2142:	af 8b       	std	Y+23, r26	; 0x17
    2144:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2146:	6d 89       	ldd	r22, Y+21	; 0x15
    2148:	7e 89       	ldd	r23, Y+22	; 0x16
    214a:	8f 89       	ldd	r24, Y+23	; 0x17
    214c:	98 8d       	ldd	r25, Y+24	; 0x18
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	2c f4       	brge	.+10     	; 0x2168 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9c 8b       	std	Y+20, r25	; 0x14
    2164:	8b 8b       	std	Y+19, r24	; 0x13
    2166:	3f c0       	rjmp	.+126    	; 0x21e6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2168:	6d 89       	ldd	r22, Y+21	; 0x15
    216a:	7e 89       	ldd	r23, Y+22	; 0x16
    216c:	8f 89       	ldd	r24, Y+23	; 0x17
    216e:	98 8d       	ldd	r25, Y+24	; 0x18
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	3f ef       	ldi	r19, 0xFF	; 255
    2174:	4f e7       	ldi	r20, 0x7F	; 127
    2176:	57 e4       	ldi	r21, 0x47	; 71
    2178:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    217c:	18 16       	cp	r1, r24
    217e:	4c f5       	brge	.+82     	; 0x21d2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2180:	69 8d       	ldd	r22, Y+25	; 0x19
    2182:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2184:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2186:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e2       	ldi	r20, 0x20	; 32
    218e:	51 e4       	ldi	r21, 0x41	; 65
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9c 8b       	std	Y+20, r25	; 0x14
    21a6:	8b 8b       	std	Y+19, r24	; 0x13
    21a8:	0f c0       	rjmp	.+30     	; 0x21c8 <LCD_displayCharacter+0x2ac>
    21aa:	88 ec       	ldi	r24, 0xC8	; 200
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	9a 8b       	std	Y+18, r25	; 0x12
    21b0:	89 8b       	std	Y+17, r24	; 0x11
    21b2:	89 89       	ldd	r24, Y+17	; 0x11
    21b4:	9a 89       	ldd	r25, Y+18	; 0x12
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_displayCharacter+0x29a>
    21ba:	9a 8b       	std	Y+18, r25	; 0x12
    21bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21be:	8b 89       	ldd	r24, Y+19	; 0x13
    21c0:	9c 89       	ldd	r25, Y+20	; 0x14
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	9c 8b       	std	Y+20, r25	; 0x14
    21c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ca:	9c 89       	ldd	r25, Y+20	; 0x14
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	69 f7       	brne	.-38     	; 0x21aa <LCD_displayCharacter+0x28e>
    21d0:	14 c0       	rjmp	.+40     	; 0x21fa <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d2:	6d 89       	ldd	r22, Y+21	; 0x15
    21d4:	7e 89       	ldd	r23, Y+22	; 0x16
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9c 8b       	std	Y+20, r25	; 0x14
    21e4:	8b 8b       	std	Y+19, r24	; 0x13
    21e6:	8b 89       	ldd	r24, Y+19	; 0x13
    21e8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ea:	98 8b       	std	Y+16, r25	; 0x10
    21ec:	8f 87       	std	Y+15, r24	; 0x0f
    21ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f0:	98 89       	ldd	r25, Y+16	; 0x10
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <LCD_displayCharacter+0x2d6>
    21f6:	98 8b       	std	Y+16, r25	; 0x10
    21f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_LOW);
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	62 e0       	ldi	r22, 0x02	; 2
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	0e 94 19 09 	call	0x1232	; 0x1232 <GPIO_writePin>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a0 e8       	ldi	r26, 0x80	; 128
    220a:	bf e3       	ldi	r27, 0x3F	; 63
    220c:	8b 87       	std	Y+11, r24	; 0x0b
    220e:	9c 87       	std	Y+12, r25	; 0x0c
    2210:	ad 87       	std	Y+13, r26	; 0x0d
    2212:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2214:	6b 85       	ldd	r22, Y+11	; 0x0b
    2216:	7c 85       	ldd	r23, Y+12	; 0x0c
    2218:	8d 85       	ldd	r24, Y+13	; 0x0d
    221a:	9e 85       	ldd	r25, Y+14	; 0x0e
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	4a ef       	ldi	r20, 0xFA	; 250
    2222:	54 e4       	ldi	r21, 0x44	; 68
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	8f 83       	std	Y+7, r24	; 0x07
    222e:	98 87       	std	Y+8, r25	; 0x08
    2230:	a9 87       	std	Y+9, r26	; 0x09
    2232:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2234:	6f 81       	ldd	r22, Y+7	; 0x07
    2236:	78 85       	ldd	r23, Y+8	; 0x08
    2238:	89 85       	ldd	r24, Y+9	; 0x09
    223a:	9a 85       	ldd	r25, Y+10	; 0x0a
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e8       	ldi	r20, 0x80	; 128
    2242:	5f e3       	ldi	r21, 0x3F	; 63
    2244:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2248:	88 23       	and	r24, r24
    224a:	2c f4       	brge	.+10     	; 0x2256 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
    2254:	3f c0       	rjmp	.+126    	; 0x22d4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2256:	6f 81       	ldd	r22, Y+7	; 0x07
    2258:	78 85       	ldd	r23, Y+8	; 0x08
    225a:	89 85       	ldd	r24, Y+9	; 0x09
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	3f ef       	ldi	r19, 0xFF	; 255
    2262:	4f e7       	ldi	r20, 0x7F	; 127
    2264:	57 e4       	ldi	r21, 0x47	; 71
    2266:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    226a:	18 16       	cp	r1, r24
    226c:	4c f5       	brge	.+82     	; 0x22c0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2270:	7c 85       	ldd	r23, Y+12	; 0x0c
    2272:	8d 85       	ldd	r24, Y+13	; 0x0d
    2274:	9e 85       	ldd	r25, Y+14	; 0x0e
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e2       	ldi	r20, 0x20	; 32
    227c:	51 e4       	ldi	r21, 0x41	; 65
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9e 83       	std	Y+6, r25	; 0x06
    2294:	8d 83       	std	Y+5, r24	; 0x05
    2296:	0f c0       	rjmp	.+30     	; 0x22b6 <LCD_displayCharacter+0x39a>
    2298:	88 ec       	ldi	r24, 0xC8	; 200
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9c 83       	std	Y+4, r25	; 0x04
    229e:	8b 83       	std	Y+3, r24	; 0x03
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <LCD_displayCharacter+0x388>
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	9e 81       	ldd	r25, Y+6	; 0x06
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	69 f7       	brne	.-38     	; 0x2298 <LCD_displayCharacter+0x37c>
    22be:	14 c0       	rjmp	.+40     	; 0x22e8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c0:	6f 81       	ldd	r22, Y+7	; 0x07
    22c2:	78 85       	ldd	r23, Y+8	; 0x08
    22c4:	89 85       	ldd	r24, Y+9	; 0x09
    22c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	9a 83       	std	Y+2, r25	; 0x02
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	9a 81       	ldd	r25, Y+2	; 0x02
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <LCD_displayCharacter+0x3c4>
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIIN_ID, LOGIC_LOW);
		_delay_ms(1);
	#endif
	/************************************************************************/
}
    22e8:	e9 96       	adiw	r28, 0x39	; 57
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <LCD_diplaystring>:

/*
 * Description : Function to display string on the LCD
 */
void LCD_diplaystring (const char *str)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <LCD_diplaystring+0x6>
    2300:	0f 92       	push	r0
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	9b 83       	std	Y+3, r25	; 0x03
    2308:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0 ; str[i] != '\0' ; i++)
    230a:	19 82       	std	Y+1, r1	; 0x01
    230c:	0e c0       	rjmp	.+28     	; 0x232a <LCD_diplaystring+0x30>
	{
		LCD_displayCharacter(str[i]);
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	9b 81       	ldd	r25, Y+3	; 0x03
    2318:	fc 01       	movw	r30, r24
    231a:	e2 0f       	add	r30, r18
    231c:	f3 1f       	adc	r31, r19
    231e:	80 81       	ld	r24, Z
    2320:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_displayCharacter>
 * Description : Function to display string on the LCD
 */
void LCD_diplaystring (const char *str)
{
	uint8 i;
	for (i = 0 ; str[i] != '\0' ; i++)
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	8f 5f       	subi	r24, 0xFF	; 255
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	28 2f       	mov	r18, r24
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	fc 01       	movw	r30, r24
    2336:	e2 0f       	add	r30, r18
    2338:	f3 1f       	adc	r31, r19
    233a:	80 81       	ld	r24, Z
    233c:	88 23       	and	r24, r24
    233e:	39 f7       	brne	.-50     	; 0x230e <LCD_diplaystring+0x14>
	{
		LCD_displayCharacter(str[i]);
	}
}
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <LCD_moveCursor>:

/*
 * Description : Function to move the cursor to the required position
 */
void LCD_moveCursor (uint8 row , uint8 column)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	00 d0       	rcall	.+0      	; 0x2352 <LCD_moveCursor+0x6>
    2352:	00 d0       	rcall	.+0      	; 0x2354 <LCD_moveCursor+0x8>
    2354:	0f 92       	push	r0
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	8a 83       	std	Y+2, r24	; 0x02
    235c:	6b 83       	std	Y+3, r22	; 0x03

	uint8 LCD_cursorAddress;
	switch (row)
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	3d 83       	std	Y+5, r19	; 0x05
    2366:	2c 83       	std	Y+4, r18	; 0x04
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	9d 81       	ldd	r25, Y+5	; 0x05
    236c:	81 30       	cpi	r24, 0x01	; 1
    236e:	91 05       	cpc	r25, r1
    2370:	c1 f0       	breq	.+48     	; 0x23a2 <LCD_moveCursor+0x56>
    2372:	2c 81       	ldd	r18, Y+4	; 0x04
    2374:	3d 81       	ldd	r19, Y+5	; 0x05
    2376:	22 30       	cpi	r18, 0x02	; 2
    2378:	31 05       	cpc	r19, r1
    237a:	2c f4       	brge	.+10     	; 0x2386 <LCD_moveCursor+0x3a>
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	9d 81       	ldd	r25, Y+5	; 0x05
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	61 f0       	breq	.+24     	; 0x239c <LCD_moveCursor+0x50>
    2384:	19 c0       	rjmp	.+50     	; 0x23b8 <LCD_moveCursor+0x6c>
    2386:	2c 81       	ldd	r18, Y+4	; 0x04
    2388:	3d 81       	ldd	r19, Y+5	; 0x05
    238a:	22 30       	cpi	r18, 0x02	; 2
    238c:	31 05       	cpc	r19, r1
    238e:	69 f0       	breq	.+26     	; 0x23aa <LCD_moveCursor+0x5e>
    2390:	8c 81       	ldd	r24, Y+4	; 0x04
    2392:	9d 81       	ldd	r25, Y+5	; 0x05
    2394:	83 30       	cpi	r24, 0x03	; 3
    2396:	91 05       	cpc	r25, r1
    2398:	61 f0       	breq	.+24     	; 0x23b2 <LCD_moveCursor+0x66>
    239a:	0e c0       	rjmp	.+28     	; 0x23b8 <LCD_moveCursor+0x6c>
	{
	case 0 :
		LCD_cursorAddress = column;/*move the cursor to position at row=0,column=0*/
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	0b c0       	rjmp	.+22     	; 0x23b8 <LCD_moveCursor+0x6c>
		break;
	case 1 :
		LCD_cursorAddress = column + LCD_ROW1_START_ADDRESS;/*move the cursor to position at row=1,column=0*/
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	80 5c       	subi	r24, 0xC0	; 192
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <LCD_moveCursor+0x6c>
		break;
	case 2 :
		LCD_cursorAddress = column + LCD_ROW2_START_ADDRESS;/*move the cursor to position at row=2,column=0*/
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	80 5f       	subi	r24, 0xF0	; 240
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	03 c0       	rjmp	.+6      	; 0x23b8 <LCD_moveCursor+0x6c>
		break;
	case 3 :
		LCD_cursorAddress = column + LCD_ROW3_START_ADDRESS;/*move the cursor to position at row=3,column=0*/
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	80 5b       	subi	r24, 0xB0	; 176
    23b6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_cursorAddress | LCD_SET_CURSOR_LOCATION);
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	80 68       	ori	r24, 0x80	; 128
    23bc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <LCD_sendCommand>
}
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <LCD_displayStringRowColumn>:

/*
 * Description : Function to display a string on the required position
 */
void LCD_displayStringRowColumn (const char *str , uint8 row , uint8 column)
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <LCD_displayStringRowColumn+0x6>
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <LCD_displayStringRowColumn+0x8>
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	6b 83       	std	Y+3, r22	; 0x03
    23e2:	4c 83       	std	Y+4, r20	; 0x04
	LCD_moveCursor(row, column);
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	6c 81       	ldd	r22, Y+4	; 0x04
    23e8:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_moveCursor>
	LCD_diplaystring(str);
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_diplaystring>
}
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <LCD_clearScreen>:

/*
 * Description : Function to clear the LCD
 */
void LCD_clearScreen (void)
{
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <LCD_sendCommand>
}
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <LCD_integerToString>:

/*
 * Description : Function to display an integer on the LCD
 */
void LCD_integerToString (int num)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	62 97       	sbiw	r28, 0x12	; 18
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	9a 8b       	std	Y+18, r25	; 0x12
    242c:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(num, buffer, 10);/*C function to convert integer to its corresponding ASCII value, 10 for decimal*/
    242e:	89 89       	ldd	r24, Y+17	; 0x11
    2430:	9a 89       	ldd	r25, Y+18	; 0x12
    2432:	9e 01       	movw	r18, r28
    2434:	2f 5f       	subi	r18, 0xFF	; 255
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	b9 01       	movw	r22, r18
    243a:	4a e0       	ldi	r20, 0x0A	; 10
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <itoa>
	LCD_diplaystring(buffer);
    2442:	ce 01       	movw	r24, r28
    2444:	01 96       	adiw	r24, 0x01	; 1
    2446:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_diplaystring>
}
    244a:	62 96       	adiw	r28, 0x12	; 18
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <__vector_9>:
static volatile void (*g_TIMER1_callBackFunctionPtr) (void) = NULL_PTR; /*global pointer to function*/
/***********************************/

/*********Interrupt Service Routine**********/
ISR(TIMER1_OVF_vect)
{
    245c:	1f 92       	push	r1
    245e:	0f 92       	push	r0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	0f 92       	push	r0
    2464:	11 24       	eor	r1, r1
    2466:	2f 93       	push	r18
    2468:	3f 93       	push	r19
    246a:	4f 93       	push	r20
    246c:	5f 93       	push	r21
    246e:	6f 93       	push	r22
    2470:	7f 93       	push	r23
    2472:	8f 93       	push	r24
    2474:	9f 93       	push	r25
    2476:	af 93       	push	r26
    2478:	bf 93       	push	r27
    247a:	ef 93       	push	r30
    247c:	ff 93       	push	r31
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
	g_TIMER1_callBackFunctionPtr();/*Call the callback function at every interrupt(at every overflow)*/
    2486:	e0 91 f6 00 	lds	r30, 0x00F6
    248a:	f0 91 f7 00 	lds	r31, 0x00F7
    248e:	09 95       	icall
}
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	ff 91       	pop	r31
    2496:	ef 91       	pop	r30
    2498:	bf 91       	pop	r27
    249a:	af 91       	pop	r26
    249c:	9f 91       	pop	r25
    249e:	8f 91       	pop	r24
    24a0:	7f 91       	pop	r23
    24a2:	6f 91       	pop	r22
    24a4:	5f 91       	pop	r21
    24a6:	4f 91       	pop	r20
    24a8:	3f 91       	pop	r19
    24aa:	2f 91       	pop	r18
    24ac:	0f 90       	pop	r0
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	0f 90       	pop	r0
    24b2:	1f 90       	pop	r1
    24b4:	18 95       	reti

000024b6 <__vector_7>:

ISR(TIMER1_COMPA_vect)/*in case TCNT1 matches OCR1A*/
{
    24b6:	1f 92       	push	r1
    24b8:	0f 92       	push	r0
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	0f 92       	push	r0
    24be:	11 24       	eor	r1, r1
    24c0:	2f 93       	push	r18
    24c2:	3f 93       	push	r19
    24c4:	4f 93       	push	r20
    24c6:	5f 93       	push	r21
    24c8:	6f 93       	push	r22
    24ca:	7f 93       	push	r23
    24cc:	8f 93       	push	r24
    24ce:	9f 93       	push	r25
    24d0:	af 93       	push	r26
    24d2:	bf 93       	push	r27
    24d4:	ef 93       	push	r30
    24d6:	ff 93       	push	r31
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
	g_TIMER1_callBackFunctionPtr();/*Call the callback function at every interrupt(at every Compare match between TCNT1 & OCR1A)*/
    24e0:	e0 91 f6 00 	lds	r30, 0x00F6
    24e4:	f0 91 f7 00 	lds	r31, 0x00F7
    24e8:	09 95       	icall

}
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	ff 91       	pop	r31
    24f0:	ef 91       	pop	r30
    24f2:	bf 91       	pop	r27
    24f4:	af 91       	pop	r26
    24f6:	9f 91       	pop	r25
    24f8:	8f 91       	pop	r24
    24fa:	7f 91       	pop	r23
    24fc:	6f 91       	pop	r22
    24fe:	5f 91       	pop	r21
    2500:	4f 91       	pop	r20
    2502:	3f 91       	pop	r19
    2504:	2f 91       	pop	r18
    2506:	0f 90       	pop	r0
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	0f 90       	pop	r0
    250c:	1f 90       	pop	r1
    250e:	18 95       	reti

00002510 <TIMER1_init>:
 *	4)TIMER1 operating mode
 *	5)TIMER1 output pins number ( OC1B only or (OC1A & OC1B) ) //in case of compare mode
 *	6)TIMER1 output pins value (Toggle/clear/set on compare) //in case of compare mode
 */
void TIMER1_init (const TIMER1_ConfigType *Config_Ptr)
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	00 d0       	rcall	.+0      	; 0x2516 <TIMER1_init+0x6>
    2516:	00 d0       	rcall	.+0      	; 0x2518 <TIMER1_init+0x8>
    2518:	00 d0       	rcall	.+0      	; 0x251a <TIMER1_init+0xa>
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->mode)
    2522:	e9 81       	ldd	r30, Y+1	; 0x01
    2524:	fa 81       	ldd	r31, Y+2	; 0x02
    2526:	85 81       	ldd	r24, Z+5	; 0x05
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	3e 83       	std	Y+6, r19	; 0x06
    252e:	2d 83       	std	Y+5, r18	; 0x05
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	31 f0       	breq	.+12     	; 0x2544 <TIMER1_init+0x34>
    2538:	2d 81       	ldd	r18, Y+5	; 0x05
    253a:	3e 81       	ldd	r19, Y+6	; 0x06
    253c:	24 30       	cpi	r18, 0x04	; 4
    253e:	31 05       	cpc	r19, r1
    2540:	c9 f0       	breq	.+50     	; 0x2574 <TIMER1_init+0x64>
    2542:	99 c0       	rjmp	.+306    	; 0x2676 <TIMER1_init+0x166>
		 * CS12,CS11,CS10  ===> To set prescaler value according to dynamic configurations
		 * TCNT1 ===> has a value indicating when the timer will start its count(start value)
		 * TOIE1=1 ===> To enable TIMER1 overflow interrupt
		 *******************************************************************************************************/

		TCCR1A = (LOGIC_HIGH << FOC1A) | (LOGIC_HIGH << FOC1B);/*No PWM mode*//*Set WGM11=0 , WGM10=0 */
    2544:	ef e4       	ldi	r30, 0x4F	; 79
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	8c e0       	ldi	r24, 0x0C	; 12
    254a:	80 83       	st	Z, r24
		TCCR1B = Config_Ptr->prescaler; /*Set prescaler value*//*Set WGM13=0 , WGM12=0 */
    254c:	ae e4       	ldi	r26, 0x4E	; 78
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e9 81       	ldd	r30, Y+1	; 0x01
    2552:	fa 81       	ldd	r31, Y+2	; 0x02
    2554:	84 81       	ldd	r24, Z+4	; 0x04
    2556:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->initial_value; /*Start value*/
    2558:	ac e4       	ldi	r26, 0x4C	; 76
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e9 81       	ldd	r30, Y+1	; 0x01
    255e:	fa 81       	ldd	r31, Y+2	; 0x02
    2560:	80 81       	ld	r24, Z
    2562:	91 81       	ldd	r25, Z+1	; 0x01
    2564:	11 96       	adiw	r26, 0x01	; 1
    2566:	9c 93       	st	X, r25
    2568:	8e 93       	st	-X, r24
		TIMSK = (LOGIC_HIGH << TOIE1);/*To enable overflow interrupt*/
    256a:	e9 e5       	ldi	r30, 0x59	; 89
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	84 e0       	ldi	r24, 0x04	; 4
    2570:	80 83       	st	Z, r24
    2572:	81 c0       	rjmp	.+258    	; 0x2676 <TIMER1_init+0x166>
		 * CS12,CS11,CS10  ===> To set prescaler value according to dynamic configurations
		 * TCNT1 ===> has a value indicating when the timer will start its count(start value)
		 * OCR1A ===> has a value indicating when the timer will stop its count(compare(Top) value)
		 * OCIE1A=1 ===> To generate interrupt at every compare match with OCR1A
		 *******************************************************************************************************/
		TCCR1A = (LOGIC_HIGH << FOC1A) | (LOGIC_HIGH << FOC1B);/*No PWM mode*//*Set WGM11=0 , WGM10=0 */
    2574:	ef e4       	ldi	r30, 0x4F	; 79
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	8c e0       	ldi	r24, 0x0C	; 12
    257a:	80 83       	st	Z, r24
		TCCR1B = Config_Ptr->prescaler; /*Set prescaler value*/
    257c:	ae e4       	ldi	r26, 0x4E	; 78
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e9 81       	ldd	r30, Y+1	; 0x01
    2582:	fa 81       	ldd	r31, Y+2	; 0x02
    2584:	84 81       	ldd	r24, Z+4	; 0x04
    2586:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->initial_value; /*Start value*/
    2588:	ac e4       	ldi	r26, 0x4C	; 76
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e9 81       	ldd	r30, Y+1	; 0x01
    258e:	fa 81       	ldd	r31, Y+2	; 0x02
    2590:	80 81       	ld	r24, Z
    2592:	91 81       	ldd	r25, Z+1	; 0x01
    2594:	11 96       	adiw	r26, 0x01	; 1
    2596:	9c 93       	st	X, r25
    2598:	8e 93       	st	-X, r24
		TCCR1B = (TCCR1B & 0xE7) | (TIMER1_OUTPUT_PIN_OC1B_ONLY << 3);/*Set WGM13=0 , WGM12=1 ==> OCR1A=Top*/
    259a:	ae e4       	ldi	r26, 0x4E	; 78
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	ee e4       	ldi	r30, 0x4E	; 78
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	87 7e       	andi	r24, 0xE7	; 231
    25a6:	88 60       	ori	r24, 0x08	; 8
    25a8:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;/*Set compare(Top) value when an interrupt will occur*/
    25aa:	aa e4       	ldi	r26, 0x4A	; 74
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e9 81       	ldd	r30, Y+1	; 0x01
    25b0:	fa 81       	ldd	r31, Y+2	; 0x02
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	11 96       	adiw	r26, 0x01	; 1
    25b8:	9c 93       	st	X, r25
    25ba:	8e 93       	st	-X, r24
		TIMSK = (LOGIC_HIGH << OCIE1A);/*To generate interrupt at every compare match with OCR1A */
    25bc:	e9 e5       	ldi	r30, 0x59	; 89
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 e1       	ldi	r24, 0x10	; 16
    25c2:	80 83       	st	Z, r24

		switch (Config_Ptr->TIMER1_OutputPinsNumberValue)
    25c4:	e9 81       	ldd	r30, Y+1	; 0x01
    25c6:	fa 81       	ldd	r31, Y+2	; 0x02
    25c8:	86 81       	ldd	r24, Z+6	; 0x06
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	3c 83       	std	Y+4, r19	; 0x04
    25d0:	2b 83       	std	Y+3, r18	; 0x03
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	9c 81       	ldd	r25, Y+4	; 0x04
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	91 05       	cpc	r25, r1
    25da:	31 f0       	breq	.+12     	; 0x25e8 <TIMER1_init+0xd8>
    25dc:	2b 81       	ldd	r18, Y+3	; 0x03
    25de:	3c 81       	ldd	r19, Y+4	; 0x04
    25e0:	23 30       	cpi	r18, 0x03	; 3
    25e2:	31 05       	cpc	r19, r1
    25e4:	d9 f0       	breq	.+54     	; 0x261c <TIMER1_init+0x10c>
    25e6:	47 c0       	rjmp	.+142    	; 0x2676 <TIMER1_init+0x166>
		{
		case TIMER1_OUTPUT_PIN_OC1B_ONLY :/*In this case we can use ICU because we store the compare(Top) value in OCR1A register*/
			TCCR1A = (TCCR1A & 0xCF)
    25e8:	af e4       	ldi	r26, 0x4F	; 79
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	ef e4       	ldi	r30, 0x4F	; 79
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	28 2f       	mov	r18, r24
    25f4:	2f 7c       	andi	r18, 0xCF	; 207
    25f6:	e9 81       	ldd	r30, Y+1	; 0x01
    25f8:	fa 81       	ldd	r31, Y+2	; 0x02
    25fa:	80 85       	ldd	r24, Z+8	; 0x08
    25fc:	88 2f       	mov	r24, r24
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	82 95       	swap	r24
    2602:	92 95       	swap	r25
    2604:	90 7f       	andi	r25, 0xF0	; 240
    2606:	98 27       	eor	r25, r24
    2608:	80 7f       	andi	r24, 0xF0	; 240
    260a:	98 27       	eor	r25, r24
    260c:	82 2b       	or	r24, r18
    260e:	8c 93       	st	X, r24
					| ( (Config_Ptr->TIMER1_ctcModeOutputValueOnOC1B) << 4);/*Set COM1B1,COM1B0 according to dynamic configurations*/

			GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);/*Set OC1B as output pin*/
    2610:	83 e0       	ldi	r24, 0x03	; 3
    2612:	64 e0       	ldi	r22, 0x04	; 4
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
    261a:	2d c0       	rjmp	.+90     	; 0x2676 <TIMER1_init+0x166>

			break;
		case TIMER1_OUTPUT_PINS_OC1B_OC1A :/*In this case we can not use ICU because we store the compare(Top) value in ICR1 register*/

			TCCR1A = (TCCR1A & 0x0F)
    261c:	af e4       	ldi	r26, 0x4F	; 79
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	ef e4       	ldi	r30, 0x4F	; 79
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	28 2f       	mov	r18, r24
    2628:	2f 70       	andi	r18, 0x0F	; 15
    262a:	e9 81       	ldd	r30, Y+1	; 0x01
    262c:	fa 81       	ldd	r31, Y+2	; 0x02
    262e:	80 85       	ldd	r24, Z+8	; 0x08
    2630:	88 2f       	mov	r24, r24
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	82 95       	swap	r24
    2636:	92 95       	swap	r25
    2638:	90 7f       	andi	r25, 0xF0	; 240
    263a:	98 27       	eor	r25, r24
    263c:	80 7f       	andi	r24, 0xF0	; 240
    263e:	98 27       	eor	r25, r24
    2640:	28 2b       	or	r18, r24
    2642:	e9 81       	ldd	r30, Y+1	; 0x01
    2644:	fa 81       	ldd	r31, Y+2	; 0x02
    2646:	87 81       	ldd	r24, Z+7	; 0x07
    2648:	88 2f       	mov	r24, r24
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	00 24       	eor	r0, r0
    264e:	96 95       	lsr	r25
    2650:	87 95       	ror	r24
    2652:	07 94       	ror	r0
    2654:	96 95       	lsr	r25
    2656:	87 95       	ror	r24
    2658:	07 94       	ror	r0
    265a:	98 2f       	mov	r25, r24
    265c:	80 2d       	mov	r24, r0
    265e:	82 2b       	or	r24, r18
    2660:	8c 93       	st	X, r24
					| ( (Config_Ptr->TIMER1_ctcModeOutputValueOnOC1B) << 4)
					| ( (Config_Ptr->TIMER1_ctcModeOutputValueOnOC1A) << 6);
			GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);/*Set OC1B as output pin*/
    2662:	83 e0       	ldi	r24, 0x03	; 3
    2664:	64 e0       	ldi	r22, 0x04	; 4
    2666:	41 e0       	ldi	r20, 0x01	; 1
    2668:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
			GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);/*Set OC1A as output pin*/
    266c:	83 e0       	ldi	r24, 0x03	; 3
    266e:	65 e0       	ldi	r22, 0x05	; 5
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	0e 94 2e 08 	call	0x105c	; 0x105c <GPIO_setupPinDirection>
		break;

	default :
		break;
	}
}
    2676:	26 96       	adiw	r28, 0x06	; 6
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <TIMER1_setCallBackFunction>:

/*
 * Description : Function that takes callback function address (set the function to be called at every interrupt)
 */
void TIMER1_setCallBackFunction (void (*callBackFunctionPtr) (void))
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	00 d0       	rcall	.+0      	; 0x268e <TIMER1_setCallBackFunction+0x6>
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER1_callBackFunctionPtr = callBackFunctionPtr;
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	90 93 f7 00 	sts	0x00F7, r25
    269e:	80 93 f6 00 	sts	0x00F6, r24
}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <TIMER1_deInit>:
/*
 * Description : Function to stop TIMER1
 */

void TIMER1_deInit (void)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    26b4:	ef e4       	ldi	r30, 0x4F	; 79
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	10 82       	st	Z, r1
	TCCR1B = 0;
    26ba:	ee e4       	ldi	r30, 0x4E	; 78
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	10 82       	st	Z, r1
	TIMSK &= 0b11000011;
    26c0:	a9 e5       	ldi	r26, 0x59	; 89
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e9 e5       	ldi	r30, 0x59	; 89
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	83 7c       	andi	r24, 0xC3	; 195
    26cc:	8c 93       	st	X, r24
}
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <UART_init>:
 * 4- UART n-bits data mode (5-bits,6-bits,7-bits,8-bits,9-bits)
 * 5- set baud rate in UBRR register using an equation
 * 6- to enable RX and TX interrupts in case we use interrupts
 */
void UART_init (UART_config *UART_configurations)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	00 d0       	rcall	.+0      	; 0x26da <UART_init+0x6>
    26da:	00 d0       	rcall	.+0      	; 0x26dc <UART_init+0x8>
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	9c 83       	std	Y+4, r25	; 0x04
    26e2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRR_value = 0;
    26e4:	1a 82       	std	Y+2, r1	; 0x02
    26e6:	19 82       	std	Y+1, r1	; 0x01
	/**************************************Set UART dynamic configurations**************************************/

	/*********set whether the UART operates in U2X(double transmission speed) or not********/
	UCSRA =
    26e8:	ab e2       	ldi	r26, 0x2B	; 43
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	eb e2       	ldi	r30, 0x2B	; 43
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	28 2f       	mov	r18, r24
    26f4:	2d 7f       	andi	r18, 0xFD	; 253
    26f6:	eb 81       	ldd	r30, Y+3	; 0x03
    26f8:	fc 81       	ldd	r31, Y+4	; 0x04
    26fa:	83 81       	ldd	r24, Z+3	; 0x03
    26fc:	88 2f       	mov	r24, r24
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	82 2b       	or	r24, r18
    2706:	8c 93       	st	X, r24
					| ( (UART_configurations->UART_transmissionSpeed)
							<< UART_U2X_BIT_ID);
	/********************************************************************/

	/*************Receiver enable and transmitter enable************/
	UCSRB |= (1 << RXEN) | (1 << TXEN);
    2708:	aa e2       	ldi	r26, 0x2A	; 42
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ea e2       	ldi	r30, 0x2A	; 42
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	88 61       	ori	r24, 0x18	; 24
    2714:	8c 93       	st	X, r24
	/**************************************************************/

	/*****to use UCSRC *****/
	UCSRC |= (1 << URSEL);
    2716:	a0 e4       	ldi	r26, 0x40	; 64
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e0 e4       	ldi	r30, 0x40	; 64
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	80 68       	ori	r24, 0x80	; 128
    2722:	8c 93       	st	X, r24
	/************************/
	/****************Set the UART parity type***************/
	UCSRC = (UCSRC & ~ (0x03 << UART_PARITY_START_BIT_ID))
    2724:	a0 e4       	ldi	r26, 0x40	; 64
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e0 e4       	ldi	r30, 0x40	; 64
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	28 2f       	mov	r18, r24
    2730:	2f 7c       	andi	r18, 0xCF	; 207
    2732:	eb 81       	ldd	r30, Y+3	; 0x03
    2734:	fc 81       	ldd	r31, Y+4	; 0x04
    2736:	80 81       	ld	r24, Z
    2738:	88 2f       	mov	r24, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	82 95       	swap	r24
    273e:	92 95       	swap	r25
    2740:	90 7f       	andi	r25, 0xF0	; 240
    2742:	98 27       	eor	r25, r24
    2744:	80 7f       	andi	r24, 0xF0	; 240
    2746:	98 27       	eor	r25, r24
    2748:	82 2b       	or	r24, r18
    274a:	8c 93       	st	X, r24
			| ( (UART_configurations->UART_parity) << UART_PARITY_START_BIT_ID);
	/*************************************************/

	/*************Set the UART stop bits number************/
	UCSRC = (UCSRC & ~ (1 << UART_STOP_BITS_BIT_ID))
    274c:	a0 e4       	ldi	r26, 0x40	; 64
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e0 e4       	ldi	r30, 0x40	; 64
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	28 2f       	mov	r18, r24
    2758:	27 7f       	andi	r18, 0xF7	; 247
    275a:	eb 81       	ldd	r30, Y+3	; 0x03
    275c:	fc 81       	ldd	r31, Y+4	; 0x04
    275e:	81 81       	ldd	r24, Z+1	; 0x01
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	82 2b       	or	r24, r18
    2772:	8c 93       	st	X, r24
			| ( (UART_configurations->UART_stopBits) << UART_STOP_BITS_BIT_ID);
	/*************************************************/

	/************Set the UART parity type**************/
	UCSRC = (UCSRC & ~ (0x03 << UART_N_BITS_MODE_START_BIT_ID))
    2774:	a0 e4       	ldi	r26, 0x40	; 64
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	e0 e4       	ldi	r30, 0x40	; 64
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	28 2f       	mov	r18, r24
    2780:	29 7f       	andi	r18, 0xF9	; 249
    2782:	eb 81       	ldd	r30, Y+3	; 0x03
    2784:	fc 81       	ldd	r31, Y+4	; 0x04
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	88 2f       	mov	r24, r24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	82 2b       	or	r24, r18
    2792:	8c 93       	st	X, r24
			| ( (UART_configurations->UART_nBitsDataMode)
					<< UART_N_BITS_MODE_START_BIT_ID);
	/*************************************************/

	/***********in case of 9-bits data mode**********/
	if (UART_configurations->UART_nBitsDataMode == 9)
    2794:	eb 81       	ldd	r30, Y+3	; 0x03
    2796:	fc 81       	ldd	r31, Y+4	; 0x04
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	89 30       	cpi	r24, 0x09	; 9
    279c:	39 f4       	brne	.+14     	; 0x27ac <UART_init+0xd8>
	{
		UCSRB |= (1 << UCSZ2);
    279e:	aa e2       	ldi	r26, 0x2A	; 42
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	ea e2       	ldi	r30, 0x2A	; 42
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	84 60       	ori	r24, 0x04	; 4
    27aa:	8c 93       	st	X, r24
	}
	/*************************************************/

	/********calculating UBBR in term of the baud rate************/
	if (UART_configurations->UART_transmissionSpeed == UART_singleSpeed)/*in case the UART operates in normal mode*/
    27ac:	eb 81       	ldd	r30, Y+3	; 0x03
    27ae:	fc 81       	ldd	r31, Y+4	; 0x04
    27b0:	83 81       	ldd	r24, Z+3	; 0x03
    27b2:	88 23       	and	r24, r24
    27b4:	31 f5       	brne	.+76     	; 0x2802 <UART_init+0x12e>
	{
		UBRR_value = (uint16) ( (F_CPU
    27b6:	eb 81       	ldd	r30, Y+3	; 0x03
    27b8:	fc 81       	ldd	r31, Y+4	; 0x04
    27ba:	84 81       	ldd	r24, Z+4	; 0x04
    27bc:	95 81       	ldd	r25, Z+5	; 0x05
    27be:	a6 81       	ldd	r26, Z+6	; 0x06
    27c0:	b7 81       	ldd	r27, Z+7	; 0x07
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	aa 1f       	adc	r26, r26
    27c8:	bb 1f       	adc	r27, r27
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	aa 1f       	adc	r26, r26
    27d0:	bb 1f       	adc	r27, r27
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	aa 1f       	adc	r26, r26
    27d8:	bb 1f       	adc	r27, r27
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	aa 1f       	adc	r26, r26
    27e0:	bb 1f       	adc	r27, r27
    27e2:	9c 01       	movw	r18, r24
    27e4:	ad 01       	movw	r20, r26
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	92 e1       	ldi	r25, 0x12	; 18
    27ea:	aa e7       	ldi	r26, 0x7A	; 122
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 cb 14 	call	0x2996	; 0x2996 <__udivmodsi4>
    27f6:	da 01       	movw	r26, r20
    27f8:	c9 01       	movw	r24, r18
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	26 c0       	rjmp	.+76     	; 0x284e <UART_init+0x17a>
				/ (16 * UART_configurations->UART_baudRate)) - 1);
	}
	else if (UART_configurations->UART_transmissionSpeed == UART_doubleSpeed)/*in case the UART operates in U2X(double transmission speed)*/
    2802:	eb 81       	ldd	r30, Y+3	; 0x03
    2804:	fc 81       	ldd	r31, Y+4	; 0x04
    2806:	83 81       	ldd	r24, Z+3	; 0x03
    2808:	81 30       	cpi	r24, 0x01	; 1
    280a:	09 f5       	brne	.+66     	; 0x284e <UART_init+0x17a>
	{
		UBRR_value = (uint16) ( (F_CPU
    280c:	eb 81       	ldd	r30, Y+3	; 0x03
    280e:	fc 81       	ldd	r31, Y+4	; 0x04
    2810:	84 81       	ldd	r24, Z+4	; 0x04
    2812:	95 81       	ldd	r25, Z+5	; 0x05
    2814:	a6 81       	ldd	r26, Z+6	; 0x06
    2816:	b7 81       	ldd	r27, Z+7	; 0x07
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	aa 1f       	adc	r26, r26
    281e:	bb 1f       	adc	r27, r27
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	aa 1f       	adc	r26, r26
    2826:	bb 1f       	adc	r27, r27
    2828:	88 0f       	add	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	aa 1f       	adc	r26, r26
    282e:	bb 1f       	adc	r27, r27
    2830:	9c 01       	movw	r18, r24
    2832:	ad 01       	movw	r20, r26
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	92 e1       	ldi	r25, 0x12	; 18
    2838:	aa e7       	ldi	r26, 0x7A	; 122
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	bc 01       	movw	r22, r24
    283e:	cd 01       	movw	r24, r26
    2840:	0e 94 cb 14 	call	0x2996	; 0x2996 <__udivmodsi4>
    2844:	da 01       	movw	r26, r20
    2846:	c9 01       	movw	r24, r18
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	9a 83       	std	Y+2, r25	; 0x02
    284c:	89 83       	std	Y+1, r24	; 0x01
				/ (8 * UART_configurations->UART_baudRate)) - 1);
	}
	/*****************************************************************/

	/***********setting UBBR*********/
	UBRRL = UBRR_value;
    284e:	e9 e2       	ldi	r30, 0x29	; 41
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	80 83       	st	Z, r24
	UBRRH = UBRR_value >> 8;
    2856:	e0 e4       	ldi	r30, 0x40	; 64
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	9a 81       	ldd	r25, Y+2	; 0x02
    285e:	89 2f       	mov	r24, r25
    2860:	99 27       	eor	r25, r25
    2862:	80 83       	st	Z, r24
	/***********************************/
	/**************************************************************************************************************************/
#ifdef UART_UISNG_INTERRUPT
	UCSRB |= (1 << RXCIE) | (1 << UDRIE);/* Rx complete interrupt enable & data register empty interrupt enable*/
#endif
}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	0f 90       	pop	r0
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	08 95       	ret

00002872 <UART_sendByte>:

/*
 * Description :Function that take a byte (data) and send it serially through UART (TX pin)
 */
void UART_sendByte (const uint8 data)
{
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	0f 92       	push	r0
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	89 83       	std	Y+1, r24	; 0x01
#ifndef UART_UISNG_INTERRUPT
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    287e:	eb e2       	ldi	r30, 0x2B	; 43
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	80 72       	andi	r24, 0x20	; 32
    288a:	90 70       	andi	r25, 0x00	; 0
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	b9 f3       	breq	.-18     	; 0x287e <UART_sendByte+0xc>
	{
	}
	UDR = data;
    2890:	ec e2       	ldi	r30, 0x2C	; 44
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	80 83       	st	Z, r24
#ifdef UART_UISNG_INTERRUPT
	g_dataTx = data;
	g_flagTx = 1;
#endif

}
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <UART_sendString>:

/*
 * Description :Function to send a string serially through the UART
 */
void UART_sendString (const uint8 *string)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <UART_sendString+0x6>
    28a6:	0f 92       	push	r0
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	9b 83       	std	Y+3, r25	; 0x03
    28ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count;
	for (count = 0 ; string[count] != '\0' ; count++)
    28b0:	19 82       	std	Y+1, r1	; 0x01
    28b2:	0e c0       	rjmp	.+28     	; 0x28d0 <UART_sendString+0x30>
	{
		UART_sendByte(string[count]);
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	fc 01       	movw	r30, r24
    28c0:	e2 0f       	add	r30, r18
    28c2:	f3 1f       	adc	r31, r19
    28c4:	80 81       	ld	r24, Z
    28c6:	0e 94 39 14 	call	0x2872	; 0x2872 <UART_sendByte>
 * Description :Function to send a string serially through the UART
 */
void UART_sendString (const uint8 *string)
{
	uint8 count;
	for (count = 0 ; string[count] != '\0' ; count++)
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	8f 5f       	subi	r24, 0xFF	; 255
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	9b 81       	ldd	r25, Y+3	; 0x03
    28da:	fc 01       	movw	r30, r24
    28dc:	e2 0f       	add	r30, r18
    28de:	f3 1f       	adc	r31, r19
    28e0:	80 81       	ld	r24, Z
    28e2:	88 23       	and	r24, r24
    28e4:	39 f7       	brne	.-50     	; 0x28b4 <UART_sendString+0x14>
		while (g_flagTx == 1)/*wait until the byte is sent*/
		{
		}
#endif
	}
}
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <UART_receiveByte>:

/*
 * Description : Function that return a byte(data) received serially from UART (RX pin)
 */
uint8 UART_receiveByte (void)
{
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
#ifndef UART_UISNG_INTERRUPT
	while (BIT_IS_CLEAR(UCSRA, RXC))
    28fa:	eb e2       	ldi	r30, 0x2B	; 43
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	88 23       	and	r24, r24
    2902:	dc f7       	brge	.-10     	; 0x28fa <UART_receiveByte+0x8>
	{
	}
	return UDR;
    2904:	ec e2       	ldi	r30, 0x2C	; 44
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
	{
	}
	g_flagRx = 0;
	return g_dataRx;
#endif
}
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <UART_receiveString>:

/*
 * Description : Function to receive a string until '#' serially through the UART
 */
void UART_receiveString (uint8 *string)
{
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	00 d0       	rcall	.+0      	; 0x291a <UART_receiveString+0xa>
    291a:	0f 92       	push	r0
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	9b 83       	std	Y+3, r25	; 0x03
    2922:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    2924:	19 82       	std	Y+1, r1	; 0x01
	string[count] = UART_receiveByte();
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	28 2f       	mov	r18, r24
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	9b 81       	ldd	r25, Y+3	; 0x03
    2930:	8c 01       	movw	r16, r24
    2932:	02 0f       	add	r16, r18
    2934:	13 1f       	adc	r17, r19
    2936:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UART_receiveByte>
    293a:	f8 01       	movw	r30, r16
    293c:	80 83       	st	Z, r24
    293e:	0f c0       	rjmp	.+30     	; 0x295e <UART_receiveString+0x4e>
	while (string[count] != '#')
	{
		count++;
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	8f 5f       	subi	r24, 0xFF	; 255
    2944:	89 83       	std	Y+1, r24	; 0x01
		string[count] = UART_receiveByte();
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	9b 81       	ldd	r25, Y+3	; 0x03
    2950:	8c 01       	movw	r16, r24
    2952:	02 0f       	add	r16, r18
    2954:	13 1f       	adc	r17, r19
    2956:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UART_receiveByte>
    295a:	f8 01       	movw	r30, r16
    295c:	80 83       	st	Z, r24
 */
void UART_receiveString (uint8 *string)
{
	uint8 count = 0;
	string[count] = UART_receiveByte();
	while (string[count] != '#')
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	9b 81       	ldd	r25, Y+3	; 0x03
    2968:	fc 01       	movw	r30, r24
    296a:	e2 0f       	add	r30, r18
    296c:	f3 1f       	adc	r31, r19
    296e:	80 81       	ld	r24, Z
    2970:	83 32       	cpi	r24, 0x23	; 35
    2972:	31 f7       	brne	.-52     	; 0x2940 <UART_receiveString+0x30>
	{
		count++;
		string[count] = UART_receiveByte();
	}

	string[count] = '\0';
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	9b 81       	ldd	r25, Y+3	; 0x03
    297e:	fc 01       	movw	r30, r24
    2980:	e2 0f       	add	r30, r18
    2982:	f3 1f       	adc	r31, r19
    2984:	10 82       	st	Z, r1

}
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	1f 91       	pop	r17
    2992:	0f 91       	pop	r16
    2994:	08 95       	ret

00002996 <__udivmodsi4>:
    2996:	a1 e2       	ldi	r26, 0x21	; 33
    2998:	1a 2e       	mov	r1, r26
    299a:	aa 1b       	sub	r26, r26
    299c:	bb 1b       	sub	r27, r27
    299e:	fd 01       	movw	r30, r26
    29a0:	0d c0       	rjmp	.+26     	; 0x29bc <__udivmodsi4_ep>

000029a2 <__udivmodsi4_loop>:
    29a2:	aa 1f       	adc	r26, r26
    29a4:	bb 1f       	adc	r27, r27
    29a6:	ee 1f       	adc	r30, r30
    29a8:	ff 1f       	adc	r31, r31
    29aa:	a2 17       	cp	r26, r18
    29ac:	b3 07       	cpc	r27, r19
    29ae:	e4 07       	cpc	r30, r20
    29b0:	f5 07       	cpc	r31, r21
    29b2:	20 f0       	brcs	.+8      	; 0x29bc <__udivmodsi4_ep>
    29b4:	a2 1b       	sub	r26, r18
    29b6:	b3 0b       	sbc	r27, r19
    29b8:	e4 0b       	sbc	r30, r20
    29ba:	f5 0b       	sbc	r31, r21

000029bc <__udivmodsi4_ep>:
    29bc:	66 1f       	adc	r22, r22
    29be:	77 1f       	adc	r23, r23
    29c0:	88 1f       	adc	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	1a 94       	dec	r1
    29c6:	69 f7       	brne	.-38     	; 0x29a2 <__udivmodsi4_loop>
    29c8:	60 95       	com	r22
    29ca:	70 95       	com	r23
    29cc:	80 95       	com	r24
    29ce:	90 95       	com	r25
    29d0:	9b 01       	movw	r18, r22
    29d2:	ac 01       	movw	r20, r24
    29d4:	bd 01       	movw	r22, r26
    29d6:	cf 01       	movw	r24, r30
    29d8:	08 95       	ret

000029da <__prologue_saves__>:
    29da:	2f 92       	push	r2
    29dc:	3f 92       	push	r3
    29de:	4f 92       	push	r4
    29e0:	5f 92       	push	r5
    29e2:	6f 92       	push	r6
    29e4:	7f 92       	push	r7
    29e6:	8f 92       	push	r8
    29e8:	9f 92       	push	r9
    29ea:	af 92       	push	r10
    29ec:	bf 92       	push	r11
    29ee:	cf 92       	push	r12
    29f0:	df 92       	push	r13
    29f2:	ef 92       	push	r14
    29f4:	ff 92       	push	r15
    29f6:	0f 93       	push	r16
    29f8:	1f 93       	push	r17
    29fa:	cf 93       	push	r28
    29fc:	df 93       	push	r29
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	ca 1b       	sub	r28, r26
    2a04:	db 0b       	sbc	r29, r27
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	09 94       	ijmp

00002a12 <__epilogue_restores__>:
    2a12:	2a 88       	ldd	r2, Y+18	; 0x12
    2a14:	39 88       	ldd	r3, Y+17	; 0x11
    2a16:	48 88       	ldd	r4, Y+16	; 0x10
    2a18:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a20:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a22:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a24:	b9 84       	ldd	r11, Y+9	; 0x09
    2a26:	c8 84       	ldd	r12, Y+8	; 0x08
    2a28:	df 80       	ldd	r13, Y+7	; 0x07
    2a2a:	ee 80       	ldd	r14, Y+6	; 0x06
    2a2c:	fd 80       	ldd	r15, Y+5	; 0x05
    2a2e:	0c 81       	ldd	r16, Y+4	; 0x04
    2a30:	1b 81       	ldd	r17, Y+3	; 0x03
    2a32:	aa 81       	ldd	r26, Y+2	; 0x02
    2a34:	b9 81       	ldd	r27, Y+1	; 0x01
    2a36:	ce 0f       	add	r28, r30
    2a38:	d1 1d       	adc	r29, r1
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	de bf       	out	0x3e, r29	; 62
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	cd bf       	out	0x3d, r28	; 61
    2a44:	ed 01       	movw	r28, r26
    2a46:	08 95       	ret

00002a48 <itoa>:
    2a48:	fb 01       	movw	r30, r22
    2a4a:	9f 01       	movw	r18, r30
    2a4c:	e8 94       	clt
    2a4e:	42 30       	cpi	r20, 0x02	; 2
    2a50:	c4 f0       	brlt	.+48     	; 0x2a82 <itoa+0x3a>
    2a52:	45 32       	cpi	r20, 0x25	; 37
    2a54:	b4 f4       	brge	.+44     	; 0x2a82 <itoa+0x3a>
    2a56:	4a 30       	cpi	r20, 0x0A	; 10
    2a58:	29 f4       	brne	.+10     	; 0x2a64 <itoa+0x1c>
    2a5a:	97 fb       	bst	r25, 7
    2a5c:	1e f4       	brtc	.+6      	; 0x2a64 <itoa+0x1c>
    2a5e:	90 95       	com	r25
    2a60:	81 95       	neg	r24
    2a62:	9f 4f       	sbci	r25, 0xFF	; 255
    2a64:	64 2f       	mov	r22, r20
    2a66:	77 27       	eor	r23, r23
    2a68:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <__udivmodhi4>
    2a6c:	80 5d       	subi	r24, 0xD0	; 208
    2a6e:	8a 33       	cpi	r24, 0x3A	; 58
    2a70:	0c f0       	brlt	.+2      	; 0x2a74 <itoa+0x2c>
    2a72:	89 5d       	subi	r24, 0xD9	; 217
    2a74:	81 93       	st	Z+, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	a1 f7       	brne	.-24     	; 0x2a64 <itoa+0x1c>
    2a7c:	16 f4       	brtc	.+4      	; 0x2a82 <itoa+0x3a>
    2a7e:	5d e2       	ldi	r21, 0x2D	; 45
    2a80:	51 93       	st	Z+, r21
    2a82:	10 82       	st	Z, r1
    2a84:	c9 01       	movw	r24, r18
    2a86:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <strrev>

00002a8a <strrev>:
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	67 2f       	mov	r22, r23
    2a90:	71 91       	ld	r23, Z+
    2a92:	77 23       	and	r23, r23
    2a94:	e1 f7       	brne	.-8      	; 0x2a8e <strrev+0x4>
    2a96:	32 97       	sbiw	r30, 0x02	; 2
    2a98:	04 c0       	rjmp	.+8      	; 0x2aa2 <strrev+0x18>
    2a9a:	7c 91       	ld	r23, X
    2a9c:	6d 93       	st	X+, r22
    2a9e:	70 83       	st	Z, r23
    2aa0:	62 91       	ld	r22, -Z
    2aa2:	ae 17       	cp	r26, r30
    2aa4:	bf 07       	cpc	r27, r31
    2aa6:	c8 f3       	brcs	.-14     	; 0x2a9a <strrev+0x10>
    2aa8:	08 95       	ret

00002aaa <__udivmodhi4>:
    2aaa:	aa 1b       	sub	r26, r26
    2aac:	bb 1b       	sub	r27, r27
    2aae:	51 e1       	ldi	r21, 0x11	; 17
    2ab0:	07 c0       	rjmp	.+14     	; 0x2ac0 <__udivmodhi4_ep>

00002ab2 <__udivmodhi4_loop>:
    2ab2:	aa 1f       	adc	r26, r26
    2ab4:	bb 1f       	adc	r27, r27
    2ab6:	a6 17       	cp	r26, r22
    2ab8:	b7 07       	cpc	r27, r23
    2aba:	10 f0       	brcs	.+4      	; 0x2ac0 <__udivmodhi4_ep>
    2abc:	a6 1b       	sub	r26, r22
    2abe:	b7 0b       	sbc	r27, r23

00002ac0 <__udivmodhi4_ep>:
    2ac0:	88 1f       	adc	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	5a 95       	dec	r21
    2ac6:	a9 f7       	brne	.-22     	; 0x2ab2 <__udivmodhi4_loop>
    2ac8:	80 95       	com	r24
    2aca:	90 95       	com	r25
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	08 95       	ret

00002ad2 <_exit>:
    2ad2:	f8 94       	cli

00002ad4 <__stop_program>:
    2ad4:	ff cf       	rjmp	.-2      	; 0x2ad4 <__stop_program>
